// Frequency of Auto Save (downloads data every __ moves)
var autoFrequency = 10;

// Toggle Tooltips
var toolTips = true;

////  Import Saved Workspace  ////

var wiresDataImport = [

];
var nodesDataImport = [
   // -9076.173961205444, -8633.010081959468
];
var objectsDataImport = [
   // 0.904429574008454, 26, 8, 16711680, 16776960, 65280, 255, 16777215, true, 784.5205582551613, 989.8836886900123, 17, 2, 2.820000000000004, -1, "-1", , true, 1176.4477486046094, 977.1351290333417, 29, 0, 1.8199999999999998, -1, "-1", , true, 1534.6106756918396, 927.2889290199367, 4, 0, 2.8300000000000036, 1, "CTRL", "CTRL", true, 1534.6106756918323, 724.6967044420453, 4, 0, 2.8400000000000034, 1, "SHFT", "SHFT", true, 1534.6106756918364, 522.1044798641475, 4, 0, 2.850000000000003, 1, " MS ", " MS ", true, 1534.6106756918373, 344.83628335848977, 4, 0, 2.860000000000003, 1, "TAB", "TAB", true, 1534.6106756918373, 167.56808685283315, 4, 0, 2.8700000000000028, 1, "ESC", "ESC", true, 1711.8788721974806, 167.56808685284776, 4, 0, 2.8800000000000026, 1, " 1 ", " 1 ", true, 1711.8788721974806, 522.1044798641611, 4, 0, 2.8900000000000023, 1, " A ", " A ", true, 1711.8788721974963, 344.836283358511, 4, 0, 2.900000000000002, 1, " Q ", " Q ", true, 1559.918958025955, 1018.9558882163308, 2, 0, 2.910000000000002, 220, "Ω", , true, 1559.9189580259545, 816.3636636384388, 2, 0, 2.9200000000000017, 220, "Ω", , true, 1559.9189580259545, 613.7714390605446, 2, 0, 2.9300000000000015, 220, "Ω", , true, 1509.2709018814855, 436.50324255488346, 2, 0, 2.9400000000000013, 220, "Ω", , true, 1509.2709018814865, 259.23504604922607, 2, 0, 2.950000000000001, 220, "Ω", , true, 1509.270901881473, 81.96684954357919, 2, 0, 2.960000000000001, 220, "Ω", , true, 1711.8788721974838, 927.2889290199448, 4, 0, 2.9700000000000006, 1, "ALT", "ALT", true, 1686.5390983871298, 259.2350460492367, 2, 0, 2.9800000000000004, 220, "Ω", , true, 1686.5390983871298, 436.5032425548927, 2, 0, 2.99, 220, "Ω", , true, 1737.187154531603, 1018.9558882163378, 2, 0, 3, 220, "Ω", , true, 1686.5379694951434, 964.7965574182358, 10, 0, 0, -1, "-1", , true, 1686.5379694951434, 1091.4166977794198, 10, 0, 4, -1, "-1", , true, 1509.269772989486, 1091.4166977794198, 10, 0, 4, -1, "-1", , true, 1737.1860256396167, 1066.092669707183, 10, 0, 0, -1, "-1", , true, 1737.1860256396167, 1116.740725851656, 10, 0, 4, -1, "-1", , true, 1559.9178291339597, 1116.740725851656, 10, 0, 4, -1, "-1",
]
////    ////


///  Import Parts  ///

let wiringXPoints = {
    x0: [-0.16570967872053635, 0.3089304380604097, 0.13941611063864198, 0.24112470709171166, 0.27502757257606475, 0.3428333035447583, 0.3767361690291155, 0.41063903451346817, -0.13180681323618473, -0.09790394775183274, -0.06400108226747572, -0.030098216783124535, 0.003804648701228281, 0.03770751418558245, 0.07161037966993568, 0.10551324515428821, 0.225196858569643, 0.19014501872648074, 0.25859061621625495, 0.29150816982851513, 0.32597435713789336, 0.3592016374895765, 0.39366782479895324, 0.42689510515063533, -0.04702952433998594, -0.01333137458782741, 0.021297699251674566, 0.05468554097471924, 0.08844965874439717, 0.12283439257230254, 0.15628820231286744, 0.1910759428138234],
    x1: [-0.4355300576295487, -0.4054552594253796, -0.37538046122120705, -0.34530566301703786, 0.43663909029135745, -0.3152308648128713, -0.2851560666086997, -0.2550812684045329, -0.22500647020036454, -0.19493167199619196, -0.16485687379202554, -0.13478207558785624, -0.10470727738368726, -0.07463247917951807, -0.04455768097534887, -0.014482882771179914, 0.015591915432989163, 0.0456667136371586, 0.07574151184132756, 0.105816310045497, 0.13589110824966838, 0.16596590645383505, 0.1960407046580041, 0.2261155028621737, 0.256190301066343, 0.28626509927051186, 0.31633989747468116, 0.34641469567885025, 0.37648949388301933, 0.40656429208718836, -0.4355300576295454, -0.4054552594253796, -0.3753804612212103, -0.34530566301703786, -0.3152308648128713, -0.2851560666086997, -0.2550812684045329, -0.2250064702003613, -0.19493167199619196, -0.16485687379202554, -0.13478207558785696, -0.10470727738368726, -0.07463247917951542, -0.04455768097534887, -0.014482882771179914, 0.015591915432989163, 0.0456667136371586, 0.07574151184132684, 0.105816310045497, 0.13589110824966583, 0.16596590645383505, 0.1960407046580041, 0.2261155028621737, 0.256190301066343, 0.28626509927051186, 0.31633989747468116, 0.34641469567885025, 0.37648949388301933, 0.40656429208718836, 0.43663909029135745, -0.4355300576295454, -0.43553005762954755, -0.4355300576295454, -0.43553005762954344, -0.43553005762954344, -0.4054552594253796, -0.4054552594253762, -0.4054552594253739, -0.4054552594253743, -0.4054552594253762, -0.3753804612212103, -0.37538046122120705, -0.3753804612212092, -0.3753804612212051, -0.3753804612212051, -0.34530566301703786, -0.3453056630170401, -0.34530566301703786, -0.345305663017036, -0.345305663017036, -0.3152308648128719, -0.31523086481286877, -0.3152308648128719, -0.31523086481286877, -0.31523086481286683, -0.2851560666086997, -0.28515606660870163, -0.28515606660870163, -0.2851560666086973, -0.2851560666086997, -0.2550812684045304, -0.2550812684045336, -0.2550812684045304, -0.2550812684045336, -0.2550812684045304, -0.2250064702003613, -0.22500647020035924, -0.2250064702003613, -0.22500647020036346, -0.22500647020036346, -0.19493167199619196, -0.19493167199619196, -0.19493167199619196, -0.19493167199619196, -0.19493167199619196, -0.13478207558785696, -0.16485687379202615, -0.16485687379202615, -0.16485687379202302, -0.16485687379202615, -0.16485687379202615, -0.13478207558785382, -0.13478207558785696, -0.13478207558785588, -0.13478207558785382, -0.10470727738368474, -0.10470727738368787, -0.10470727738368474, -0.10470727738368679, -0.10470727738368474, -0.07463247917951879, -0.07463247917951879, -0.07463247917951879, -0.07463247917951879, -0.07463247917951542, -0.044557680975349595, -0.044557680975349595, -0.04455768097534634, -0.04455768097534634, -0.04455768097534634, -0.014482882771180396, -0.014482882771180396, -0.014482882771177263, -0.014482882771177263, -0.014482882771180396, 0.01559191543298844, 0.015591915432991935, 0.01559191543298844, 0.015591915432991935, 0.01559191543298844, 0.045666713637161016, 0.04566671363715776, 0.04566671363715776, 0.045666713637162945, 0.04566671363715776, 0.07574151184133021, 0.07574151184132684, 0.07574151184133021, 0.07574151184132684, 0.07574151184132805, 0.10581631004549616, 0.10581631004549616, 0.1058163100454994, 0.1058163100454994, 0.10581631004549616, 0.13589110824966838, 0.13589110824966535, 0.13589110824966535, 0.13589110824966535, 0.13589110824966838, 0.16596590645383433, 0.16596590645383433, 0.16596590645383769, 0.16596590645383433, 0.16596590645383433, 0.19604070465800666, 0.19604070465800666, 0.19604070465800363, 0.22611550286217222, 0.19604070465800666, 0.22611550286217222, 0.22611550286217222, 0.2261155028621756, 0.19604070465800666, 0.22611550286217222, 0.25619030106634155, 0.25619030106634155, 0.25619030106634155, 0.25619030106634155, 0.25619030106634494, 0.2862650992705104, 0.2862650992705104, 0.2862650992705104, 0.28626509927051375, 0.28626509927051375, 0.3163398974746797, 0.3163398974746797, 0.3163398974746831, 0.3163398974746831, 0.3163398974746831, 0.34641469567885214, 0.3464146956788485, 0.3464146956788485, 0.3464146956788485, 0.34641469567885214, 0.3764894938830179, 0.3764894938830179, 0.3764894938830179, 0.3764894938830212, 0.3764894938830212, 0.4065642920871869, 0.4065642920871869, 0.4065642920871869, 0.4366390902913596, 0.4065642920871903, 0.4366390902913563, 0.4366390902913563, 0.4366390902913563, 0.4065642920871869, 0.4366390902913563, -0.43553005762954344, -0.43553005762954344, -0.4355300576295487, -0.43553005762954344, -0.43553005762954344, -0.40545525942537836, -0.4054552594253743, -0.4054552594253743, -0.4054552594253743, -0.4054552594253796, -0.3753804612212092, -0.3753804612212051, -0.3753804612212051, -0.3753804612212051, -0.3753804612212092, -0.345305663017036, -0.345305663017036, -0.3453056630170401, -0.345305663017036, -0.345305663017036, -0.31523086481286683, -0.3152308648128708, -0.31523086481286683, -0.31523086481286683, -0.31523086481286683, -0.28515606660869774, -0.28515606660869774, -0.28515606660870163, -0.28515606660869774, -0.28515606660869774, -0.25508126840453255, -0.25508126840452866, -0.25508126840452866, -0.25508126840453255, -0.25508126840452866, -0.22500647020035924, -0.225006470200359, -0.22500647020035924, -0.22500647020035924, -0.22500647020036346, -0.1949316719961903, -0.1949316719961903, -0.1949316719961903, -0.1949316719961903, -0.1949316719961903, -0.1648568737920206, -0.16485687379202302, -0.16485687379202096, -0.16485687379202096, -0.16485687379202507, -0.13478207558785202, -0.13478207558785382, -0.13478207558785202, -0.13478207558785202, -0.13478207558785202, -0.10470727738368281, -0.10470727738368281, -0.10470727738368281, -0.10470727738368679, -0.10470727738368281, -0.07463247917951542, -0.07463247917951374, -0.07463247917951374, -0.07463247917951374, -0.07463247917951325, -0.04455768097534634, -0.04455768097534634, -0.04455768097534405, -0.04455768097534441, -0.04455768097534441, -0.014482882771177263, -0.014482882771174852, -0.014482882771175334, -0.014482882771175334, -0.014482882771174852, 0.015591915432993745, 0.015591915432991935, 0.015591915432991935, 0.015591915432993745, 0.015591915432989526, 0.045666713637162945, 0.045666713637161016, 0.045666713637162945, 0.045666713637162945, 0.045666713637163306, 0.07574151184133202, 0.07574151184133021, 0.07574151184133021, 0.07574151184133021, 0.07574151184133202, 0.1058163100454994, 0.1058163100454994, 0.10581631004550159, 0.10581631004550122, 0.10581631004550122, 0.1358911082496703, 0.13589110824966838, 0.13589110824966644, 0.1358911082496708, 0.13589110824966838, 0.16596590645383769, 0.16596590645383938, 0.16596590645383769, 0.16596590645383769, 0.16596590645383938, 0.19604070465800905, 0.19604070465800869, 0.19604070465800869, 0.19604070465800905, 0.19604070465800666, 0.2261155028621756, 0.2261155028621756, 0.22611550286217755, 0.22611550286217755, 0.22611550286217755, 0.25619030106634494, 0.2561903010663473, 0.2561903010663469, 0.25619030106634494, 0.2561903010663469, 0.28626509927051375, 0.2862650992705164, 0.28626509927051375, 0.28626509927051375, 0.28626509927051375, 0.3163398974746831, 0.3163398974746831, 0.316339897474685, 0.3163398974746855, 0.3163398974746831, 0.34641469567885214, 0.34641469567885214, 0.3464146956788546, 0.3464146956788546, 0.3464146956788541, 0.37648949388302316, 0.3764894938830212, 0.3764894938830212, 0.3764894938830239, 0.3764894938830239, 0.4065642920871903, 0.4065642920871903, 0.4065642920871903, 0.40656429208719225, 0.40656429208719297, 0.4366390902913596, 0.4366390902913596, 0.43663909029136183, 0.43663909029136183, 0.43663909029136183, -0.43553005762954344, -0.43553005762954344, -0.4054552594253743, -0.4054552594253743, -0.345305663017036, -0.3753804612212051, -0.3753804612212051, -0.345305663017036, -0.31523086481286683, -0.31523086481286683, -0.28515606660869774, -0.28515606660869774, -0.25508126840452866, -0.25508126840452866, -0.22500647020035924, -0.22500647020035924, -0.1949316719961903, -0.1949316719961903, -0.16485687379202096, -0.13478207558785202, -0.13478207558785202, -0.16485687379202096, -0.10470727738368281, -0.10470727738368281, -0.07463247917951374, -0.07463247917951374, -0.04455768097534441, -0.04455768097534441, -0.014482882771175334, -0.014482882771175334, 0.015591915432993745, 0.015591915432993745, 0.045666713637162945, 0.045666713637162945, 0.07574151184133202, 0.07574151184133202, 0.10581631004550122, 0.10581631004550122, 0.1358911082496703, 0.1358911082496703, 0.16596590645383985, 0.16596590645383938, 0.19604070465800905, 0.19604070465800869, 0.22611550286217802, 0.22611550286217755, 0.2561903010663473, 0.2561903010663469, 0.2862650992705164, 0.2862650992705164, 0.3163398974746855, 0.3464146956788546, 0.3464146956788541, 0.3163398974746855, 0.3764894938830239, 0.3764894938830239, 0.40656429208719297, 0.40656429208719297, 0.43663909029136205, 0.43663909029136205],
    x2: [-0.00001985584269739049, -0.00001985584269739049],
    x3: [-0.25713074101659733, 0.2642279382128468],
    x4: [-0.41691687598528954, 0.41636162203332855, -0.41691687598528954, 0.41636162203332855],
    x5: [-0.02462889408867556, -0.02462889408867556],
    x6: [0.49552323581957114, 0.49552323581957114],
    x7: [-0.006054565323046129, -0.006054565323046129],
    x8: [-0.33484580542016396, 0.33651173164350273],
    x9: [-0.11004099709771833, 0.03633374543587863, -0.03685362583092005],
    x10: [-0.003282747751095225],
    x11: [-0.28908020553172925, 0.2894548827056025],
    x12: [-0.4265972385709647, -0.3048621568840238, -0.18312707519708282, -0.061391993510142094, 0.060343088176798856, 0.1820781698637398, 0.3038132515506805, 0.4255483332376215, -0.4265972385709647, -0.3048621568840238, -0.18312707519708282, -0.061391993510142094, 0.060343088176798856, 0.1820781698637398, 0.3038132515506805, 0.4255483332376215],
    x13: [0.00043320237511288405, 0.00043320237511288405],
    x14: [-0.0026060143739623674, -0.0026060143739623674],
    x15: [-0.02598548814835974, -0.2552613032988832, -0.22903990128971882, -0.20704323085755588, -0.18250771201751456, -0.15797219317747266, -0.1351292399426843, -0.11144000390526866, -0.08775076786785282, 0.11614992807612638, 0.42410999656252885, 0.4477992325999449, -0.1918101404102825, -0.2789833375797429, -0.0022962521109586888, 0.021392983926457148, 0.04508221996387198, 0.06877145600128733, 0.3293530524128675, 0.09246069203871116, 0.13983916411354302, 0.21090687222579002, 0.187217636188375, 0.23459610826320507, 0.2582853443006207, 0.28197458033803546, 0.30566381637545126, 0.35304228845028257, -0.16812090437285207, -0.14443166833543622, -0.12074243229802138, -0.09705319626060575, -0.07336396022319061, -0.04967472418577577, -0.02598548814835974, 0.021392983926464642, 0.06877145600129492, 0.04508221996388008, 0.09246069203871154, 0.11614992807612678, 0.13983916411354322, 0.16352840015095765, 0.1872176361883752, 0.23459610826320568, 0.2582853443006215, 0.28197458033803585, 0.3056638163754517, 0.3293530524128675, 0.35304228845028257, 0.37673152448769937, 0.40042076052511344, 0.42410999656252985, 0.4477992325999453, 0.4477992325999453, 0.42410999656252985, 0.42410999656252985, 0.4477992325999453, 0.42410999656252285, 0.4477992325999381, 0.4477992325999381, 0.42410999656252285, 0.42410999656252285, 0.4477992325999381, 0.4477992325999381, 0.42410999656252285, 0.42410999656252285, 0.4477992325999381, 0.4477992325999381, 0.42410999656252285, 0.42410999656252285, 0.4477992325999381, 0.4477992325999381, 0.42410999656252285, 0.42410999656252285, 0.4477992325999381, 0.4477992325999381, 0.42410999656252285, 0.42410999656252285, 0.4477992325999381, 0.4477992325999381, 0.42410999656252285, 0.42410999656252285, 0.4477992325999381, 0.42410999656252246, 0.4477992325999369, -0.06282283489971752],
    x16: [-0.3812102027544783, -0.33082420792379524, 0.2738077300444212, -0.381210202754469, -0.28043821309310124, -0.23005221826241715, -0.33082420792378514, -0.28043821309310124, -0.17966622343173333, -0.23005221826241715, -0.17966622343173333, -0.12928022860104948, -0.12928022860104948, -0.07889423377036565, -0.02850823893968182, 0.021877755891002017, 0.07226375072168585, 0.12264974555236968, 0.17303574038305353, 0.22342173521373734, -0.07889423377036565, -0.02850823893968182, 0.021877755891002017, 0.07226375072168585, 0.12264974555236968, 0.17303574038305353, 0.22342173521373734, 0.2738077300444212, 0.32419372487510545, 0.37457971970578885, 0.4249657145364728, 0.37457971970578885, 0.32419372487510545, 0.4249657145364728],
    x17: [-0.3353424203600527, 0.3906588098742318, 0.4632589328976631, -0.2627422973366244, -0.19014217431319694, -0.1175420512897685, -0.3353424203600527, -0.2627422973366244, -0.19014217431319694, -0.04494192826634062, 0.027658194757087057, 0.10025831778051532, 0.1728584408039432, 0.24545856382737125, 0.3180586868507995, -0.1175420512897685, -0.04494192826634062, 0.027658194757087057, 0.10025831778051532, 0.1728584408039432, 0.24545856382737125, 0.3180586868507995, 0.3906588098742274, 0.46325893289765546],
    x18: [-0.36309589092281475, -0.36309589092281475, -0.30879043918680493, -0.25448498745079423, -0.20017953571478384, -0.1458740839787734, -0.09156863224276242, -0.037263180506751266, 0.017042271229258995, 0.0713477229652697, 0.12565317470128085, 0.17995862643729083, 0.23426407817330153, 0.28856952990931206, 0.34287498164532276, 0.39718043338133424, 0.39718043338133424, -0.30879043918680493, -0.25448498745079423, -0.20017953571478384, -0.1458740839787734, -0.09156863224276242, -0.037263180506751266, 0.017042271229258995, 0.0713477229652697, 0.12565317470128085, 0.17995862643729083, 0.23426407817330153, 0.28856952990931206, 0.34287498164532276],
    x19: [-0.2260912022563598, 0.22785329178666386, 0.34774731695634875, 0.4291533285853066, 0.4528765644996553, 0.4301329531555218, 0.3497065660967791, 0.22785329178666386, -0.3482877410958964, -0.42735288035982555, -0.4564786601501534, -0.42833250493004077, -0.34247006972580774, -0.22643942787727464],
    x20: [-0.45226135531566963, -0.14730945826955144, 0.15764243877656678, 0.46259433582268455],
    x21: [0.0324225193646796, 0.14411907235980556, 0.2558156253549315],
    x22: [-0.41364316979422733, -0.32899707584044696, -0.41364316979422733, -0.41364316979422733, -0.32899707584044696, -0.32899707584044696, -0.4136431697942063, -0.3289970758404271],
    x23: [-0.07449568983677538, -0.02490571406950914, 0.024684261697757087, 0.07427423746502332],
    x24: [-0.05224943682833422, 0.05455614918879511],
    x25: [-0.05826347770038855, -0.0004161094192336923, 0.057431258861921165],
    x26: [-0.411514123757181, 0.006053431328736376, 0.423620986414653],
    x27: [-0.3297147524876264, 0.00013717992731768295, 0.32998911234226175],
    x28: [0.4985704754596618, 0.4985704754596618, 0.4985704754596618, 0.4985704754596618],
    x29: [0.4997496161776881, 0.4997496161776881, 0.4997496161776881, 0.4997496161776881],
    x30: [-0.4974781359547788, 0.5004700171332438],
    x31: [-0.13863482750762376, -0.0447464070521597, 0.04914201340329864, 0.1430304338587629],
    x32: [-0.28942886248366373, -0.19882895759693578, -0.10822905271020754, -0.01762914782347794, 0.07297075706325151, 0.16357066194997902, 0.2541705668367074],
    x33: [-0.4992291344495405, -0.4992291344495405, -0.4992291344495405, -0.4992291344495405],
    x34: [-0.43277281867408224, -0.43277281867408224, -0.43277281867408224, 0.43703968730123627, 0.43703968730123566, 0.4370396873012304, 0.4370396873012304, 0.4370396873012304, 0.43703968730123566, 0.43703968730123566, 0.43703968730123566, 0.43703968730123566, 0.4370396873012236, 0.437039687301231, 0.437039687301231, -0.4327728186740424, -0.4327728186740424, -0.4327728186740424, -0.4327728186740424, -0.4327728186740424, -0.4327728186740424, -0.4327728186740424, -0.4327728186740424, -0.4327728186740424, -1.3067682130501903],
    x35: [-0.16898223467576715, 0.16954687474916863],
    x36: [-0.10414849928958492, 0.1036213062129172],
    x37: [-0.14558515446669837, -0.02931021671424917, 0.027503247012651326, -0.08989360534402087, 0.08696472103823623, 0.14521365179333626],
    x38: [-0.49488911301793953, -0.49488911301793953, -0.4948891130179401, -0.49488911301793953, -0.49488911301793953],
    x39: [-0.07683685862694926, 0.07723414765915756],
    x40: [-0.23591300013348127, -0.14151537115854845, -0.04711774218361539, 0.04727988679131743, 0.14167751576625048, 0.23607514474118332],
    x41: [-0.2919001767385683, -0.2132629530841657],
    x42: [-0.19889389437584654, 0.20336742429750831],
    x43: [-0.20582304505523624, -0.000185741749582157, 0.20545156155607192],
    x44: [-0.2237743416364035, 0.21754974242532113],
    x45: [-0.3998886494258509, -0.3998886494258509, -0.3998886494258509, 0.39938852653483536, 0.39938852653483536, 0.39938852653483536],
    x46: [-0.4811067569480075, -0.48110675694804844, -0.48110675694804844, 0.4798798833807109, 0.4798798833807109, 0.4798798833807109],
    x47: [-0.0007653160890589677, -0.0007653160890589677],
    x48: [-0.048900714104488686, 0.04714957520762518],
    x49: [-0.015694649059141565, 0.016237143426105907],

};

let wiringYPoints = {
    y0: [-0.4445729874223717, 0.43182761693507016, -0.4445729874223537, 0.4318276169350643, 0.4318276169350643, 0.43182761693507016, 0.43182761693507016, 0.43182761693507016, -0.444572987422368, -0.444572987422368, -0.4445729874223717, -0.444572987422368, -0.444572987422368, -0.444572987422368, -0.444572987422368, -0.444572987422368, -0.44502297685843273, -0.44502297685843273, -0.44502297685843273, -0.44502297685843273, -0.44502297685843273, -0.44502297685843273, -0.44502297685843273, -0.44502297685843273, 0.43182761693507016, 0.43182761693507016, 0.43182761693507016, 0.43182761693507016, 0.43182761693507016, 0.43182761693507016, 0.43182761693507016, 0.43182761693507016],
    y1: [-0.43585246460459726, -0.43585246460459726, -0.4358524646045939, -0.4358524646045939, -0.4358524646045926, -0.4358524646045926, -0.4358524646045939, -0.4358524646045926, -0.43585246460459726, -0.4358524646045939, -0.4358524646045926, -0.4358524646045926, -0.4358524646045926, -0.4358524646045926, -0.4358524646045926, -0.4358524646045926, -0.4358524646045926, -0.4358524646045926, -0.4358524646045926, -0.4358524646045926, -0.4358524646045939, -0.4358524646045926, -0.4358524646045926, -0.4358524646045926, -0.4358524646045926, -0.4358524646045926, -0.4358524646045926, -0.4358524646045926, -0.4358524646045926, -0.4358524646045926, -0.3900958073368223, -0.39009580733682575, -0.39009580733682575, -0.3900958073368223, -0.39009580733682103, -0.3900958073368223, -0.39009580733682103, -0.3900958073368223, -0.3900958073368223, -0.39009580733682103, -0.39009580733682575, -0.39009580733682103, -0.3900958073368223, -0.39009580733682103, -0.39009580733682103, -0.39009580733682103, -0.39009580733682103, -0.39009580733682575, -0.39009580733682103, -0.39009580733682103, -0.39009580733682103, -0.39009580733682103, -0.39009580733682103, -0.39009580733682103, -0.39009580733682103, -0.39009580733682103, -0.39009580733682103, -0.39009580733682103, -0.39009580733682103, -0.39009580733682103, -0.2528258355335071, -0.20706917826573656, -0.16131252099796384, -0.11555586373019824, -0.06979920646242654, -0.2528258355335106, -0.20706917826573554, -0.16131252099797017, -0.11555586373019824, -0.06979920646242035, -0.2528258355335106, -0.20706917826573554, -0.16131252099796495, -0.11555586373019824, -0.06979920646242654, -0.2528258355335071, -0.20706917826573656, -0.16131252099796384, -0.11555586373019824, -0.06979920646242654, -0.2528258355335106, -0.20706917826573554, -0.16131252099796728, -0.1155558637301922, -0.06979920646242654, -0.2528258355335071, -0.20706917826573656, -0.16131252099796495, -0.11555586373019852, -0.06979920646242035, -0.2528258355335071, -0.20706917826573892, -0.16131252099796384, -0.11555586373019568, -0.06979920646242035, -0.2528258355335071, -0.20706917826574156, -0.16131252099796384, -0.06979920646242145, -0.11555586373019329, -0.2528258355335071, -0.20706917826573554, -0.16131252099796384, -0.1155558637301922, -0.06979920646242035, -0.2528258355335106, -0.20706917826573892, -0.16131252099796728, -0.1155558637301922, -0.06979920646242374, -0.2528258355335106, -0.20706917826573554, -0.16131252099796728, -0.11555586373019329, -0.06979920646242035, -0.2528258355335071, -0.20706917826573892, -0.16131252099796384, -0.11555586373019329, -0.06979920646242035, -0.2528258355335106, -0.20706917826573892, -0.16131252099796728, -0.11555586373019568, -0.06979920646242035, -0.2528258355335106, -0.20706917826573892, -0.16131252099796384, -0.1155558637301922, -0.06979920646242035, -0.2528258355335106, -0.20706917826573892, -0.16131252099796384, -0.1155558637301922, -0.06979920646242374, -0.2528258355335106, -0.20706917826573554, -0.16131252099796728, -0.1155558637301922, -0.06979920646242374, -0.2528258355335071, -0.20706917826573892, -0.16131252099796728, -0.11555586373019824, -0.06979920646242374, -0.2528258355335071, -0.20706917826573892, -0.16131252099796384, -0.11555586373019568, -0.06979920646242145, -0.2528258355335106, -0.20706917826573892, -0.16131252099796384, -0.1155558637301922, -0.06979920646242374, -0.2528258355335071, -0.20706917826573892, -0.16131252099796728, -0.11555586373019568, -0.06979920646242035, -0.2528258355335106, -0.20706917826573892, -0.16131252099796384, -0.11555586373019568, -0.06979920646242374, -0.2528258355335071, -0.20706917826573554, -0.16131252099796728, -0.11555586373019568, -0.06979920646242035, -0.2528258355335106, -0.20706917826573892, -0.16131252099796384, -0.1155558637301922, -0.06979920646242374, -0.2528258355335106, -0.20706917826573892, -0.16131252099796728, -0.11555586373019568, -0.06979920646242035, -0.2528258355335106, -0.20706917826573892, -0.16131252099796728, -0.1155558637301922, -0.06979920646242035, -0.2528258355335106, -0.20706917826573892, -0.16131252099796384, -0.1155558637301922, -0.06979920646242035, -0.2528258355335071, -0.20706917826573892, -0.16131252099796728, -0.11555586373019568, -0.06979920646242035, -0.2528258355335106, -0.20706917826573892, -0.16131252099796728, -0.1155558637301922, -0.06979920646242035, -0.2528258355335106, -0.20706917826573892, -0.16131252099796728, -0.1155558637301922, -0.06979920646242035, -0.2528258355335106, -0.20706917826573892, -0.16131252099796728, -0.11555586373019568, -0.06979920646242374, 0.06747076534088856, 0.11322742260866002, 0.15898407987643506, 0.20474073714420343, 0.25049739441197505, 0.06747076534089341, 0.11322742260866002, 0.15898407987643196, 0.20474073714420343, 0.25049739441197827, 0.06747076534089341, 0.11322742260866002, 0.15898407987643196, 0.20474073714420343, 0.2504973944119801, 0.06747076534088856, 0.11322742260866002, 0.1589840798764368, 0.20474073714420343, 0.25049739441197505, 0.06747076534088856, 0.11322742260866507, 0.15898407987643196, 0.20474073714420343, 0.25049739441197505, 0.06747076534088856, 0.11322742260866002, 0.1589840798764368, 0.20474073714420343, 0.25049739441197505, 0.06747076534089341, 0.11322742260866002, 0.15898407987643196, 0.20474073714420857, 0.25049739441197505, 0.06747076534088856, 0.11322742260865974, 0.15898407987643196, 0.20474073714420343, 0.2504973944119801, 0.06747076534088856, 0.11322742260866002, 0.15898407987643196, 0.20474073714420343, 0.25049739441197505, 0.06747076534088818, 0.11322742260866626, 0.15898407987643196, 0.20474073714420343, 0.2504973944119801, 0.06747076534088856, 0.11322742260866626, 0.15898407987643196, 0.25049739441197505, 0.20474073714420343, 0.06747076534088856, 0.11322742260866002, 0.15898407987643196, 0.20474073714420857, 0.25049739441197505, 0.0674707653408946, 0.11322742260866002, 0.15898407987643196, 0.20474073714420343, 0.25049739441197477, 0.0674707653408946, 0.11322742260866626, 0.15898407987643148, 0.20474073714420343, 0.25049739441197505, 0.0674707653408946, 0.11322742260865974, 0.15898407987643196, 0.20474073714420343, 0.25049739441197477, 0.06747076534088856, 0.11322742260866626, 0.15898407987643792, 0.20474073714420343, 0.2504973944119801, 0.06747076534088856, 0.11322742260866626, 0.15898407987643196, 0.20474073714420343, 0.25049739441197477, 0.06747076534088856, 0.11322742260866626, 0.15898407987643792, 0.20474073714420957, 0.25049739441197505, 0.0674707653408946, 0.11322742260866626, 0.15898407987643148, 0.20474073714420343, 0.25049739441197505, 0.06747076534088856, 0.11322742260866626, 0.1589840798764368, 0.20474073714420304, 0.2504973944119812, 0.0674707653408946, 0.11322742260866002, 0.15898407987643792, 0.20474073714420957, 0.25049739441197505, 0.06747076534088818, 0.11322742260866002, 0.15898407987643196, 0.20474073714420304, 0.2504973944119812, 0.0674707653408946, 0.11322742260866626, 0.15898407987643196, 0.20474073714420343, 0.25049739441197505, 0.0674707653408946, 0.11322742260865974, 0.15898407987643196, 0.20474073714420957, 0.25049739441197505, 0.0674707653408946, 0.11322742260865974, 0.15898407987643792, 0.20474073714420957, 0.2504973944119812, 0.0674707653408946, 0.11322742260866626, 0.20474073714420343, 0.15898407987643148, 0.2504973944119812, 0.0674707653408946, 0.11322742260866626, 0.15898407987643148, 0.20474073714420304, 0.25049739441197505, 0.06747076534088856, 0.11322742260866626, 0.15898407987643792, 0.20474073714420304, 0.25049739441197477, 0.0674707653408946, 0.11322742260866626, 0.15898407987643792, 0.20474073714420343, 0.25049739441197477, 0.0674707653408946, 0.11322742260866626, 0.15898407987643196, 0.20474073714420343, 0.25049739441197505, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.3877673662152903, 0.4335240234830617, 0.38776736621528995, 0.4335240234830617, 0.38776736621528995, 0.4335240234830617, 0.38776736621528995, 0.4335240234830617, 0.38776736621528995, 0.4335240234830617, 0.38776736621528995, 0.4335240234830615, 0.38776736621528995, 0.4335240234830615, 0.3877673662152903, 0.4335240234830615, 0.38776736621528995, 0.4335240234830615, 0.38776736621528995, 0.4335240234830615, 0.38776736621528995, 0.4335240234830615],
    y2: [-0.44933822152103914, 0.4140512583532616],
    y3: [0.2926591734669553, 0.5127606278424598],
    y4: [-0.4996025474369343, -0.4996025474369343, 0.4871746212693234, 0.4871746212693234],
    y5: [-0.5008893804902528, 0.4981170475513312],
    y6: [-0.07616666559703317, 0.07372120753169188],
    y7: [-0.5012625505784923, 0.5035819806018437],
    y8: [0.25018101283374106, 0.49644316616713885],
    y9: [-0.36854733799743455, -0.36854733799743455, -0.36854733799743455],
    y10: [0.0017178177834557525],
    y11: [0.4956809951072103, 0.4956809951072103],
    y12: [-0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697],
    y13: [-0.6336156284237829, 0.618109193444901],
    y14: [-0.7638951348074525, 0.7502819379080748],
    y15: [-0.4474208596207195, -0.4474208596207195, -0.4474208596207195, -0.4474208596207195, -0.4474208596207195, -0.4474208596207195, -0.4474208596207195, -0.4474208596207195, -0.4474208596207151, -0.4474208596207151, -0.44742085962071393, -0.44742085962071393, 0.40209710821110806, -0.44742085962071065, -0.44742085962071065, -0.44742085962071065, -0.44742085962071065, -0.44742085962071065, -0.4474208596207151, -0.4474208596207151, -0.4474208596207151, -0.4474208596207151, -0.4474208596207151, -0.4474208596207151, -0.4474208596207151, -0.4474208596207151, -0.4474208596207151, -0.4474208596207151, 0.4020971082111001, 0.4020971082111001, 0.4020971082111001, 0.4020971082111001, 0.4020971082111001, 0.4020971082111001, 0.4020971082111001, 0.40209710821111144, 0.40209710821111144, 0.40209710821111144, 0.40209710821111144, 0.40209710821111144, 0.40209710821111144, 0.40209710821111144, 0.40209710821111144, 0.40209710821111144, 0.40209710821111144, 0.40209710821111144, 0.40209710821111144, 0.40209710821111144, 0.40209710821111144, 0.40209710821111144, 0.40209710821111144, 0.3126741642288136, 0.3126741642288136, 0.2679626922376667, 0.2679626922376667, 0.22325122024651764, 0.22325122024651764, 0.17853974825536137, 0.17853974825536137, 0.13382827626421312, 0.13382827626421312, 0.08911680427306486, 0.08911680427306486, 0.044405332281915566, 0.044405332281915566, -0.00030613970923240856, -0.00030613970923240856, -0.045017611700381134, -0.045017611700381134, -0.08972908369152977, -0.08972908369152977, -0.13444055568267801, -0.13444055568267801, -0.17915202767382563, -0.17915202767382563, -0.22386349966497368, -0.22386349966497368, -0.2685749716561222, -0.2685749716561222, -0.31328644364727004, -0.31328644364727004, -0.357997915638419, -0.357997915638419, -0.40270938762956454, -0.40270938762956454, -0.4474208596207151],
    y16: [-0.4288992177715712, -0.4288992177715712, -0.42889921777155554, 0.4315385401062758, -0.42889921777155554, -0.42889921777155554, 0.4315385401062758, 0.4315385401062758, -0.42889921777155554, 0.4315385401062758, 0.4315385401062758, 0.4315385401062758, -0.42889921777155554, -0.42889921777155554, -0.42889921777155554, -0.42889921777155554, -0.42889921777155554, -0.42889921777155554, -0.42889921777155554, -0.42889921777155554, 0.4315385401062758, 0.4315385401062758, 0.4315385401062758, 0.4315385401062758, 0.4315385401062758, 0.4315385401062758, 0.4315385401062758, 0.4315385401062758, 0.4315385401062758, 0.4315385401062758, 0.4315385401062758, -0.42889921777155554, -0.42889921777155554, -0.42889921777155554],
    y17: [-0.42830637797406274, -0.4283063779740646, -0.42830637797405235, -0.42830637797406274, -0.42830637797406274, -0.42830637797406274, 0.42564358392526674, 0.42564358392526674, 0.42564358392526674, -0.42830637797406274, -0.42830637797406274, -0.42830637797406274, -0.42830637797406274, -0.42830637797406274, -0.42830637797406274, 0.42564358392526674, 0.42564358392526674, 0.42564358392526674, 0.42564358392526674, 0.42564358392526674, 0.42564358392526674, 0.42564358392526674, 0.42564358392526674, 0.42564358392526674],
    y18: [0.4068974540165188, -0.4076843220236405, -0.4076843220236405, -0.4076843220236405, -0.4076843220236405, -0.4076843220236405, -0.4076843220236405, -0.4076843220236405, -0.4076843220236405, -0.4076843220236405, -0.4076843220236405, -0.4076843220236405, -0.4076843220236405, -0.4076843220236405, -0.4076843220236405, -0.4076843220236405, 0.4068974540165188, 0.4068974540165188, 0.4068974540165188, 0.4068974540165188, 0.4068974540165188, 0.4068974540165188, 0.4068974540165188, 0.4068974540165188, 0.4068974540165188, 0.4068974540165188, 0.4068974540165188, 0.4068974540165188, 0.4068974540165188, 0.4068974540165188],
    y19: [-0.3951466325379341, 0.3936245944772217, 0.2911646730599088, 0.15440097163588754, -0.002193757186519534, -0.15679349730162326, -0.2934144796766195, -0.3951466325379341, -0.2924328919309129, -0.15679349730162326, -0.002193757186519534, 0.1560471704551244, 0.29480586058644664, 0.3926430067315151],
    y20: [0.4912533151881678, 0.4912533151881678, 0.4912533151881678, 0.4912533151881678],
    y21: [0.5025266418092283, 0.5025266418092283, 0.5025266418092283],
    y22: [-0.336987461914186, -0.336987461914186, -0.03948133757664016, -0.18823439974541314, -0.18823439974541314, -0.03948133757664016, 0.10927172459220066, 0.10927172459220066],
    y23: [0.4210415452711405, 0.4210415452711405, 0.4210415452711405, 0.4210415452711405],
    y24: [0.4482725878627099, 0.4482725878627099],
    y25: [0.41728048922878286, 0.41728048922878286, 0.41728048922878286],
    y26: [0.497018747825306, 0.497018747825306, 0.497018747825306],
    y27: [0.48937116850865736, 0.48937116850865736, 0.48937116850865736],
    y28: [-0.24321931719596104, -0.08387841495672171, 0.07546248728251762, 0.23480338952175694],
    y29: [0.27480374240640054, 0.0931480043418076, -0.08850773372278528, -0.2701634717873782],
    y30: [-0.010013315445377736, -0.010013315445377736],
    y31: [-0.4407054007305456, -0.4407054007305456, -0.4407054007305456, -0.4407054007305456],
    y32: [-0.4423734150592768, -0.4423734150592768, -0.4423734150592768, -0.4423734150592768, -0.44360069372652544, -0.4423734150592768, -0.4423734150592768],
    y33: [-0.32650620160540383, -0.2551052305229663, -0.1837042594405288, -0.11230328835809125],
    y34: [-0.461792391524817, -0.37869782238696303, -0.29560325324911085, 0.45224786899163283, 0.2860587307159139, -0.46179239152476903, -0.37869782238691535, -0.29560325324906195, 0.3691532998537676, 0.20296416157806033, 0.11986959244020683, 0.03677502330235322, -0.04631954583549568, -0.12941411497335265, -0.21250868411120616, -0.21250868411120616, -0.12941411497335265, -0.04631954583549905, 0.036775023302354465, 0.11986959244020798, 0.2029641615780615, 0.286058730715915, 0.3691532998537689, 0.4522478689916224, -0.5581126263833195],
    y35: [0.49877718128334403, 0.49877718128334403],
    y36: [0.49974862949105897, 0.49974862949105897],
    y37: [0.45654356803979634, 0.45654356803979634, 0.45654356803979634, 0.45654356803979634, 0.4565435680397323, 0.45654356803979634],
    y38: [-0.1227499139897371, -0.06108216884295189, 0.0005855763038032807, 0.06225332145061806, 0.12392106659740329],
    y39: [0.49829121457517556, 0.49829121457517556],
    y40: [0.436417024575174, 0.436417024575174, 0.436417024575174, 0.436417024575174, 0.436417024575174, 0.436417024575174],
    y41: [0.49926408692078345, 0.49926408692078345],
    y42: [0.49911647143345345, 0.49911647143345345],
    y43: [0.49485992640128945, 0.49485992640128945, 0.49485992640128945],
    y44: [0.48799174409407564, 0.48799174409407564],
    y45: [-0.2517250477748368, -0.0016340920830922529, 0.24845686360865193, -0.2517250477749341, -0.00163409208319045, 0.24845686360855324],
    y46: [-0.2534839194529619, 0.0033529080021853794, 0.2601897354573633, -0.2534839194529265, 0.002779184634732914, 0.25904228872239227],
    y47: [-0.49529398479747266, 0.4967962283964071],
    y48: [-0.49952094172670014, -0.49952094172670014],
    y49: [-0.49829929808022605, -0.49829929808022605],

};

let objectsData = [
    "Arduino Uno", "Microcontrollers", 1.0314452510656404, 32, 1418.4,                      //0
    "Breadboard", "Electrical", 0.930840742046, 420, 827.4,                                 //1
    "Resistor", "Electrical", 0.6286216172399489, 2, 1418.4,                                //2
    "LED", "Modules", 0.66280184339, 2, 1418.4,                                             //3
    "Button", "Electrical", 0.8960589628, 4, 1418.4,                                       //4
    "Diode", "Electrical", 0.5630794172983389, 2, 1418.4,                                   //5
    "Battery", "Other", 0.8291107459089542, 2, 1418.4,                                      //6
    "Toggle Switch", "Electrical", 0.86996931995, 2, 1418.4,                                //7
    "Capacitor", "Electrical", 0.6959117149009196, 2, 1414.46,                              //8
    "Servo Motor", "Modules", 0.6376327754216928, 3, 1418.4,                                //9
    "Single Point", "Other", 0.022, 1, 1418.4,                                              //10
    "Piezo Buzzer", "Modules", 0.6453080218, 2, 1418.4,                                     //11
    "IC Chip", "Microcontrollers", 0.5990144, 16, 1418.4,                                   //12
    "Large Text", "Other", 0.8719942676674203, 2, 1418.4,                                   //13
    "Small Text", "Other", 0.7396757091238941, 2, 1418.4,                                   //14
    "Arduino Mega", "Microcontrollers", 0.844265301271, 86, 1418.4,                         //15
    "Arduino Micro", "Microcontrollers", 1.01038177534, 34, 1418.4,                         //16
    "Arduino Pro Micro", "Microcontrollers", 0.9739249434088939, 24, 1418.4,                //17
    "Arduino Nano", "Microcontrollers", 0.937458197688, 30, 1418.4,                         //18
    "Adafruit Circuit Playground", "Microcontrollers", 0.7401785998271294, 14, 1418.4,      //19
    "4 Pin LED", "Modules", 0.918177596900323, 4, 1418.4,                                   //20
    "Relay", "Modules", 0.835597257305, 3, 1418.4,                                          //21
    "nRF24L01", "Modules", 0.735086751386, 8, 1418.4,                                       //22
    "Ultrasonic Distance", "Modules", 0.6006704698213494, 4, 1418.4,                        //23
    "Force Pressure", "Modules", 0.749024493786, 2, 1418.4,                                 //24
    "PIR Motion", "Modules", 1.0211653825062605, 3, 1418.4,                                 //25
    "Transistor", "Electrical", 0.8214818882830167, 3, 1418.4,                              //26
    "Transistor", "Electrical", 0.8412417971761024, 3, 1418.4,                              //27
    "USB", "Other", 0.9222677749062851, 4, 1418.4,                                          //28
    "Micro USB", "Other", 0.9285404391421072, 4, 1418.4,                                    //29
    "Inductor", "Electrical", 0.779376939948, 2, 1418.4,                                    //30
    "OLED Display", "Modules", 0.852075257118, 4, 1418.4,                                   //31
    "RGB OLED Display", "Modules", 1.044091544167301, 7, 1418.4,                            //32
    "I2C 16x2 LCD Display", "Modules", 0.985688064188, 4, 1418.4,                                       //33
    "I2C Multiplexer", "Modules", 0.965725365213, 25, 1418.4,                               //34
    "Haptic Vibration", "Modules", 0.689256335236, 2, 1418.4,                               //35
    "DC Motor", "Modules", 0.668148765786, 2, 1418.4,                                       //36
    "Stepper Motor", "Modules", 0.860030561469, 6, 1418.4,                                  //37
    "Stepper Motor", "Modules", 1.1824117533907919, 5, 1418.4,                              //38
    "Solenoid", "Modules", 0.826065398938, 2, 1418.4,                                       //39
    "BNO055 9-Axis", "Modules", 0.741541438935, 6, 1418.4,                                  //40
    "Power Plug", "Other", 0.5314410000000003, 2, 1418.4,                                   //41
    "Flex Sensor", "Modules", 1.0236249094005352, 2, 1418.4,                                //42
    "Potentiometer", "Electrical", 0.680810328425, 3, 1418.4,                               //43
    "Photoresistor", "Modules", 0.528711986859, 2, 1418.4,                                  //44
    "Single Neopixel", "Modules", 0.778481158898, 6, 1418.4,                                //45
    "Neopixel Strip", "Modules", 0.7284180347819951, 6, 1418.4,                             //46
    "Coin Battery", "Other", 0.7662774750873609, 2, 1418.4,                                 //47
    "Large Battery", "Other", 1.1850160892438533, 2, 1418.4,                                //48
    "Solar Cell", "Other", 1.1447376410536698, 2, 1418.4,                                   //49

];

////    ////


////  Warning: Crazy Code Below!!  ////

//Noting objects for use with Auto Color (objectID, numberOfPowerPoints)
var powerObjects = [
    0, 2,
    1, 60,
    3, 1,
    5, 1,
    6, 1,
    8, 1,
    9, 1,
    11, 1,
    15, 2,
    16, 3,
    17, 1,
    18, 3,
    19, 1,
    21, 1,
    22, 1,
    23, 1,
    25, 1,
    28, 1,
    29, 1,
    31, 1,
    32, 1,
    33, 1,
    34, 1,
    35, 1,
    36, 1,
    39, 1,
    40, 2,
    41, 1,
    45, 2,
    46, 2,
    47, 1,
    48, 1,
    49, 1,
];

//Noting objects for use with Auto Color (objectID, numberOfGroundPoints)
var groundObjects = [
    0, 3,
    1, 60,
    3, 1,
    5, 1,
    6, 1,
    8, 1,
    9, 1,
    11, 1,
    15, 3,
    16, 2,
    17, 3,
    18, 2,
    19, 3,
    21, 1,
    22, 1,
    23, 1,
    25, 1,
    28, 1,
    29, 1,
    31, 1,
    32, 1,
    33, 1,
    34, 1,
    35, 1,
    36, 1,
    39, 1,
    40, 1,
    41, 1,
    45, 2,
    46, 2,
    47, 1,
    48, 1,
    49, 1,
];

//Noting wiring points that wires should be red with Auto Color (p[objectID]: [wiringPointID])
var powerPins = {
    p0: [27, 28],
    p1: [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419],
    p3: [1],
    p5: [1],
    p6: [1],
    p8: [1],
    p9: [2],
    p11: [0],
    p15: [30, 31],
    p16: [6, 25, 28],
    p17: [5],
    p18: [16, 17, 27],
    p19: [7],
    p21: [1],
    p22: [1],
    p23: [0],
    p25: [0],
    p28: [3],
    p29: [0],
    p31: [0],
    p32: [1],
    p33: [1],
    p34: [0],
    p35: [1],
    p36: [1],
    p39: [1],
    p40: [0, 1],
    p41: [1],
    p45: [0, 3],
    p46: [0, 3],
    p47: [0],
    p48: [0],
    p49: [1],

};

//Noting wiring points that wires should be black with Auto Color (p[objectID]: [wiringPointID])
var gndPins = {
    g0: [10, 29, 30],
    g1: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418],
    g3: [0],
    g5: [0],
    g6: [0],
    g8: [0],
    g9: [0],
    g11: [1],
    g15: [3, 32, 33],
    g16: [18, 27],
    g17: [3, 8, 15],
    g18: [12, 29],
    g19: [0, 13, 4],
    g21: [2],
    g22: [0],
    g23: [3],
    g25: [2],
    g28: [0],
    g29: [3],
    g31: [1],
    g32: [0],
    g33: [0],
    g34: [1],
    g35: [0],
    g36: [0],
    g39: [0],
    g40: [2],
    g41: [0],
    g45: [1, 4],
    g46: [1, 4],
    g47: [1],
    g48: [1],
    g49: [0],

};

//Assign objects with attached label (objectID, defaultLabel, fontSize, textLength, rotateWithObject, forEachAngle[relativePositionX, relativePositionY], defaultColor)
var defaultLabel = [
    4, "1", 0.05, 1, false, 0, 0, 0, 0, 0, 0, 0, 0, 0xffffff,
    5, "1N1418", 0.03, 6, false, 0.04, 0, 0, 0.04, -0.04, 0, 0, -0.04, 0x000000,
    6, "AA", 0.08, 10, true, -0.065, 0, 0, -0.065, 0.065, 0, 0, 0.065, 0x000000,
    8, "1uF", 0.04, 4, false, 0.06, 0, 0, 0.09, -0.06, 0, 0, -0.09, 0x000000,
    12, "4N35", 0.04, 5, true, 0, 0, 0, 0, 0, 0, 0, 0, 0xffffff,
    13, "Heading", 0.15, 17, true, 0, 0, 0, 0, 0, 0, 0, 0, 0x000000,
    14, "Label", 0.035, 9, true, 0, 0, 0, 0, 0, 0, 0, 0, 0x000000,
    26, "2SA1943", 0.025, 5, true, 0, -0.01, 0.01, 0, 0, 0.01, -0.01, 0, 0xffffff,
    27, "TIP120", 0.028, 6, true, 0, 0.01, -0.01, 0, 0, -0.01, 0.01, 0, 0xffffff,
    30, "10uH", 0.028, 8, false, 0, -0.045, 0.045, 0, 0, 0.045, -0.045, 0, 0x000000,
    41, "5V 1A", 0.08, 7, false, -0.04, -0.3, 0.11, -0.13, 0.04, 0.3, -0.11, 0.13, 0xffffff,
    48, "9V", 0.15, 4, true, 0, 0.2, -0.1, 0, 0, -0.2, 0.1, 0, 0xffffff,

];

//Relative X positions of wiring points for each button variation (pin[numberOfPins]: [xPosition])
var buttonxPoints = {
    pin2: [-0.41691687598528954, 0.41636162203332855],
    pin4: [-0.41691687598528954, 0.41636162203332855, -0.41691687598528954, 0.41636162203332855],
}

//Relative Y positions of wiring points for each button variation (pin[numberOfPins]: [yPosition])
var buttonyPoints = {
    pin2: [0.4871746212693234, 0.4871746212693234],
    pin4: [-0.4996025474369343, -0.4996025474369343, 0.4871746212693234, 0.4871746212693234],
}

//Relative X positions of wiring points for each IC Chip variation (pin[numberOfPins]: [xPosition])
var ICxPoints = {
    pin4: [-0.061391993510142094, 0.060343088176798856, -0.061391993510142094, 0.060343088176798856],
    pin6: [-0.122, 0, 0.122, -0.122, 0, 0.122],
    pin8: [-0.18312707519708282, -0.061391993510142094, 0.060343088176798856, 0.1820781698637398, -0.18312707519708282, -0.061391993510142094, 0.060343088176798856, 0.1820781698637398],
    pin10: [-0.244, -0.122, 0, 0.122, 0.244, -0.244, -0.122, 0, 0.122, 0.244],
    pin12: [-0.3048621568840238, -0.18312707519708282, -0.061391993510142094, 0.060343088176798856, 0.1820781698637398, 0.3038132515506805, -0.3048621568840238, -0.18312707519708282, -0.061391993510142094, 0.060343088176798856, 0.1820781698637398, 0.3038132515506805],
    pin14: [-0.366, -0.244, -0.122, 0, 0.122, 0.244, 0.366, -0.366, -0.244, -0.122, 0, 0.122, 0.244, 0.366],
    pin16: [-0.4265972385709647, -0.3048621568840238, -0.18312707519708282, -0.061391993510142094, 0.060343088176798856, 0.1820781698637398, 0.3038132515506805, 0.4255483332376215, -0.4265972385709647, -0.3048621568840238, -0.18312707519708282, -0.061391993510142094, 0.060343088176798856, 0.1820781698637398, 0.3038132515506805, 0.4255483332376215],

};

//Relative Y positions of wiring points for each IC Chip variation (pin[numberOfPins]: [yPosition])
var ICyPoints = {
    pin4: [-0.4736769194750314, -0.4736769194750314, 0.46119210552622697, 0.46119210552622697],
    pin6: [-0.4736769194750314, -0.4736769194750314, -0.4736769194750314, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697],
    pin8: [-0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697],
    pin10: [-0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697],
    pin12: [-0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697],
    pin14: [-0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697],
    pin16: [-0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, -0.4736769194750314, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697, 0.46119210552622697],

};

var objectLabelData = [];

var itemTypes = ["All", "Microcontrollers", "Electrical", "Modules", "Other"];
var objectID = 0;
var itemObjectID = [];
var currentItemType = 0;
var currentPage = 0;

var snapStartX = -10010;
var snapStartY = -10006;
var grid;
var gridColor = 0xdddddd;
var labelColor = 0x000000;
var scaleCount = 1;

var activeWire = false;
var activeWireXY = [];
var boxMode = false;
var selectedMode = false;

var down = false;
var up = true;
var del = -1;
var delCount = 0;

var nodeLinks = [];
var wireColor = 0xED4040;
var wireGroup = 0;
var lineWidth;
var wireClick = 0;
var clickTime = 0;

var rotateAngle = [];
var settings = [];
var shiftObjects = [];
var startingX = [];
var startingY = [];
var endingX = [];
var endingY = [];
var lastX = 0;
var lastY = 0;
var autoSave = false;
var autoSaved = autoFrequency;

var dragPositionWires = [];
var dragPositionNodes = [];
var createObjects = [];
var createWires = [];

var panelType = 0;
var paletteColors = [0xED4040, 0xED9B40, 0xEDDD2D, 0x4FBA52, 0x45B5C4, 0x406EED, 0x9067B6, 0xE0607E, 0xAE7636, 0x3B3B3B];
var lastClicked = -1;
var lastWire = -1;
var customColors = [];
var customObjectColors = [0xff0000, 0xffff00, 0x00ff00, 0x0000ff, 0xffffff];
var resistorData = [];
var resistorColors = [
    0xBF9A30,
    0x3B3B3B,
    0xAE7636,
    0xED4040,
    0xED9B40,
    0xEDDD2D,
    0x4FBA52,
    0x406EED,
    0x9067B6,
    0x999999,
    0xFFFFFF
];

class Workspace extends SimpleScene {

    constructor() {
        super("Workspace");
    }

    init() { }

    preload() {
        this.load.imageset("binhandlearrow", "assets/binhandlearrow.png", 560, 981);
        this.load.image("increasescale", "assets/increasescale.png");
        this.load.image("decreasescale", "assets/decreasescale.png");
        this.load.image("grid", "assets/grid.jpeg");
        this.load.image("magnet", "assets/magnet.png");
        this.load.image("slash", "assets/slash.png");
        this.load.image("arrow", "assets/arrow.png");
        this.load.image("rotate", "assets/rotate.png");
        this.load.image("swap", "assets/swap.png");
        this.load.image("x", "assets/x.png");
        this.load.image("duplicate", "assets/duplicate.png");
        this.load.image("trash", "assets/trash.png");
        this.load.image("edit", "assets/edit.png");
        this.load.image("add", "assets/add.png");
        this.load.image("addnode", "assets/addnode.png");
        this.load.image("forward", "assets/forward.png");
        this.load.image("backward", "assets/backward.png");
        this.load.image("help", "assets/help.png");
        this.load.image("info", "assets/info.png");
        this.load.image("saved", "assets/saved.png");
        this.load.image("editpop", "assets/editpop.png");
        this.load.image("undo", "assets/undo.png");
        this.load.image("search", "assets/search.png");
        this.load.image("exit", "assets/exit.png");
        this.load.image("dark", "assets/dark.png");
        this.load.image("import", "assets/import.png");
        this.load.image("pen", "assets/pen.png");
        this.load.image("select", "assets/select.png");
        this.load.image("home", "assets/home.png");
        this.load.image("wand", "assets/wand.png");
        this.load.imageset("checkbox", "assets/checkbox.png", 96, 96);

        objectID = 0;
        for (var i = 0; i < objectsData.length / 5; i++) {
            if (objectID != 2 && objectID != 4 && objectID != 12) {
                this.load.image(`${objectID}`, `workspace-objects/${objectID}.png`);
            }
            objectID++;
        }

        this.load.imageset("2", "workspace-objects/2.png", 100, 212);
        this.load.imageset("4", "workspace-objects/4.png", 75, 95);
        this.load.imageset("12", "workspace-objects/12.png", 384, 150);
    }

    create() {

        this.tooltip = this.add.rectangle(0, 0, 0, deviceWidth * 0.015, 0x000000);
        this.tooltiptext = this.add.text(0, 0, "", 0xffffff);
        this.tooltiptext.setOrigin(0.5, 0.5);
        this.tooltiptext.setFontSize(deviceWidth * 0.01);
        this.tooltip.setDepth(10);
        this.tooltiptext.setDepth(10);

        undo.splice(0, undo.length);
        redo.splice(0, redo.length);
        resistorData.splice(0, resistorData.length)
        rotateAngle.splice(0, rotateAngle.length);
        settings.splice(0, settings.length);
        itemObjectID.splice(0, itemObjectID.length);
        objectID = 0;

        closing = false;
        opening = false;
        lastPosition = [];
        snapStartX = -10010;
        snapStartY = -10006;
        scaleCount = 1;
        lastX = 0;
        lastY = 0;
        panelType = 0;
        itemBinOpen = true;
        currentItemType = 0;
        currentPage = 0;

        this.clearHTML();

        //Create 3 additional sets of wiring point X and Y relative position data for each object angle
        for (var i = 0; i < objectsData.length / 5; i++) {
            for (var v = 0; v < 3; v++) {
                for (var t = 0; t < objectsData[(i * 5) + 3]; t++) {
                    wiringXPoints["x" + i].push(0 - wiringYPoints["y" + i][t + (v * objectsData[(i * 5) + 3])]);
                    wiringYPoints["y" + i].push(wiringXPoints["x" + i][t + (v * objectsData[(i * 5) + 3])]);
                }
            }
        }

        //Do the same for the button for each variation
        for (var i = 0; i < 2; i++) {
            for (var t = 0; t < (i + 1) * 2; t++) {
                buttonxPoints["pin" + (i + 1) * 2].push(0 - buttonyPoints["pin" + (i + 1) * 2][t]);
                buttonyPoints["pin" + (i + 1) * 2].push(0 - buttonxPoints["pin" + (i + 1) * 2][t]);
            }
            for (var t = 0; t < (i + 1) * 2; t++) {
                buttonxPoints["pin" + (i + 1) * 2].push(buttonyPoints["pin" + (i + 1) * 2][t + ((i + 1) * 2)]);
                buttonyPoints["pin" + (i + 1) * 2].push(buttonxPoints["pin" + (i + 1) * 2][t + ((i + 1) * 2)]);
            }
            for (var t = 0; t < (i + 1) * 2; t++) {
                buttonxPoints["pin" + (i + 1) * 2].push(0 - buttonyPoints["pin" + (i + 1) * 2][t + (2 * ((i + 1) * 2))]);
                buttonyPoints["pin" + (i + 1) * 2].push(0 - buttonxPoints["pin" + (i + 1) * 2][t + (2 * ((i + 1) * 2))]);
            }
        }

        //Do the same for the IC Chip for each variation
        for (var i = 0; i < 7; i++) {
            for (var v = 0; v < 3; v++) {
                for (var t = 0; t < (i + 2) * 2; t++) {
                    ICxPoints["pin" + (i + 2) * 2].push(0 - ICyPoints["pin" + (i + 2) * 2][t + (v * ((i + 2) * 2))]);
                    ICyPoints["pin" + (i + 2) * 2].push(0 - ICxPoints["pin" + (i + 2) * 2][t + (v * ((i + 2) * 2))]);
                }
            }
        }

        this.title = this.add.text(deviceWidth / 2, deviceHeight * 0.045, "WORKSPACE", 0x999999);
        this.title.setOrigin(0.5, 0);
        this.title.setFontSize(deviceHeight * 0.075);
        this.title.setDepth(1);

        this.instructions = this.add.text(deviceWidth / 2, deviceHeight * 0.15, "Create a wiring diagram here.", labelColor);
        this.instructions.setOrigin(0.5, 0);
        this.instructions.setFontSize(deviceHeight * 0.03);
        this.instructions.setDepth(1);

        if (gridColor == 0xdddddd) {
            this.itemBin = this.add.rectangle(deviceWidth * 0.1, deviceHeight * 0.22, deviceWidth * 0.22, deviceHeight * 2, 0xdddddd);
            this.binHandle = this.add.circle(deviceWidth * 0.21, deviceHeight / 2, deviceWidth * 0.02, 0xdddddd);
            this.binHandleArrow = this.add.sprite(deviceWidth * 0.215, deviceHeight / 2, "binhandlearrow", 0);
        } else {
            this.itemBin = this.add.rectangle(deviceWidth * 0.1, deviceHeight * 0.22, deviceWidth * 0.22, deviceHeight * 2, 0x333333);
            this.binHandle = this.add.circle(deviceWidth * 0.21, deviceHeight / 2, deviceWidth * 0.02, 0x333333);
            this.binHandleArrow = this.add.sprite(deviceWidth * 0.215, deviceHeight / 2, "binhandlearrow", 1);
        }
        this.itemBin.setDepth(5);
        this.itemBin.enableClick();

        this.binHandleArrow.setScale(deviceWidth * 0.00002);
        this.binHandleArrow.setAngle(180);
        this.binHandleArrow.enableClick();
        this.binHandleArrow.setDepth(5);

        this.binHandle.enableClick();
        this.binHandle.setDepth(5);

        this.binLabel = this.add.text(deviceWidth * 0.02, deviceHeight * 0.03, "All", 0x999999);
        this.binLabel.setFontSize(deviceHeight * 0.045);
        this.binLabel.setDepth(5);
        this.binLabelDivider = this.add.line(deviceWidth * 0.015, deviceHeight * 0.09, deviceWidth * 0.2, deviceHeight * 0.09, 5, 0xdddddd);
        this.binLabelDivider.setDepth(5);

        if (gridColor == 0xdddddd) {
            this.lastPageButton = this.add.rectangle(deviceWidth * 0.053, deviceHeight * 0.97, deviceWidth * 0.105, deviceWidth * 0.03, 0xffffff);
            this.nextPageButton = this.add.rectangle(deviceWidth * 0.157, deviceHeight * 0.97, deviceWidth * 0.105, deviceWidth * 0.03, 0xffffff);
            this.lastPageArrow = this.add.sprite(deviceWidth * 0.053, deviceHeight * 0.97, "binhandlearrow", 0);
            this.nextPageArrow = this.add.sprite(deviceWidth * 0.157, deviceHeight * 0.97, "binhandlearrow", 0);
        } else {
            this.lastPageButton = this.add.rectangle(deviceWidth * 0.053, deviceHeight * 0.97, deviceWidth * 0.105, deviceWidth * 0.03, 0x000000);
            this.nextPageButton = this.add.rectangle(deviceWidth * 0.157, deviceHeight * 0.97, deviceWidth * 0.105, deviceWidth * 0.03, 0x000000);
            this.lastPageArrow = this.add.sprite(deviceWidth * 0.053, deviceHeight * 0.97, "binhandlearrow", 1);
            this.nextPageArrow = this.add.sprite(deviceWidth * 0.157, deviceHeight * 0.97, "binhandlearrow", 1);
        }
        this.lastPageButton.setAlpha(0.3);
        this.lastPageButton.enableClick();
        this.lastPageButton.setDepth(5);

        this.lastPageArrow.setScale(deviceWidth * 0.00003);
        this.lastPageArrow.setAngle(-90);
        this.lastPageArrow.enableClick();
        this.lastPageArrow.setDepth(5);

        this.nextPageButton.setAlpha(0.3);
        this.nextPageButton.enableClick();
        this.nextPageButton.setDepth(5);

        this.nextPageArrow.setScale(deviceWidth * 0.00003);
        this.nextPageArrow.setAngle(90);
        this.nextPageArrow.enableClick();
        this.nextPageArrow.setDepth(5);

        this.addItem = this.add.sprite(deviceWidth * 0.115, deviceHeight * 0.05, "add");
        this.addItem.setScale(deviceWidth * 0.00035);
        this.addItem.enableClick();
        this.addItem.setDepth(5);

        this.search = this.add.sprite(deviceWidth * 0.15, deviceHeight * 0.05, "search");
        this.search.setScale(deviceWidth * 0.00028);
        this.search.enableClick();
        this.search.setDepth(5);

        this.itemTypeArrow = this.add.sprite(deviceWidth * 0.185, deviceHeight * 0.05, "swap");
        this.itemTypeArrow.setScale(deviceWidth * 0.0005);
        this.itemTypeArrow.enableClick();
        this.itemTypeArrow.setDepth(5);

        this.exit = this.add.sprite(deviceWidth * 0.18, deviceHeight * 0.05, "exit");
        this.exit.setScale(deviceWidth * 0.0003);
        this.exit.enableClick();
        this.exit.setDepth(5);
        this.exit.setVisible(0);

        objectID = 0;
        this.items = [];
        this.itemLabels = [];
        this.itemResistorBars = [];
        this.labelItemText = [];
        this.labelItemText[0] = this.add.text(0, 0, "", 0x000000);
        this.labelItemText[1] = this.add.text(0, 0, "", 0x000000);
        this.itemButtons = [];

        //Create the parts panel on the left
        var v = 0;
        for (var i = 0; i < objectsData.length / 5; i++) { //Each part own 5 pieces of data  in this array
            if (v < 8) { //Display 8 objects at once in the panel
                if (objectID != 10) { //Exclude the white point object for Pen Mode use only
                    var obj;
                    var label;
                    var button;
                    if (i % 2 == 0) { //If even, place object on the left
                        obj = this.add.sprite(deviceWidth * 0.05, (Math.floor(i / 2) * deviceHeight * 0.2) + deviceHeight * 0.17, `${objectID}`, 1);
                        label = this.add.text(deviceWidth * 0.05, (Math.floor(i / 2) * deviceHeight * 0.2) + deviceHeight * 0.26, objectsData[i * 5], labelColor);
                        button = this.add.rectangle(deviceWidth * 0.05, (Math.floor(i / 2) * deviceHeight * 0.2) + deviceHeight * 0.2, deviceWidth * 0.08, deviceHeight * 0.17, 0xffffff);
                    }
                    if (i % 2 == 1) { //If odd, place object on the right
                        obj = this.add.sprite(deviceWidth * 0.15, (Math.floor(i / 2) * deviceHeight * 0.2) + deviceHeight * 0.17, `${objectID}`, 1);
                        label = this.add.text(deviceWidth * 0.15, (Math.floor(i / 2) * deviceHeight * 0.2) + deviceHeight * 0.26, objectsData[i * 5], labelColor);
                        button = this.add.rectangle(deviceWidth * 0.15, (Math.floor(i / 2) * deviceHeight * 0.2) + deviceHeight * 0.2, deviceWidth * 0.08, deviceHeight * 0.17, 0xffffff);
                    }
                    obj.scale *= (objectsData[(i * 5) + 2]);
                    obj.width *= (objectsData[(i * 5) + 2]);
                    obj.height *= (objectsData[(i * 5) + 2])
                    while (obj.width < deviceWidth * 0.03 && obj.height < deviceHeight * 0.08) {
                        obj.width *= 1.1;
                        obj.scale *= 1.1;
                        obj.height *= 1.1;
                    }
                    while (obj.width > deviceWidth * 0.08 || obj.height > deviceHeight * 0.12) {
                        obj.width *= 0.9;
                        obj.scale *= 0.9;
                        obj.height *= 0.9;
                    }
                    obj.setDepth(6);
                    this.items.push(obj);
                    itemObjectID.push(objectID);

                    button.setAlpha(0.01);
                    button.setDepth(7);
                    button.enableClick();
                    this.itemButtons.push(button);

                    //Generate colored bars if it is a resistor
                    if (objectID == 2) {
                        this.itemResistorBars[0] = this.add.rectangle(obj.x, obj.y + obj.height * 0.052, obj.width * 0.3, obj.height * 0.055, 0x3b3b3b);
                        this.itemResistorBars[1] = this.add.rectangle(obj.x, obj.y - obj.height * 0.057, obj.width * 0.3, obj.height * 0.055, 0xed9c40);
                        this.itemResistorBars[0].setOrigin(0.5, 0.5);
                        this.itemResistorBars[1].setOrigin(0.5, 0.5);
                        this.itemResistorBars[0].setDepth(6);
                        this.itemResistorBars[1].setDepth(6);
                    }

                    //Generate text if it is a label
                    if (objectID == 13) {
                        this.labelItemText[0] = this.add.text(obj.x, obj.y, "Heading", 0xff0000);
                        this.labelItemText[0].setFontSize(deviceHeight * 0.025);
                        this.labelItemText[0].setDepth(6);
                        this.labelItemText[0].setOrigin(0.5, 0.5);
                    }
                    if (objectID == 14) {
                        this.labelItemText[1] = this.add.text(obj.x, obj.y, "Label", 0x0000ff);
                        this.labelItemText[1].setFontSize(deviceHeight * 0.03);
                        this.labelItemText[1].setDepth(6);
                        this.labelItemText[1].setOrigin(0.5, 0.5);
                    }
                    if (label.text.length > 15) {
                        label.setFontSize(15 / label.text.length * deviceHeight * 0.025);
                    } else {
                        label.setFontSize(deviceHeight * 0.025);
                    }
                    label.setOrigin(0.5, 0.5);
                    label.setDepth(6);
                    this.itemLabels.push(label);
                    v++;
                }
                objectID++;
            }
        }

        this.objects = [];
        var object = this.objects;
        this.objectIDs = [];
        this.objectLabels = [];
        this.resistorBars = [];

        this.wires = [];
        this.wireLines = [];
        lineWidth = 8 * scaleCount;
        this.activeWire = this.add.line(0, 0, 0, 0, 0xED4040);
        this.activeWire.setLineWidth(3.8 * scaleCount);

        this.nodes = [];
        var nodes = this.nodes;

        this.leftarrow = this.add.key("LEFT");
        this.rightarrow = this.add.key("RIGHT");
        this.uparrow = this.add.key("UP");
        this.downarrow = this.add.key("DOWN")
        this.shift = this.add.key("SHIFT");
        this.space = this.add.key("SPACE");
        this.del = this.add.key("BACKSPACE");
        this.esc = this.add.key("ESC");
        this.return = this.add.key("ENTER");
        this.s = this.add.key("S");
        this.w = this.add.key("w");
        this.d = this.add.key("D");
        this.z = this.add.key("Z");
        this.x = this.add.key("X");
        this.c = this.add.key("C");
        this.a = this.add.key("A");

        this.key0 = this.add.key("ZERO");
        this.key1 = this.add.key("ONE");
        this.key2 = this.add.key("TWO");
        this.key3 = this.add.key("THREE");
        this.key4 = this.add.key("FOUR");
        this.key5 = this.add.key("FIVE");
        this.key6 = this.add.key("SIX");
        this.key7 = this.add.key("SEVEN");
        this.key8 = this.add.key("EIGHT");
        this.key9 = this.add.key("NINE");

        this.increaseScaleButton = this.add.circle(deviceWidth * 0.83, deviceHeight * 0.94, deviceWidth * 0.02, 0xF4F5F6);
        this.increaseScaleButton.enableClick();
        this.increaseScaleButton.setAlpha(0.01);
        this.increaseScaleButton.setDepth(5);

        this.decreaseScaleButton = this.add.circle(deviceWidth * 0.785, deviceHeight * 0.94, deviceWidth * 0.02, 0xF4F5F6);
        this.decreaseScaleButton.enableClick();
        this.decreaseScaleButton.setAlpha(0.01);
        this.decreaseScaleButton.setDepth(5);

        this.increaseScale = this.add.sprite(deviceWidth * 0.83, deviceHeight * 0.94, "increasescale");
        this.increaseScale.setScale(deviceWidth * 0.000035);
        this.increaseScale.enableClick();
        this.increaseScale.setDepth(5);

        this.decreaseScale = this.add.sprite(deviceWidth * 0.785, deviceHeight * 0.94, "decreasescale");
        this.decreaseScale.setScale(deviceWidth * 0.000035);
        this.decreaseScale.enableClick();
        this.decreaseScale.setDepth(5);

        this.saveButton = this.add.rectangle(deviceWidth * 0.9, deviceHeight * 0.94, deviceWidth * 0.07, deviceHeight * 0.075, 0x4FBA52);
        this.saveButton.enableClick();
        this.saveButton.setDepth(5);

        this.save = this.add.text(deviceWidth * 0.9, deviceHeight * 0.94, "Save");
        this.save.setOrigin(0.5, 0.5);
        this.save.setFontSize(deviceHeight * 0.03);
        this.save.enableClick();
        this.save.setDepth(5);

        this.saved = this.add.sprite(deviceWidth * 0.9, deviceHeight * 0.94, "saved");
        this.saved.setScale(deviceWidth * 0.0004);
        this.saved.setVisible(0);
        this.saved.setDepth(5);

        this.import = this.add.sprite(deviceWidth * 0.965, deviceHeight * 0.94, "import");
        this.import.setScale(deviceWidth * 0.00035)
        this.import.enableClick();
        this.import.setDepth(5);

        this.help = this.add.sprite(deviceWidth * 0.965, deviceHeight * 0.06, "help");
        this.help.setScale(deviceWidth * 0.0004);
        this.help.enableClick();
        this.help.setDepth(5);

        this.help2 = this.add.sprite(deviceWidth * 0.965, deviceHeight * 0.06, "help");
        this.help2.setScale(deviceWidth * 0.0004);
        this.help2.enableClick();
        this.help2.setDepth(5);
        this.help2.setVisible(0);

        this.home = this.add.sprite(deviceWidth * 0.92, deviceHeight * 0.06, "home");
        this.home.setScale(deviceWidth * 0.00011);
        this.home.enableClick();
        this.home.setDepth(5);
        this.home.setVisible(0);

        this.increaseScaleButton2 = this.add.circle(deviceWidth * 0.875, deviceHeight * 0.06, deviceWidth * 0.02, 0xF4F5F6);
        this.increaseScaleButton2.enableClick();
        this.increaseScaleButton2.setAlpha(0.01);
        this.increaseScaleButton2.setDepth(5);
        this.increaseScaleButton2.setVisible(0);

        this.decreaseScaleButton2 = this.add.circle(deviceWidth * 0.835, deviceHeight * 0.06, deviceWidth * 0.02, 0xF4F5F6);
        this.decreaseScaleButton2.enableClick();
        this.decreaseScaleButton2.setAlpha(0.01);
        this.decreaseScaleButton2.setDepth(5);
        this.decreaseScaleButton2.setVisible(0);

        this.increaseScale2 = this.add.sprite(deviceWidth * 0.875, deviceHeight * 0.06, "increasescale");
        this.increaseScale2.setScale(deviceWidth * 0.00003);
        this.increaseScale2.enableClick();
        this.increaseScale2.setDepth(5);
        this.increaseScale2.setVisible(0);

        this.decreaseScale2 = this.add.sprite(deviceWidth * 0.835, deviceHeight * 0.06, "decreasescale");
        this.decreaseScale2.setScale(deviceWidth * 0.00003);
        this.decreaseScale2.enableClick();
        this.decreaseScale2.setDepth(5);
        this.decreaseScale2.setVisible(0);

        this.dark = this.add.sprite(deviceWidth * 0.92, deviceHeight * 0.06, "dark");
        this.dark.setScale(deviceWidth * 0.00035);
        this.dark.enableClick();
        this.dark.setDepth(5);

        this.pen = this.add.sprite(deviceWidth * 0.83, deviceHeight * 0.06, "pen");
        this.pen.setScale(deviceWidth * 0.0004);
        this.pen.enableClick();
        this.pen.setDepth(5);

        this.penSlash = this.add.sprite(deviceWidth * 0.83, deviceHeight * 0.06, "slash");
        this.penSlash.flipX = true;
        this.penSlash.setScale(deviceWidth * 0.0003);
        this.penSlash.enableClick();
        this.penSlash.setDepth(5);

        this.wand = this.add.sprite(deviceWidth * 0.785, deviceHeight * 0.06, "wand");
        this.wand.setScale(deviceWidth * 0.0004);
        this.wand.enableClick();
        this.wand.setDepth(5);

        this.select = this.add.sprite(deviceWidth * 0.875, deviceHeight * 0.06, "select");
        this.select.setScale(deviceWidth * 0.0004);
        this.select.enableClick();
        this.select.setDepth(5);

        this.selectBox = this.add.rectangle(deviceWidth * 0.5, deviceHeight * 0.5, 0, 0, 0x0000ff);
        this.selectBox.setOrigin(0, 0);
        this.selectBox.setAlpha(0.1);
        this.selectBox.setDepth(10);

        this.magnet = this.add.sprite(deviceWidth * 0.735, deviceHeight * 0.945, "magnet");
        this.magnet.setScale(deviceWidth * 0.0005);
        this.magnet.enableClick();
        this.magnet.setDepth(5);

        this.slash = this.add.sprite(deviceWidth * 0.735, deviceHeight * 0.95, "slash");
        this.slash.setScale(deviceWidth * 0.0004);
        this.slash.enableClick();
        this.slash.setVisible(0);
        this.slash.setDepth(5);

        if (gridColor == 0xdddddd) {
            this.floor = this.add.rectangle(deviceWidth / 2, deviceHeight / 2, deviceWidth, deviceHeight, 0xF4F5F6);
        } else {
            this.floor = this.add.rectangle(deviceWidth / 2, deviceHeight / 2, deviceWidth, deviceHeight, 0x040506);
        }
        this.floor.setDepth(0);
        this.floor.enableClick();

        this.grid = this.add.gridLayout(snapStartX, snapStartY, 100000, 100000, 28 * scaleCount, 28 * scaleCount);
        this.grid.setOutlineStyle(gridColor, 1)
        this.grid.setDepth(0);
        this.grid.enableClick();
        grid = this.grid;

        this.redo = this.add.sprite(deviceWidth * 0.685, deviceHeight * 0.945, "undo");
        this.redo.setScale(deviceWidth * 0.0005);
        this.redo.flipX = true;
        this.redo.setDepth(5);
        this.redo.enableClick();

        this.undo = this.add.sprite(deviceWidth * 0.635, deviceHeight * 0.945, "undo");
        this.undo.setScale(deviceWidth * 0.0005);
        this.undo.setDepth(5);
        this.undo.enableClick();

        this.wiringPointer = this.add.circle(0, 0, 8 * scaleCount, 0xbbbbbb);
        this.wiringPointer.setDepth(5);

        //Move all objects, wires, and nodes along with the background grid when panned
        var pointer = this.input.activePointer;
        this.input.on('wheel', function (pointer, gameObjects, deltaX, deltaY) {

            grid.x -= deltaX * 0.2;
            grid.y -= deltaY * 0.2;
            snapStartX -= deltaX * 0.2;
            snapStartY -= deltaY * 0.2;

            for (var i = 0; i < object.length; i++) {
                object[i].x -= deltaX * 0.2;
                object[i].y -= deltaY * 0.2;
            }
            for (var i = 0; i < nodes.length; i++) {
                nodes[i].x -= deltaX * 0.2;
                nodes[i].y -= deltaY * 0.2;
            }

            lastPosition[1] -= deltaX * 0.2;
            lastPosition[2] -= deltaY * 0.2;

        });

        this.popupover = this.add.rectangle(deviceWidth / 2, deviceHeight / 2, deviceWidth, deviceHeight, 0xffffff);
        this.popupover.setAlpha(0.5);
        this.popupover.setDepth(8);
        this.popupover.setVisible(0);

        this.popup = this.add.rectangle(deviceWidth / 2, deviceHeight / 2, deviceWidth * 0.6, deviceHeight * 0.3, 0xcccccc);
        this.popup.setDepth(9);
        this.popup.setVisible(0);

        this.popuptext = this.add.text(deviceWidth / 2, deviceHeight * 0.45, "", 0x000000);
        this.popuptext.setOrigin(0.5, 0.5);
        this.popuptext.setFontSize(deviceHeight * 0.04);
        this.popuptext.setDepth(9);
        this.popuptext.setVisible(0);

        this.popupdone = this.add.rectangle(deviceWidth * 0.44, deviceHeight * 0.55, deviceWidth * 0.1, deviceHeight * 0.05, 0xaaaaaa);
        this.popupdone.width = deviceWidth * 0.1;
        this.popupdone.height = deviceHeight * 0.05;
        this.popupdone.enableClick();
        this.popupdone.setDepth(9);
        this.popupdone.setVisible(0);

        this.popupcreate = this.add.rectangle(deviceWidth * 0.56, deviceHeight * 0.55, deviceWidth * 0.1, deviceHeight * 0.05, 0x4FBA52);
        this.popupcreate.width = deviceWidth * 0.1;
        this.popupcreate.height = deviceHeight * 0.05;
        this.popupcreate.enableClick();
        this.popupcreate.setDepth(9);
        this.popupcreate.setVisible(0);

        this.popupdonetext = this.add.text(deviceWidth * 0.44, deviceHeight * 0.55, "Done", 0x000000);
        this.popupdonetext.setOrigin(0.5, 0.5);
        this.popupdonetext.setFontSize(deviceHeight * 0.03);
        this.popupdonetext.enableClick();
        this.popupdonetext.setDepth(10);
        this.popupdonetext.setVisible(0);

        this.popupcreatetext = this.add.text(deviceWidth * 0.56, deviceHeight * 0.55, "Create Image", 0x000000);
        this.popupcreatetext.setOrigin(0.5, 0.5);
        this.popupcreatetext.setFontSize(deviceHeight * 0.025);
        this.popupcreatetext.enableClick();
        this.popupcreatetext.setDepth(10);
        this.popupcreatetext.setVisible(0);

        this.popupcheckbox = this.add.sprite(deviceWidth * 0.71, deviceHeight * 0.61, "checkbox", 0);
        this.popupcheckbox.setScale(deviceWidth * 0.0002);
        this.popupcheckbox.setDepth(10);
        this.popupcheckbox.enableClick();
        this.popupcheckbox.setVisible(0);

        this.popupautoSave = this.add.text(deviceWidth * 0.725, deviceHeight * 0.61, "Autosave", 0x000000);
        this.popupautoSave.setOrigin(0, 0.5);
        this.popupautoSave.setFontSize(deviceHeight * 0.025);
        this.popupautoSave.enableClick();
        this.popupautoSave.setDepth(10);
        this.popupautoSave.setVisible(0);

        this.popupcandel = this.add.rectangle(deviceWidth * 0.44, deviceHeight * 0.55, deviceWidth * 0.1, deviceHeight * 0.05, 0xaaaaaa);
        this.popupcandel.widht = deviceWidth * 0.1;
        this.popupcandel.height = deviceHeight * 0.05;
        this.popupcandel.enableClick();
        this.popupcandel.setDepth(9);
        this.popupcandel.setVisible(0);

        this.popupdel = this.add.rectangle(deviceWidth * 0.56, deviceHeight * 0.55, deviceWidth * 0.1, deviceHeight * 0.05, 0xed4040);
        this.popupdel.widht = deviceWidth * 0.1;
        this.popupdel.height = deviceHeight * 0.05;
        this.popupdel.enableClick();
        this.popupdel.setDepth(9);
        this.popupdel.setVisible(0);

        this.popupcandeltext = this.add.text(deviceWidth * 0.44, deviceHeight * 0.55, "Cancel", 0x000000);
        this.popupcandeltext.setOrigin(0.5, 0.5);
        this.popupcandeltext.setFontSize(deviceHeight * 0.03);
        this.popupcandeltext.enableClick();
        this.popupcandeltext.setDepth(10);
        this.popupcandeltext.setVisible(0);

        this.popupdeltext = this.add.text(deviceWidth * 0.56, deviceHeight * 0.55, "Delete", 0x000000);
        this.popupdeltext.setOrigin(0.5, 0.5);
        this.popupdeltext.setFontSize(deviceHeight * 0.03);
        this.popupdeltext.enableClick();
        this.popupdeltext.setDepth(10);
        this.popupdeltext.setVisible(0);

        this.panel = this.add.rectangle(deviceWidth * 0.95, deviceHeight * 0.05, deviceWidth * 0.2, deviceHeight * 0.7, 0xDDDDDD);
        this.panel.setDepth(5);
        this.panel.setVisible(0);

        this.paneltext = this.add.text(deviceWidth * 0.865, deviceHeight * 0.04, "Wire", 0x000000);
        this.paneltext.setFontSize(deviceHeight * 0.03);
        this.paneltext.setOrigin(0, 0.5);
        this.paneltext.setDepth(5);
        this.paneltext.setVisible(0);

        this.panelDivider = this.add.line(deviceWidth * 0.86, deviceHeight * 0.07, deviceWidth * 0.99, deviceHeight * 0.07, 5, 0xdddddd);
        this.panelDivider.setDepth(5);
        this.panelDivider.setVisible(0);

        this.panelSelectLabel = this.add.text(deviceWidth * 0.925, deviceHeight * 0.19, "Color", 0x000000);
        this.panelSelectLabel.setFontSize(deviceHeight * 0.025);
        this.panelSelectLabel.setOrigin(0.5, 0.5);
        this.panelSelectLabel.setDepth(5);
        this.panelSelectLabel.setVisible(0);

        this.panelSelectLabel2 = this.add.text(deviceWidth * 0.925, deviceHeight * 0.38, "Custom Colors", 0x000000);
        this.panelSelectLabel2.setFontSize(deviceHeight * 0.025);
        this.panelSelectLabel2.setOrigin(0.5, 0.5);
        this.panelSelectLabel2.setDepth(5);
        this.panelSelectLabel2.setVisible(0);

        this.panelWireDeleteButton = this.add.rectangle(deviceWidth * 0.925, deviceHeight * 0.12, deviceWidth * 0.13, deviceHeight * 0.06, 0xED4040);
        this.panelWireDeleteButton.enableClick();
        this.panelWireDeleteButton.setDepth(5);
        this.panelWireDeleteButton.setVisible(0);

        this.panelWireDeleteIcon = this.add.sprite(deviceWidth * 0.885, deviceHeight * 0.12, "trash");
        this.panelWireDeleteIcon.setScale(deviceWidth * 0.0002);
        this.panelWireDeleteIcon.enableClick();
        this.panelWireDeleteIcon.setDepth(5);
        this.panelWireDeleteIcon.setVisible(0);

        this.panelWireDeleteText = this.add.text(deviceWidth * 0.9, deviceHeight * 0.12, "Delete Wire", 0xffffff);
        this.panelWireDeleteText.setOrigin(0, 0.5);
        this.panelWireDeleteText.enableClick();
        this.panelWireDeleteText.setDepth(5);
        this.panelWireDeleteText.setVisible(0);

        this.panelWireAddNodeButton = this.add.rectangle(deviceWidth * 0.925, deviceHeight * 0.19, deviceWidth * 0.13, deviceHeight * 0.06, 0x4FBA52);
        this.panelWireAddNodeButton.enableClick();
        this.panelWireAddNodeButton.setDepth(5);
        this.panelWireAddNodeButton.setVisible(0);

        this.panelWireAddNodeIcon = this.add.sprite(deviceWidth * 0.885, deviceHeight * 0.19, "addnode");
        this.panelWireAddNodeIcon.setScale(deviceWidth * 0.0002);
        this.panelWireAddNodeIcon.enableClick();
        this.panelWireAddNodeIcon.setDepth(5);
        this.panelWireAddNodeIcon.setVisible(0);

        this.panelWireAddNodeText = this.add.text(deviceWidth * 0.9, deviceHeight * 0.19, "Add Node", 0xffffff);
        this.panelWireAddNodeText.setOrigin(0, 0.5);
        this.panelWireAddNodeText.enableClick();
        this.panelWireAddNodeText.setDepth(5);
        this.panelWireAddNodeText.setVisible(0);

        this.panelDuplicateButton = this.add.rectangle(deviceWidth * 0.872, deviceHeight * 0.12, deviceWidth * 0.028, deviceWidth * 0.028, 0x999999);
        this.panelDuplicateButton.enableClick();
        this.panelDuplicateButton.setDepth(5);
        this.panelDuplicateButton.setVisible(0);

        this.panelDuplicate = this.add.sprite(deviceWidth * 0.872, deviceHeight * 0.12, "duplicate");
        this.panelDuplicate.setScale(deviceWidth * 0.0002);
        this.panelDuplicate.enableClick();
        this.panelDuplicate.setDepth(5);
        this.panelDuplicate.setVisible(0);

        this.panelDeleteButton = this.add.rectangle(deviceWidth * 0.907, deviceHeight * 0.12, deviceWidth * 0.028, deviceWidth * 0.028, 0xED4040);
        this.panelDeleteButton.enableClick();
        this.panelDeleteButton.setDepth(5);
        this.panelDeleteButton.setVisible(0);

        this.panelDelete = this.add.sprite(deviceWidth * 0.907, deviceHeight * 0.12, "trash");
        this.panelDelete.setScale(deviceWidth * 0.0002);
        this.panelDelete.enableClick();
        this.panelDelete.setDepth(5);
        this.panelDelete.setVisible(0);

        this.panelEditButton = this.add.rectangle(deviceWidth * 0.942, deviceHeight * 0.12, deviceWidth * 0.028, deviceWidth * 0.028, 0x000000);
        this.panelEditButton.enableClick();
        this.panelEditButton.setDepth(5);
        this.panelEditButton.setVisible(0);

        this.panelEdit = this.add.sprite(deviceWidth * 0.942, deviceHeight * 0.12, "edit");
        this.panelEdit.setScale(deviceWidth * 0.0002);
        this.panelEdit.enableClick();
        this.panelEdit.setDepth(5);
        this.panelEdit.setVisible(0);

        this.panelInfoButton = this.add.rectangle(deviceWidth * 0.977, deviceHeight * 0.12, deviceWidth * 0.028, deviceWidth * 0.028, 0x406EED);
        this.panelInfoButton.enableClick();
        this.panelInfoButton.setDepth(5);
        this.panelInfoButton.setVisible(0);

        this.panelInfo = this.add.sprite(deviceWidth * 0.977, deviceHeight * 0.12, "info");
        this.panelInfo.setScale(deviceWidth * 0.00018);
        this.panelInfo.enableClick();
        this.panelInfo.setDepth(5);
        this.panelInfo.setVisible(0);

        this.panelUpArrow = this.add.sprite(deviceWidth * 0.925, deviceHeight * 0.20, "arrow");
        this.panelUpArrow.setAngle(180);
        this.panelUpArrow.setScale(deviceWidth * 0.0003);
        this.panelUpArrow.enableClick();
        this.panelUpArrow.setDepth(5);
        this.panelUpArrow.setVisible(0);

        this.panelLeftArrow = this.add.sprite(deviceWidth * 0.87, deviceHeight * 0.27, "arrow");
        this.panelLeftArrow.setAngle(90);
        this.panelLeftArrow.setScale(deviceWidth * 0.0003);
        this.panelLeftArrow.enableClick();
        this.panelLeftArrow.setDepth(5);
        this.panelLeftArrow.setVisible(0);

        this.panelRightArrow = this.add.sprite(deviceWidth * 0.98, deviceHeight * 0.27, "arrow");
        this.panelRightArrow.setAngle(-90);
        this.panelRightArrow.setScale(deviceWidth * 0.0003);
        this.panelRightArrow.enableClick();
        this.panelRightArrow.setDepth(5);
        this.panelRightArrow.setVisible(0);

        this.panelDownArrow = this.add.sprite(deviceWidth * 0.925, deviceHeight * 0.34, "arrow");
        this.panelDownArrow.setScale(deviceWidth * 0.0003);
        this.panelDownArrow.enableClick();
        this.panelDownArrow.setDepth(5);
        this.panelDownArrow.setVisible(0);

        this.panelRotateLeft = this.add.sprite(deviceWidth * 0.906, deviceHeight * 0.27, "rotate");
        this.panelRotateLeft.setScale(deviceWidth * 0.00035);
        this.panelRotateLeft.enableClick();
        this.panelRotateLeft.setDepth(5);
        this.panelRotateLeft.setVisible(0);

        this.panelRotateRight = this.add.sprite(deviceWidth * 0.944, deviceHeight * 0.27, "rotate");
        this.panelRotateRight.flipX = true;
        this.panelRotateRight.setScale(deviceWidth * 0.00035);
        this.panelRotateRight.enableClick();
        this.panelRotateRight.setDepth(5);
        this.panelRotateRight.setVisible(0);

        this.panelBackward = this.add.sprite(deviceWidth * 0.88, deviceHeight * 0.35, "backward");
        this.panelBackward.setScale(deviceWidth * 0.0004);
        this.panelBackward.enableClick();
        this.panelBackward.setDepth(5);
        this.panelBackward.setVisible(0);

        this.panelForward = this.add.sprite(deviceWidth * 0.97, deviceHeight * 0.35, "forward");
        this.panelForward.setScale(deviceWidth * 0.0004);
        this.panelForward.enableClick();
        this.panelForward.setDepth(5);
        this.panelForward.setVisible(0);

        this.palette = [];
        this.customColors = [];
        this.closex = this.add.sprite(deviceWidth * 0.985, deviceHeight * 0.035, "x")
        this.closex.setScale(deviceWidth * 0.0002);
        this.closex.enableClick();
        this.closex.setDepth(5);
        this.closex.setVisible(0);

        this.selected = [];
        this.shiftSelect = [];

        this.customObjectColors = [];

        //Import wires if there is data pasted in the top
        if (wiresDataImport.length > 0) {
            scaleCount = objectsDataImport[0];
            lineWidth = 6 * scaleCount * scaleCount;
            customColors.splice(0, customColors.length);
            nodeLinks.splice(0, nodeLinks.length);
            for (var i = 0; i < wiresDataImport[0]; i++) {
                customColors.push(wiresDataImport[i + 1]);
            }
            if (wiresDataImport[0] == 0) {
                wiresDataImport[0] = 1;
            }
            for (var i = 0; i < wiresDataImport[2]; i++) {
                nodeLinks.push(wiresDataImport[i + wiresDataImport[0] + 2]);
            }
            wireGroup = nodeLinks[nodeLinks.length - 1] + 1;
            for (var i = 0; i < (wiresDataImport.length - (wiresDataImport[0] + wiresDataImport[2] + 2)) / 5; i++) {
                var wireColor;

                for (var v = 0; v < nodeLinks.length / 4; v++) {
                    if (this.wires.length == nodeLinks[v * 4] || ((nodeLinks[v * 4] == -2 || nodeLinks[v * 4] == -1) && this.wires.length == nodeLinks[(v * 4) + 2])) {
                        wireColor = nodesDataImport[(v * 4 + 3) + 2];
                    }
                }
                var obj = this.add.line(wiresDataImport[(i * 5) + (wiresDataImport[0] + wiresDataImport[2] + 2) + 1], wiresDataImport[(i * 5) + (wiresDataImport[0] + wiresDataImport[2] + 2) + 2], wiresDataImport[(i * 5) + (wiresDataImport[0] + wiresDataImport[2] + 2) + 3], wiresDataImport[(i * 5) + (wiresDataImport[0] + wiresDataImport[2] + 2) + 4], 0xffffff);
                obj.setLineWidth(1.805 * scaleCount);
                obj.setDepth(3.5);
                obj.setVisible(wiresDataImport[(i * 5) + (wiresDataImport[0] + wiresDataImport[2] + 2) + 0]);
                this.wireLines.push(obj);
                var obj2 = this.add.rectangle((obj.geom.x1 + obj.geom.x2) / 2, (obj.geom.y1 + obj.geom.y2) / 2, lineWidth, (Math.sqrt(Math.pow(Math.abs(obj.geom.x1 - obj.geom.x2), 2) + Math.pow(Math.abs(obj.geom.y1 - obj.geom.y2), 2))), wireColor);
                obj2.setAngle(-(Math.atan(Math.abs(obj.geom.x1 - obj.geom.x2) / Math.abs(obj.geom.y1 - obj.geom.y2))) * (180 / Math.PI));
                obj2.enableClick();
                obj2.setDepth(3.5);
                obj2.setVisible(wiresDataImport[(i * 5) + (wiresDataImport[0] + wiresDataImport[2] + 2) + 0]);
                this.wires.push(obj2);
            }
        }

        //Import nodes if there is data pasted in the top
        if (nodesDataImport.length > 0) {
            this.grid.scale = objectsDataImport[0];
            this.grid.x = nodesDataImport[0];
            snapStartX = nodesDataImport[0];
            this.grid.y = nodesDataImport[1];
            snapStartY = nodesDataImport[1];
            for (var i = 0; i < (nodesDataImport.length - 2) / 4; i++) {
                var node = this.add.circle(nodesDataImport[(i * 4 + 1) + 2], nodesDataImport[(i * 4 + 2) + 2], 3.8 * scaleCount * scaleCount, nodesDataImport[(i * 4 + 3) + 2]);
                node.scale *= scaleCount;
                node.setVisible(nodesDataImport[(i * 4 + 0) + 2]);
                node.setDepth(4);
                if (nodeLinks[this.nodes.length * 4] == -2 || nodeLinks[this.nodes.length * 4] == -1) {
                    node.enableClick();
                    node.enableDrag();
                }
                this.nodes.push(node);
            }
        }

        //Import objects if there is data pasted in the top
        if (objectsDataImport.length > 0) {
            customObjectColors.splice(0, customObjectColors.length);
            for (var i = 0; i < objectsDataImport[2] - 3; i++) {
                customObjectColors.push(objectsDataImport[i + 3]);
            }

            for (var i = 0; i < objectsDataImport[1]; i++) {
                var obj = this.add.sprite(objectsDataImport[(i * 9 + 1) + objectsDataImport[2]], objectsDataImport[(i * 9 + 2) + objectsDataImport[2]], `${objectsDataImport[(i * 9 + 3) + objectsDataImport[2]]}`, 1);
                obj.setVisible(objectsDataImport[(i * 9 + 0) + objectsDataImport[2]]);
                obj.setAngle(objectsDataImport[(i * 9 + 4) + objectsDataImport[2]] * 90);
                obj.scale *= (objectsData[(objectsDataImport[(i * 9 + 3) + objectsDataImport[2]] * 5) + 2]);
                obj.width *= (objectsData[(objectsDataImport[(i * 9 + 3) + objectsDataImport[2]] * 5) + 2]);
                obj.height *= (objectsData[(objectsDataImport[(i * 9 + 3) + objectsDataImport[2]] * 5) + 2]);
                obj.scale *= scaleCount;
                obj.width *= scaleCount;
                obj.height *= scaleCount;
                if (objectsDataImport[(i * 9 + 4) + objectsDataImport[2]] == 1 || objectsDataImport[(i * 9 + 4) + objectsDataImport[2]] == 3) {
                    var widthHolder = obj.width;
                    obj.width = obj.height;
                    obj.height = widthHolder;
                }
                obj.depth = objectsDataImport[(i * 9 + 5) + objectsDataImport[2]];
                obj.enableClick();
                obj.enableDrag();

                //If object is an LED, battery, or RGB LED, set the tint color
                if (objectsDataImport[(i * 9 + 3) + objectsDataImport[2]] == 3 || objectsDataImport[(i * 9 + 3) + objectsDataImport[2]] == 6 || objectsDataImport[(i * 9 + 3) + objectsDataImport[2]] == 20) {
                    obj.setTint(objectsDataImport[(i * 9 + 6) + objectsDataImport[2]]);
                }

                this.objects.push(obj);
                this.objectIDs.push(objectsDataImport[(i * 9 + 3) + objectsDataImport[2]]);

                settings.push(objectsDataImport[(i * 9 + 6) + objectsDataImport[2]]);
                settings.push(objectsDataImport[(i * 9 + 7) + objectsDataImport[2]]);

                //Check if there should be an attached label, create if needed
                var labelAvail = -1;
                for (var v = 0; v < defaultLabel.length / 14; v++) {
                    if (defaultLabel[v * 14] == this.objectIDs[this.objectIDs.length - 1]) {
                        labelAvail = v;
                    }
                }
                if (labelAvail != -1) {
                    var label = this.add.text(this.objects[this.objects.length - 1].x + scaleCount * deviceWidth * defaultLabel[(labelAvail * 14) + 5], this.objects[this.objects.length - 1].y + scaleCount * deviceHeight * defaultLabel[(labelAvail * 14) + 6], objectsDataImport[(i * 9 + 8) + objectsDataImport[2]], labelColor);
                    if (defaultLabel[(labelAvail * 14) + 13] == 0xffffff) {
                        label.setFontColor(0xffffff);
                    }
                    label.setOrigin(0.5, 0.5);
                    label.setDepth(objectsDataImport[(i * 9 + 5) + objectsDataImport[2]])
                    label.setFontSize(scaleCount * deviceHeight * defaultLabel[(labelAvail * 14) + 2]);
                    label.setVisible(objectsDataImport[(i * 9 + 0) + objectsDataImport[2]]);
                    this.objectLabels.push(label);
                    objectLabelData.push(this.objects.length - 1);
                }

                rotateAngle.push(objectsDataImport[(i * 9 + 4) + objectsDataImport[2]]);
                shiftObjects.push(false);

                //Generate color bars for a resistor
                if (this.objectIDs[this.objectIDs.length - 1] == 2) {
                    var resistorValue = settings[settings.length - 2];

                    if (settings[settings.length - 1] == "KΩ") {
                        resistorValue *= 1000;
                    }
                    if (settings[settings.length - 1] == "MΩ") {
                        resistorValue *= 1000000;
                    }

                    var bar1 = this.add.rectangle(this.objects[this.objects.length - 1].x, this.objects[this.objects.length - 1].y + this.objects[this.objects.length - 1].height * 0.052, this.objects[this.objects.length - 1].width * 0.3, this.objects[this.objects.length - 1].height * 0.055, resistorColors[0]);
                    var bar2 = this.add.rectangle(this.objects[this.objects.length - 1].x, this.objects[this.objects.length - 1].y - this.objects[this.objects.length - 1].height * 0.057, this.objects[this.objects.length - 1].width * 0.3, this.objects[this.objects.length - 1].height * 0.055, resistorColors[0]);
                    bar1.setOrigin(0.5, 0.5);
                    bar2.setOrigin(0.5, 0.5);
                    bar1.setVisible(objectsDataImport[(i * 9 + 0) + objectsDataImport[2]]);
                    bar2.setVisible(objectsDataImport[(i * 9 + 0) + objectsDataImport[2]]);
                    this.resistorBars.push(bar1);
                    this.resistorBars.push(bar2);

                    var resistorDataArray = [];
                    for (var t = -1; t < 11; t++) {
                        if (resistorValue / Math.pow(10, t) >= 1) {
                            this.resistorBars[this.resistorBars.length - 1].fillColor = resistorColors[t];
                            resistorDataArray[0] = resistorColors[t];
                        }
                    }

                    var widthHolder = this.objects[this.objects.length - 1].width;
                    var heightHolder = this.objects[this.objects.length - 1].height;
                    for (var t = 10; t >= 0; t--) {
                        if ((resistorValue / Math.pow(10, t)) - Math.trunc(resistorValue / Math.pow(10, t)) != 0 && (resistorValue / Math.pow(10, t)) < 10) {
                            var truncatedResistance = Math.trunc((resistorValue / Math.pow(10, t)) * 10) / 10;
                            this.objects[this.objects.length - 1].setFrame(Math.trunc(truncatedResistance));
                            this.resistorBars[this.resistorBars.length - 2].fillColor = resistorColors[Math.round(-10 * (Math.trunc(truncatedResistance) - truncatedResistance) + 1)];
                            resistorDataArray[2] = Math.trunc(Math.trunc(truncatedResistance));
                            resistorDataArray[1] = resistorColors[Math.round(-10 * (Math.trunc(truncatedResistance) - truncatedResistance) + 1)];
                        }
                        if ((resistorValue / Math.pow(10, t)) - Math.trunc(resistorValue / Math.pow(10, t)) == 0 && (resistorValue / Math.pow(10, t)) < 10) {
                            this.objects[this.objects.length - 1].setFrame(Math.trunc(resistorValue / Math.pow(10, t)));
                            this.resistorBars[this.resistorBars.length - 2].fillColor = resistorColors[1];
                            resistorDataArray[2] = Math.trunc(resistorValue / Math.pow(10, t));
                            resistorDataArray[1] = resistorColors[1];
                        }
                    }
                    this.objects[this.objects.length - 1].width = widthHolder;
                    this.objects[this.objects.length - 1].height = heightHolder;

                    resistorData.push(this.objects.length - 1);
                    resistorData.push(resistorValue);
                    resistorData.push(resistorDataArray[0]);
                    resistorData.push(resistorDataArray[1]);
                    resistorData.push(resistorDataArray[2]);
                }
                if (this.objectIDs[this.objectIDs.length - 1] == 4 || this.objectIDs[this.objectIDs.length - 1] == 12) {
                    var widthHolder = this.objects[this.objects.length - 1].width;
                    var heightHolder = this.objects[this.objects.length - 1].height;
                    this.objects[this.objects.length - 1].setFrame(settings[settings.length - 2]);
                    this.objects[this.objects.length - 1].width = widthHolder;
                    this.objects[this.objects.length - 1].height = heightHolder;
                }
            }
        }
    }

    update() {

        element = document.querySelector(":focus");
        this.tooltip.setVisible(0);
        this.tooltiptext.setVisible(0);

        if (!(element == document.getElementById('input') || element == document.getElementById('dropdown') || element == document.getElementById('input2'))) {
            if (element != null) {
                element.blur();
            }
        }

        //Check for a single mouse click
        if (down == true) {
            down = false;
        }
        if (this.input.activePointer.isDown == true && up == true) {
            down = true;
            up = false;
            this.title.setVisible(0);
            this.instructions.setVisible(0);
        }
        if (this.input.activePointer.isDown == false) {
            up = true;
        }

        //Set hover appearance for icons
        const pElement = document.getElementsByTagName("body")[0];
        if (labelColor == 0x000000) {
            pElement.style.cursor = "url('assets/blackcursor.png'), auto";
        } else {
            pElement.style.cursor = "url('assets/whitecursor.png'), auto";
        }

        if (this.import.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.import.setAlpha(0.5);
            this.opentooltip("Import Workspace", this.import.x, this.import.y, -1);
        } else {
            this.import.setAlpha(1);
        }

        if (this.help.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.help.setAlpha(0.5);
            this.opentooltip("Help", this.help.x, this.help.y, 1);
        } else {
            this.help.setAlpha(1);
        }

        if (this.help2.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.help2.setAlpha(0.5);
        } else {
            this.help2.setAlpha(1);
        }

        if (this.home.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.home.setAlpha(0.5);
        } else {
            this.home.setAlpha(1);
        }

        if (this.increaseScale2.isOver() || this.increaseScaleButton2.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.increaseScale2.setAlpha(0.5);
        } else {
            this.increaseScale2.setAlpha(1);
        }

        if (this.decreaseScale2.isOver() || this.decreaseScaleButton2.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.decreaseScale2.setAlpha(0.5);
        } else {
            this.decreaseScale2.setAlpha(1);
        }

        if (this.dark.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.dark.setAlpha(0.5);
            if (labelColor == 0x000000) {
                this.opentooltip("Dark Mode", this.dark.x, this.dark.y, 1);
            } else {
                this.opentooltip("Light Mode", this.dark.x, this.dark.y, 1);
            }
        } else {
            this.dark.setAlpha(1);
        }

        //Dark mode
        if (this.dark.wasClicked()) {
            if (this.floor.fillColor == 0xF4F5F6) {
                this.floor.fillColor = 0x141516;
                gridColor = 0x333333;
                this.grid.setOutlineStyle(gridColor, 1);
                this.instructions.setFontColor(0xffffff);
                this.itemBin.fillColor = 0x444444;
                this.binHandle.fillColor = 0x444444;
                this.panel.fillColor = 0x444444;
                this.paneltext.setFontColor(0xffffff);
                this.panelSelectLabel.setFontColor(0xffffff);
                this.panelSelectLabel2.setFontColor(0xffffff);
                this.binHandleArrow.setFrame(1);
                this.nextPageArrow.setFrame(1);
                this.lastPageArrow.setFrame(1);
                this.lastPageButton.fillColor = 0x000000;
                this.nextPageButton.fillColor = 0x000000;
                labelColor = 0xffffff;
                for (var v = 0; v < this.itemLabels.length; v++) {
                    this.itemLabels[v].setFontColor(labelColor);
                }
                for (var v = 0; v < this.objectLabels.length; v++) {
                    var labelAvail = -1;
                    for (var t = 0; t < defaultLabel.length / 14; t++) {
                        if (defaultLabel[t * 14] == this.objectIDs[objectLabelData[v]]) {
                            labelAvail = t;
                        }
                    }
                    if (defaultLabel[(labelAvail * 14) + 13] == 0x000000 && this.objectIDs[objectLabelData[v]] != 6 && this.objectIDs[objectLabelData[v]] != 13 && this.objectIDs[objectLabelData[v]] != 14) {
                        this.objectLabels[v].setFontColor(labelColor);
                    }
                }
                document.getElementById('fullpage').style.backgroundColor = "#040506";
                document.getElementById('spacer').style.color = "black";
                document.getElementById('label').style.color = "white";
                document.getElementById('label2').style.color = "white";
                document.getElementById('label3').style.color = "white";
                document.getElementById('downloads').style.color = "white";

                this.panelUpArrow.setFrame(1);
                this.panelLeftArrow.setFrame(1);
                this.panelRightArrow.setFrame(1);
                this.panelDownArrow.setFrame(1);
                this.panelRotateRight.setFrame(1);
                this.panelRotateLeft.setFrame(1);
                this.panelForward.setFrame(1);
                this.panelBackward.setFrame(1);
            } else {
                this.floor.fillColor = 0xF4F5F6;
                gridColor = 0xdddddd;
                this.grid.setOutlineStyle(gridColor, 1);
                this.instructions.setFontColor(0x000000);
                this.itemBin.fillColor = 0xdddddd;
                this.binHandle.fillColor = 0xdddddd;
                this.panel.fillColor = 0xdddddd;
                this.paneltext.setFontColor(0x000000);
                this.panelSelectLabel.setFontColor(0x000000);
                this.panelSelectLabel2.setFontColor(0x000000);
                this.binHandleArrow.setFrame(0);
                this.nextPageArrow.setFrame(0);
                this.lastPageArrow.setFrame(0);
                this.lastPageButton.fillColor = 0xffffff;
                this.nextPageButton.fillColor = 0xffffff;
                labelColor = 0x000000;
                for (var v = 0; v < this.itemLabels.length; v++) {
                    this.itemLabels[v].setFontColor(labelColor);
                }
                for (var v = 0; v < this.objectLabels.length; v++) {
                    var labelAvail = -1;
                    for (var t = 0; t < defaultLabel.length / 14; t++) {
                        if (defaultLabel[t * 14] == this.objectIDs[objectLabelData[v]]) {
                            labelAvail = t;
                        }
                    }
                    if (defaultLabel[(labelAvail * 14) + 13] == 0x000000 && this.objectIDs[objectLabelData[v]] != 13 && this.objectIDs[objectLabelData[v]] != 14) {
                        this.objectLabels[v].setFontColor(labelColor);
                    }
                }
                document.getElementById('fullpage').style.backgroundColor = "#F4F5F6";
                document.getElementById('spacer').style.color = "white";
                document.getElementById('label').style.color = "black";
                document.getElementById('label2').style.color = "black";
                document.getElementById('label3').style.color = "black";
                document.getElementById('downloads').style.color = "black";

                this.panelUpArrow.setFrame(0);
                this.panelLeftArrow.setFrame(0);
                this.panelRightArrow.setFrame(0);
                this.panelDownArrow.setFrame(0);
                this.panelRotateRight.setFrame(0);
                this.panelRotateLeft.setFrame(0);
                this.panelForward.setFrame(0);
                this.panelBackward.setFrame(0);
            }
        }

        if (this.pen.isOver() || this.penSlash.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.pen.setAlpha(0.5);
            this.penSlash.setAlpha(0.5);
            this.opentooltip("Pen Mode [C]", this.pen.x, this.pen.y, 1);
        } else {
            this.pen.setAlpha(1);
            this.penSlash.setAlpha(1);
        }

        if (this.pen.wasClicked() || this.penSlash.wasClicked() || (element == null && this.c.wasPressed())) {
            activeWire = false;
            this.activeWire.setVisible(0);
            wiringPointer = false;
            if (this.penSlash.visible == 1) {
                this.penSlash.setVisible(0);
            } else {
                this.penSlash.setVisible(1);
            }
        }

        if (this.wand.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.wand.setAlpha(0.5);
            this.opentooltip("Auto-Color Wires", this.wand.x, this.wand.y, 1);
        } else {
            this.wand.setAlpha(1);
        }

        if (this.wand.wasClicked()) { // Auto Color
            for (var v = 0; v < this.wires.length; v++) {
                //All parts of each wire
                var selectWireGroup;
                for (var t = 0; t < this.nodes.length; t++) {
                    if (nodeLinks[t * 4] == v || (nodeLinks[t * 4] <= -1 && nodeLinks[(t * 4) + 2] == v)) {
                        selectWireGroup = nodeLinks[(t * 4) + 3];
                    }
                }
                var selectSlot = 0;
                for (var t = 0; t < this.nodes.length; t++) {
                    if (nodeLinks[(t * 4) + 3] == selectWireGroup && nodeLinks[t * 4] != -3) {
                        this.selected[selectSlot] = this.nodes[t];
                        selectSlot++;
                    }
                }
                for (var t = 0; t < this.nodes.length; t++) {
                    if (nodeLinks[(t * 4) + 3] == selectWireGroup) {
                        if (nodeLinks[t * 4] <= -1) {
                            this.selected[selectSlot] = this.wires[nodeLinks[(t * 4) + 2]];
                        } else {
                            this.selected[selectSlot] = this.wires[nodeLinks[t * 4]];
                        }
                        selectSlot++;
                    }
                }
                for (var t = 0; t < this.selected.length; t++) {
                    if (this.selected[t] == -1) {
                        this.selected.splice(t, (this.selected.length - t));
                    }
                }
                clean(this.selected);

                //Start by changing all wires to a random color
                var pickRandom = Math.floor(Math.random() * 8);
                for (var t = 0; t < this.selected.length; t++) {
                    this.selected[t].fillColor = paletteColors[pickRandom + 1];
                }
            }
            for (var v = 0; v < this.nodes.length; v++) {
                //Select wires that are connected to indicated power or ground points and assign red or black
                var selectWireGroup = -1;
                var coloring = -1;
                if (nodeLinks[v * 4 + 1] >= 0) {
                    for (var t = 0; t < powerObjects.length / 2; t++) {
                        if (this.objectIDs[nodeLinks[v * 4 + 1]] == powerObjects[t * 2]) {
                            for (var z = 0; z < powerObjects[t * 2 + 1]; z++) {
                                if (nodeLinks[v * 4 + 2] == powerPins["p" + this.objectIDs[nodeLinks[v * 4 + 1]]][z]) {
                                    selectWireGroup = nodeLinks[v * 4 + 3];
                                    coloring = 1;
                                }
                            }
                        }
                    }
                    for (var t = 0; t < groundObjects.length / 2; t++) {
                        if (this.objectIDs[nodeLinks[v * 4 + 1]] == groundObjects[t * 2]) {
                            for (var z = 0; z < groundObjects[t * 2 + 1]; z++) {
                                if (nodeLinks[v * 4 + 2] == gndPins["g" + this.objectIDs[nodeLinks[v * 4 + 1]]][z]) {
                                    selectWireGroup = nodeLinks[v * 4 + 3];
                                    coloring = 2;
                                }
                            }
                        }
                    }
                }
                var selectSlot = 0;
                if (selectWireGroup != -1) {
                    for (var t = 0; t < this.nodes.length; t++) {
                        if (nodeLinks[(t * 4) + 3] == selectWireGroup && nodeLinks[t * 4] != -3) {
                            this.selected[selectSlot] = this.nodes[t];
                            selectSlot++;
                        }
                    }
                    for (var t = 0; t < this.nodes.length; t++) {
                        if (nodeLinks[(t * 4) + 3] == selectWireGroup) {
                            if (nodeLinks[t * 4] <= -1) {
                                this.selected[selectSlot] = this.wires[nodeLinks[(t * 4) + 2]];
                            } else {
                                this.selected[selectSlot] = this.wires[nodeLinks[t * 4]];
                            }
                            selectSlot++;
                        }
                    }
                    for (var t = 0; t < this.selected.length; t++) {
                        if (this.selected[t] == -1) {
                            this.selected.splice(t, (this.selected.length - t));
                        }
                    }
                    clean(this.selected);

                    if (coloring == 1) {
                        for (var t = 0; t < this.selected.length; t++) {
                            this.selected[t].fillColor = 0xED4040;
                        }
                    }
                    if (coloring == 2) {
                        for (var t = 0; t < this.selected.length; t++) {
                            this.selected[t].fillColor = 0x3B3B3B;
                        }
                    }
                }
            }
        }

        if (this.select.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.select.setAlpha(0.5);
            this.opentooltip("Box Select [A]", this.select.x, this.select.y, 1);
        } else {
            this.select.setAlpha(1);
        }

        if (this.select.wasClicked() || (element == null && this.a.wasPressed())) {
            this.selectBox.width = 0;
            this.selectBox.height = 0;
            boxMode = true;
            this.selectBox.setVisible(1);
            this.clearPanel();
            this.disabling();
        }

        //Box select
        if (boxMode == true) {
            if (labelColor == 0x000000) {
                pElement.style.cursor = "url('assets/blackcross.png'), auto";
            } else {
                pElement.style.cursor = "url('assets/whitecross.png'), auto";
            }
            if (down == true) { //Start the beginning of the box at the first click
                this.selectBox.x = this.input.mousePointer.x;
                this.selectBox.y = this.input.mousePointer.y;
            }
            if (this.input.activePointer.isDown == true) { //Dynamically resize the box based on the position of the cursor
                this.selectBox.width = this.input.mousePointer.x - this.selectBox.x;
                this.selectBox.height = this.input.mousePointer.y - this.selectBox.y;
            }
            if (this.return.wasPressed()) {
                //Select objects and wires that are within the bounds of the box, but not previously deleted
                for (var v = 0; v < this.objects.length; v++) {
                    this.objects[v].setAlpha(1);
                    if (this.objects[v].intersects(this.selectBox) && this.objects[v].visible == true) {
                        if (shiftObjects[v] == false) {
                            this.shiftSelect.push(1);
                            this.shiftSelect.push(v);
                            shiftObjects[v] = true;
                        }
                    }
                }
                for (var v = 0; v < this.wires.length; v++) {
                    if (this.wires[v].intersects(this.selectBox) && this.wires[v].visible == true) {
                        this.shiftSelect.push(2);
                        this.shiftSelect.push(v);
                    }
                }
                this.selectBox.setVisible(0);
                this.enabling();
                selectedMode = true;
                this.openPanel(-2);
            }
            if (this.esc.wasPressed()) {
                this.selectBox.setVisible(0);
                this.enabling();
                boxMode = false;
                selectedMode = false;
            }

            if (activeWire == true) {
                this.enabling();
                selectedMode = false;
                boxMode = false;
            }
        }

        if (selectedMode == true) {
            if (down == true) {
                var pass = false;
                for (var v = 0; v < this.selectItems.length; v++) {
                    if (this.selectItems[v].isClicked()) {
                        pass = true;
                    }
                }
                if (pass == false) {
                    selectedMode = false;
                    boxMode = false;
                    this.clearPanel();
                }
            }
            if (this.shiftSelect.length == 0) {
                selectedMode = false;
                boxMode = false;
                this.clearPanel();
            }
            if (labelColor == 0x000000) {
                pElement.style.cursor = "url('assets/blackcursor.png'), auto";
            } else {
                pElement.style.cursor = "url('assets/whitecursor.png'), auto";
            }
        }

        if (this.popupdel.isOver() || this.popupdeltext.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.popupdel.fillColor = 0xff9999;
        } else {
            this.popupdel.fillColor = 0xed4040;
        }

        if (this.popupcandel.isOver() || this.popupcandeltext.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.popupcandel.fillColor = 0xeeeeee;
        } else {
            this.popupcandel.fillColor = 0xaaaaaa;
        }

        if (this.popupdone.isOver() || this.popupdonetext.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.popupdone.fillColor = 0xeeeeee;
        } else {
            this.popupdone.fillColor = 0xaaaaaa;
        }

        if (this.popupcreate.isOver() || this.popupcreatetext.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.popupcreate.fillColor = 0x99ff99;
        } else {
            this.popupcreate.fillColor = 0x4FBA52;
        }

        if (this.popupcheckbox.isOver() || this.popupautoSave.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
        }

        if (this.save.isOver() || this.saveButton.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.saveButton.fillColor = 0x99ff99;
            this.opentooltip("Save [S]", this.save.x, this.save.y, -1);
        } else {
            this.saveButton.fillColor = 0x3fce29;
        }

        if (this.increaseScale.isOver() || this.increaseScaleButton.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.increaseScale.setAlpha(0.5);
            this.opentooltip("Zoom In [SPACE]", this.increaseScale.x, this.increaseScale.y, -1);
        } else {
            this.increaseScale.setAlpha(1);
        }

        if (this.decreaseScale.isOver() || this.decreaseScaleButton.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.decreaseScale.setAlpha(0.5);
            this.opentooltip("Zoom Out [SHIFT+SPACE]", this.decreaseScale.x, this.decreaseScale.y, -1);
        } else {
            this.decreaseScale.setAlpha(1);
        }

        if (this.magnet.isOver() || this.slash.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.magnet.setAlpha(0.5);
            this.slash.setAlpha(0.5);
            if (this.slash.visible == 0) {
                this.opentooltip("Toggle Off Snap to Grid", this.magnet.x, this.magnet.y, -1);
            } else {
                this.opentooltip("Toggle On Snape to Grid", this.magnet.x, this.magnet.y, -1);
            }
        } else {
            this.magnet.setAlpha(1);
            this.slash.setAlpha(1);
        }

        if (this.search.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.search.setAlpha(0.5);
            this.opentooltip("Search", this.search.x, this.search.y, 1);
        } else {
            this.search.setAlpha(1);
        }

        if (this.addItem.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.addItem.setAlpha(0.5);
            this.opentooltip("Open Part Editor", this.addItem.x, this.addItem.y, 1);
        } else {
            this.addItem.setAlpha(1);
        }

        if (this.itemTypeArrow.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.itemTypeArrow.setAlpha(0.5);
            this.opentooltip("Change Cateogory", this.itemTypeArrow.x, this.itemTypeArrow.y, 1);
        } else {
            this.itemTypeArrow.setAlpha(1);
        }

        if (this.exit.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.exit.setAlpha(0.5);
        } else {
            this.exit.setAlpha(1);
        }

        if (this.binHandle.isOver() || this.binHandleArrow.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            if (itemBinOpen == true) {
                this.opentooltip("Close Bin", this.binHandleArrow.x, this.binHandleArrow.y, -1);
            } else {
                this.opentooltip("Open Bin", this.binHandleArrow.x, this.binHandleArrow.y, -1);
            }
        }

        //Open the text input HTML to enter search term
        if (this.search.wasClicked()) {
            document.getElementById('label').innerHTML = "Enter search phrase:";
            document.getElementById('input').style.display = 'block';
            document.getElementById('input').focus();
        }

        if (document.getElementById('label').innerHTML == "Enter search phrase:") {
            this.inputBox();
            if (this.binLabel.text != document.getElementById('input').value) { //Something has been typed, so hide the tools at the top to show search phrase
                this.search.setVisible(0);
                this.addItem.setVisible(0);
                this.itemTypeArrow.setVisible(0);
                this.nextPageArrow.setVisible(0);
                this.nextPageButton.setVisible(0);
                this.lastPageArrow.setVisible(0);
                this.lastPageButton.setVisible(0);
                this.exit.setVisible(1);
                currentPage = 0;
                currentItemType = 5;

                //Remove all current objects in the panel
                itemObjectID.splice(0, itemObjectID.length);
                for (var i = 0; i < this.items.length; i++) {
                    this.items[i].destroy();
                    this.itemLabels[i].destroy();
                    this.itemButtons[i].destroy();
                }
                clean(this.items);
                clean(this.itemLabels);
                clean(this.itemButtons);

                this.itemResistorBars[0].destroy();
                this.itemResistorBars[1].destroy();

                this.labelItemText[0].destroy();
                this.labelItemText[1].destroy();

                this.binLabel.setText(document.getElementById('input').value);
                if (this.binLabel.text.length > 13) {
                    this.binLabel.setFontSize(13 / this.binLabel.text.length * deviceHeight * 0.045);
                } else {
                    this.binLabel.setFontSize(deviceHeight * 0.045);
                }

                //Re-generate the object panel based on objects that match the search phrase
                objectID = 0;
                var v = 0;
                for (var i = 0; i < objectsData.length / 5; i++) {
                    if (v < 8) {
                        if (objectID != 10) { //Exclude the white point used for Pen Mode only
                            var obj;
                            var label;
                            var button;
                            if (objectsData[i * 5].includes(document.getElementById('input').value) == true || (objectsData[i * 5].toLowerCase()).includes(document.getElementById('input').value) == true || objectsData[(i * 5) + 1].includes(document.getElementById('input').value) == true || ((objectsData[(i * 5) + 1]).toLowerCase()).includes(document.getElementById('input').value) == true) {
                                if (v % 2 == 0) {
                                    obj = this.add.sprite(deviceWidth * 0.05, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.17, `${objectID}`, 1);
                                    label = this.add.text(deviceWidth * 0.05, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.26, objectsData[i * 5], labelColor);
                                    button = this.add.rectangle(deviceWidth * 0.05, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.2, deviceWidth * 0.08, deviceHeight * 0.17, 0xffffff);
                                }
                                if (v % 2 == 1) {
                                    obj = this.add.sprite(deviceWidth * 0.15, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.17, `${objectID}`, 1);
                                    label = this.add.text(deviceWidth * 0.15, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.26, objectsData[i * 5], labelColor);
                                    button = this.add.rectangle(deviceWidth * 0.15, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.2, deviceWidth * 0.08, deviceHeight * 0.17, 0xffffff);
                                }
                                obj.scale *= (objectsData[(i * 5) + 2]);
                                obj.width *= (objectsData[(i * 5) + 2]);
                                obj.height *= (objectsData[(i * 5) + 2]);
                                while (obj.width < deviceWidth * 0.03 && obj.height < deviceHeight * 0.08) {
                                    obj.width *= 1.1;
                                    obj.scale *= 1.1;
                                    obj.height *= 1.1;
                                }
                                while (obj.width > deviceWidth * 0.08 || obj.height > deviceHeight * 0.12) {
                                    obj.width *= 0.9;
                                    obj.scale *= 0.9;
                                    obj.height *= 0.9;
                                }
                                obj.enableClick();
                                obj.setDepth(6);
                                this.items[v] = obj;
                                itemObjectID.push(objectID);

                                button.setAlpha(0.01);
                                button.setDepth(7);
                                button.enableClick();
                                this.itemButtons.push(button);

                                if (objectID == 2) {
                                    this.itemResistorBars[0] = this.add.rectangle(obj.x, obj.y + obj.height * 0.052, obj.width * 0.3, obj.height * 0.055, 0x3b3b3b);
                                    this.itemResistorBars[1] = this.add.rectangle(obj.x, obj.y - obj.height * 0.057, obj.width * 0.3, obj.height * 0.055, 0xed9c40);
                                    this.itemResistorBars[0].setOrigin(0.5, 0.5);
                                    this.itemResistorBars[1].setOrigin(0.5, 0.5);
                                    this.itemResistorBars[0].setDepth(6);
                                    this.itemResistorBars[1].setDepth(6);
                                }
                                if (objectID == 13) {
                                    this.labelItemText[0] = this.add.text(obj.x, obj.y, "Heading", 0xff0000);
                                    this.labelItemText[0].setFontSize(deviceHeight * 0.025);
                                    this.labelItemText[0].setDepth(6);
                                    this.labelItemText[0].setOrigin(0.5, 0.5);
                                }
                                if (objectID == 14) {
                                    this.labelItemText[1] = this.add.text(obj.x, obj.y, "Label", 0x0000ff);
                                    this.labelItemText[1].setFontSize(deviceHeight * 0.03);
                                    this.labelItemText[1].setDepth(6);
                                    this.labelItemText[1].setOrigin(0.5, 0.5);
                                }
                                if (label.text.length > 15) {
                                    label.setFontSize(15 / label.text.length * deviceHeight * 0.025);
                                } else {
                                    label.setFontSize(deviceHeight * 0.025);
                                }
                                label.setOrigin(0.5, 0.5);
                                label.setDepth(6);
                                this.itemLabels[v] = label;
                                v++;
                            }
                        }
                        objectID++;
                    }
                }
            }
            if (this.return.wasPressed()) {
                this.clearHTML();
            }
        }

        //Re-generate the original default object panel when search is open but nothing is typed
        if (this.exit.visible == 1 && document.getElementById('input').style.display == 'none' && this.binLabel.text == "") {
            this.binLabel.setText("All");
            this.nextPageArrow.setVisible(1);
            this.nextPageButton.setVisible(1);
            this.lastPageArrow.setVisible(1);
            this.lastPageButton.setVisible(1);
            this.search.setVisible(1);
            this.addItem.setVisible(1);
            this.itemTypeArrow.setVisible(1);
            this.exit.setVisible(0);

            currentPage = 0;
            currentItemType = 0;

            itemObjectID.splice(0, itemObjectID.length);
            for (var i = 0; i < this.items.length; i++) {
                this.items[i].destroy();
                this.itemLabels[i].destroy();
                this.itemButtons[i].destroy();
            }
            clean(this.items);
            clean(this.itemLabels);
            clean(this.itemButtons);

            this.itemResistorBars[0].destroy();
            this.itemResistorBars[1].destroy();

            this.labelItemText[0].destroy();
            this.labelItemText[1].destroy();

            objectID = 0;
            var v = 0;
            for (var i = 0; i < objectsData.length / 5; i++) {
                if (v < 8) {
                    if (objectID != 10) {
                        var obj;
                        var label;
                        var button;
                        if (v % 2 == 0) {
                            obj = this.add.sprite(deviceWidth * 0.05, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.17, `${objectID}`, 1);
                            label = this.add.text(deviceWidth * 0.05, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.26, objectsData[i * 5], labelColor);
                            button = this.add.rectangle(deviceWidth * 0.05, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.2, deviceWidth * 0.08, deviceHeight * 0.17, 0xffffff);
                        }
                        if (v % 2 == 1) {
                            obj = this.add.sprite(deviceWidth * 0.15, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.17, `${objectID}`, 1);
                            label = this.add.text(deviceWidth * 0.15, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.26, objectsData[i * 5], labelColor);
                            button = this.add.rectangle(deviceWidth * 0.15, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.2, deviceWidth * 0.08, deviceHeight * 0.17, 0xffffff);
                        }
                        obj.scale *= (objectsData[(i * 5) + 2]);
                        obj.width *= (objectsData[(i * 5) + 2]);
                        obj.height *= (objectsData[(i * 5) + 2]);
                        while (obj.width < deviceWidth * 0.03 && obj.height < deviceHeight * 0.08) {
                            obj.width *= 1.1;
                            obj.scale *= 1.1;
                            obj.height *= 1.1;
                        }
                        while (obj.width > deviceWidth * 0.08 || obj.height > deviceHeight * 0.12) {
                            obj.width *= 0.9;
                            obj.scale *= 0.9;
                            obj.height *= 0.9;
                        }
                        obj.enableClick();
                        obj.setDepth(6);
                        this.items[v] = obj;
                        itemObjectID.push(objectID);

                        button.setAlpha(0.01);
                        button.setDepth(7);
                        button.enableClick();
                        this.itemButtons.push(button);

                        if (objectID == 2) {
                            this.itemResistorBars[0] = this.add.rectangle(obj.x, obj.y + obj.height * 0.052, obj.width * 0.3, obj.height * 0.055, 0x3b3b3b);
                            this.itemResistorBars[1] = this.add.rectangle(obj.x, obj.y - obj.height * 0.057, obj.width * 0.3, obj.height * 0.055, 0xed9c40);
                            this.itemResistorBars[0].setOrigin(0.5, 0.5);
                            this.itemResistorBars[1].setOrigin(0.5, 0.5);
                            this.itemResistorBars[0].setDepth(6);
                            this.itemResistorBars[1].setDepth(6);
                        }
                        if (objectID == 13) {
                            this.labelItemText[0] = this.add.text(obj.x, obj.y, "Heading", 0xff0000);
                            this.labelItemText[0].setFontSize(deviceHeight * 0.025);
                            this.labelItemText[0].setDepth(6);
                            this.labelItemText[0].setOrigin(0.5, 0.5);
                        }
                        if (objectID == 14) {
                            this.labelItemText[1] = this.add.text(obj.x, obj.y, "Label", 0x0000ff);
                            this.labelItemText[1].setFontSize(deviceHeight * 0.03);
                            this.labelItemText[1].setDepth(6);
                            this.labelItemText[1].setOrigin(0.5, 0.5);
                        }
                        if (label.text.length > 15) {
                            label.setFontSize(15 / label.text.length * deviceHeight * 0.025);
                        } else {
                            label.setFontSize(deviceHeight * 0.025);
                        }
                        label.setOrigin(0.5, 0.5);
                        label.setDepth(6);
                        this.itemLabels[v] = label;
                        v++;
                    }
                    objectID++;
                }
            }
        }

        //Re-generate the original object panel when search is exited
        if (this.exit.wasClicked()) {
            this.clearHTML();
            this.exit.setVisible(0);
            this.itemTypeArrow.setVisible(1);
            this.addItem.setVisible(1);
            this.search.setVisible(1);
            this.lastPageButton.setVisible(1);
            this.lastPageArrow.setVisible(1);
            this.nextPageButton.setVisible(1);
            this.nextPageArrow.setVisible(1);
            this.binLabel.setText("All");
            currentPage = 0;
            currentItemType = 0;

            itemObjectID.splice(0, itemObjectID.length);
            for (var i = 0; i < this.items.length; i++) {
                this.items[i].destroy();
                this.itemLabels[i].destroy();
                this.itemButtons[i].destroy();
            }
            clean(this.items);
            clean(this.itemLabels);
            clean(this.itemButtons);

            this.itemResistorBars[0].destroy();
            this.itemResistorBars[1].destroy();

            this.labelItemText[0].destroy();
            this.labelItemText[1].destroy();

            objectID = 0;
            var v = 0;
            for (var i = 0; i < objectsData.length / 5; i++) {
                if (v < 8) {
                    if (objectID != 10) {
                        var obj;
                        var label;
                        var button;
                        if (v % 2 == 0) {
                            obj = this.add.sprite(deviceWidth * 0.05, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.17, `${objectID}`, 1);
                            label = this.add.text(deviceWidth * 0.05, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.26, objectsData[i * 5], labelColor);
                            button = this.add.rectangle(deviceWidth * 0.05, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.2, deviceWidth * 0.08, deviceHeight * 0.17, 0xffffff);
                        }
                        if (v % 2 == 1) {
                            obj = this.add.sprite(deviceWidth * 0.15, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.17, `${objectID}`, 1);
                            label = this.add.text(deviceWidth * 0.15, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.26, objectsData[i * 5], labelColor);
                            button = this.add.rectangle(deviceWidth * 0.15, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.2, deviceWidth * 0.08, deviceHeight * 0.17, 0xffffff);
                        }
                        obj.scale *= (objectsData[(i * 5) + 2]);
                        obj.width *= (objectsData[(i * 5) + 2]);
                        obj.height *= (objectsData[(i * 5) + 2]);
                        while (obj.width < deviceWidth * 0.03 && obj.height < deviceHeight * 0.08) {
                            obj.width *= 1.1;
                            obj.scale *= 1.1;
                            obj.height *= 1.1;
                        }
                        while (obj.width > deviceWidth * 0.08 || obj.height > deviceHeight * 0.12) {
                            obj.width *= 0.9;
                            obj.scale *= 0.9;
                            obj.height *= 0.9;
                        }
                        obj.enableClick();
                        obj.setDepth(6);
                        this.items[v] = obj;
                        itemObjectID.push(objectID);

                        button.setAlpha(0.01);
                        button.setDepth(7);
                        button.enableClick();
                        this.itemButtons.push(button);

                        if (objectID == 2) {
                            this.itemResistorBars[0] = this.add.rectangle(obj.x, obj.y + obj.height * 0.052, obj.width * 0.3, obj.height * 0.055, 0x3b3b3b);
                            this.itemResistorBars[1] = this.add.rectangle(obj.x, obj.y - obj.height * 0.057, obj.width * 0.3, obj.height * 0.055, 0xed9c40);
                            this.itemResistorBars[0].setOrigin(0.5, 0.5);
                            this.itemResistorBars[1].setOrigin(0.5, 0.5);
                            this.itemResistorBars[0].setDepth(6);
                            this.itemResistorBars[1].setDepth(6);
                        }
                        if (objectID == 13) {
                            this.labelItemText[0] = this.add.text(obj.x, obj.y, "Heading", 0xff0000);
                            this.labelItemText[0].setFontSize(deviceHeight * 0.025);
                            this.labelItemText[0].setDepth(6);
                            this.labelItemText[0].setOrigin(0.5, 0.5);
                        }
                        if (objectID == 14) {
                            this.labelItemText[1] = this.add.text(obj.x, obj.y, "Label", 0x0000ff);
                            this.labelItemText[1].setFontSize(deviceHeight * 0.03);
                            this.labelItemText[1].setDepth(6);
                            this.labelItemText[1].setOrigin(0.5, 0.5);
                        }
                        if (label.text.length > 15) {
                            label.setFontSize(15 / label.text.length * deviceHeight * 0.025);
                        } else {
                            label.setFontSize(deviceHeight * 0.025);
                        }
                        label.setOrigin(0.5, 0.5);
                        label.setDepth(6);
                        this.itemLabels[v] = label;
                        v++;
                    }
                    objectID++;
                }
            }
        }

        if (this.undo.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.undo.setAlpha(0.5);
            this.opentooltip("Undo [Z]", this.undo.x, this.undo.y, -1);
        } else {
            if (undo.length > 0) { //Make it seem unclickable when there is nothing to undo
                this.undo.setAlpha(1);
            } else {
                this.undo.setAlpha(0.5);
            }
        }

        if (this.redo.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.redo.setAlpha(0.5);
            this.opentooltip("Redo [X]", this.redo.x, this.redo.y, -1);
        } else {
            if (redo.length > 0) { //Make it seem unclickable when there is nothing to redo
                this.redo.setAlpha(1);
            } else {
                this.redo.setAlpha(0.5);
            }
        }

        if (this.lastPageButton.isOver() || this.lastPageArrow.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.lastPageButton.setAlpha(0.5);
            this.opentooltip("Last Page", this.lastPageButton.x, this.lastPageButton.y, -1);
        } else {
            this.lastPageButton.setAlpha(0.3);
        }

        if (this.nextPageButton.isOver() || this.nextPageArrow.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
            this.nextPageButton.setAlpha(0.5);
            this.opentooltip("Next Page", this.nextPageButton.x, this.nextPageButton.y, -1);
        } else {
            this.nextPageButton.setAlpha(0.3);
        }

        if (this.closex.isOver()) {
            pElement.style.cursor = "url('assets/hand.png'), auto";
        }

        if ((this.panel.visible == true || activeWire == true)) {
            if (this.closex.wasClicked() || (element == null && this.esc.wasPressed())) {
                activeWire = false;
                this.activeWire.setVisible(0);
                this.clearPanel();
            }
        }

        for (var i = 0; i < this.objectLabels.length; i++) {
            if (this.objectLabels[i].visible == true) {
                var labelAvail = -1;
                for (var v = 0; v < defaultLabel.length / 14; v++) {
                    if (this.objectIDs[objectLabelData[i]] == defaultLabel[v * 14]) {
                        labelAvail = v;
                    }
                }
                //Check that the label's angle matches the object's angle if they are meant to stick together
                if (defaultLabel[(labelAvail * 14) + 4] == true) {
                    this.objectLabels[i].setAngle(rotateAngle[objectLabelData[i]] * 90);
                }
                this.objectLabels[i].x = this.objects[objectLabelData[i]].x + (scaleCount * deviceWidth * defaultLabel[(labelAvail * 14) + 5 + (rotateAngle[objectLabelData[i]] * 2)]);
                this.objectLabels[i].y = this.objects[objectLabelData[i]].y + (scaleCount * deviceHeight * defaultLabel[(labelAvail * 14) + 6 + (rotateAngle[objectLabelData[i]] * 2)]);
                if (this.objectIDs[i] != 12 && this.objectIDs[i] != 13 && this.objectIDs[i] != 14) { //
                    if (this.objectLabels[i].text.length < defaultLabel[(labelAvail * 14) + 3]) {
                        this.objectLabels[i].setFontSize(deviceHeight * defaultLabel[(labelAvail * 14) + 2]);
                    } else {
                        this.objectLabels[i].setFontSize(defaultLabel[(labelAvail * 14) + 3] / (this.objectLabels[i].text.length) * deviceHeight * defaultLabel[(labelAvail * 14) + 2]);
                    }
                }
                if (this.objectIDs[i] == 12) {
                    if (this.objectLabels[i].text.length < Math.pow(settings[i * 2] + 4, 1.2)) {
                        this.objectLabels[i].setFontSize(deviceHeight * defaultLabel[(labelAvail * 14) + 2]);
                    } else {
                        this.objectLabels[i].setFontSize((Math.pow(settings[i * 2] + 4, 1.2) / (this.objectLabels[i].text.length)) * deviceHeight * defaultLabel[(labelAvail * 14) + 2]);
                    }
                }
            }
        }

        for (var i = 0; i < this.wires.length; i++) {
            if (this.wires[i].visible == 1) {
                if (this.wires[i].isOver()) {
                    pElement.style.cursor = "url('assets/hand.png'), auto";
                    this.wires[i].alpha = 0.5;
                    for (var v = 0; v < this.selected.length; v++) {
                        this.selected[v] = -1;
                    }

                    if (this.w.wasPressed()) {
                        var node;
                        var node2;
                        if (Math.abs(this.wireLines[i].geom.y1 - this.wireLines[i].geom.y2) > 5 && Math.abs(this.wireLines[i].geom.x1 != this.wireLines[i].geom.x2) > 5) {
                            node = this.add.circle((this.input.mousePointer.y - this.wireLines[i].geom.y1) / ((this.wireLines[i].geom.y1 - this.wireLines[i].geom.y2) / (this.wireLines[i].geom.x1 - this.wireLines[i].geom.x2)) + this.wireLines[i].geom.x1, this.input.mousePointer.y, 8 * scaleCount, 0xffffff);
                            node2 = this.add.circle((this.input.mousePointer.y - this.wireLines[i].geom.y1) / ((this.wireLines[i].geom.y1 - this.wireLines[i].geom.y2) / (this.wireLines[i].geom.x1 - this.wireLines[i].geom.x2)) + this.wireLines[i].geom.x1, this.input.mousePointer.y, 8 * scaleCount, this.wires[i].fillColor);
                        } else {
                            node = this.add.circle(this.input.mousePointer.x, (this.wireLines[i].geom.y1 + this.wireLines[i].geom.y2) / 2, 8 * scaleCount, 0xffffff);
                            node2 = this.add.circle(this.input.mousePointer.x, (this.wireLines[i].geom.y1 + this.wireLines[i].geom.y2) / 2, 8 * scaleCount, this.wires[i].fillColor);
                        }
                        node.setDepth(4);
                        this.nodes.push(node);
                        node2.enableClick();
                        node2.enableDrag();
                        node2.setDepth(4);
                        this.nodes.push(node2);
                        var selectWireGroup;
                        for (var v = 0; v < this.nodes.length; v++) {
                            if (nodeLinks[v * 4] == i || (nodeLinks[v * 4] <= -1 && nodeLinks[(v * 4) + 2] == i)) {
                                selectWireGroup = nodeLinks[(v * 4) + 3]
                            }
                        }
                        nodeLinks.push(-3);
                        nodeLinks.push(i);
                        nodeLinks.push(this.wireLines.length);
                        nodeLinks.push(selectWireGroup)
                        nodeLinks.push(-2);
                        nodeLinks.push(i);
                        nodeLinks.push(this.wireLines.length + 1);
                        nodeLinks.push(selectWireGroup);
                        var obj = this.add.line(this.wireLines[i].geom.x1, this.wireLines[i].geom.y1, node.x, node.y, 0xffffff);
                        obj.setLineWidth(3.8 * scaleCount);
                        obj.setDepth(3.5);
                        var obj2 = this.add.line(this.wireLines[i].geom.x2, this.wireLines[i].geom.y2, node.x, node.y, 0xffffff);
                        obj2.setLineWidth(3.8 * scaleCount);
                        obj2.setDepth(3.5);
                        this.wireLines[i].setVisible(0);
                        this.wires[i].setVisible(0);
                        this.wireLines.push(obj);
                        this.wireLines.push(obj2);
                        var obj3 = this.add.rectangle((obj.geom.x1 + obj.geom.x2) / 2, (obj.geom.y1 + obj.geom.y2) / 2, lineWidth, (Math.sqrt(Math.pow(Math.abs(obj.geom.x1 - obj.geom.x2), 2) + Math.pow(Math.abs(obj.geom.y1 - obj.geom.y2), 2))), this.wires[i].fillColor);
                        obj3.setAngle(-(Math.atan(Math.abs(obj.geom.x1 - obj.geom.x2) / Math.abs(obj.geom.y1 - obj.geom.y2))) * (180 / Math.PI));
                        var obj4 = this.add.rectangle((obj2.geom.x1 + obj2.geom.x2) / 2, (obj2.geom.y1 + obj2.geom.y2) / 2, lineWidth, (Math.sqrt(Math.pow(Math.abs(obj2.geom.x1 - obj2.geom.x2), 2) + Math.pow(Math.abs(obj2.geom.y1 - obj2.geom.y2), 2))), this.wires[i].fillColor);
                        obj4.setAngle(-(Math.atan(Math.abs(obj2.geom.x1 - obj2.geom.x2) / Math.abs(obj2.geom.y1 - obj2.geom.y2))) * (180 / Math.PI));
                        obj3.enableClick();
                        obj3.setDepth(3.5);
                        obj4.enableClick();
                        obj4.setDepth(3.5);
                        this.wires.push(obj3);
                        this.wires.push(obj4);

                        undo.push("subdividedWire");
                        undo.push(this.nodes.length - 2);
                        undo.push(nodeLinks.length - 8);
                        undo.push(nodeLinks.length - 4);
                        redo.splice(0, redo.length);
                        this.clearPanel();

                        selectedMode = false;
                        boxMode = false;
                    }
                    this.wireShortcutKeys(i);
                } else {
                    this.wires[i].alpha = 1;
                }
                if (this.wires[i].wasClicked()) {
                    lastWire = i;
                    wireClick++;
                    this.createPalette(i);

                    if (wireClick == 2) {
                        wireClick = 0;
                        clickTime = 0;
                        this.clearPanel();
                        var node;
                        var node2;
                        if (this.wireLines[i].geom.y1 != this.wireLines[i].geom.y2 && this.wireLines[i].geom.x1 != this.wireLines[i].geom.x2) {
                            node = this.add.circle((this.input.mousePointer.y - this.wireLines[i].geom.y1) / ((this.wireLines[i].geom.y1 - this.wireLines[i].geom.y2) / (this.wireLines[i].geom.x1 - this.wireLines[i].geom.x2)) + this.wireLines[i].geom.x1, this.input.mousePointer.y, 8 * scaleCount, 0xffffff);
                            node2 = this.add.circle((this.input.mousePointer.y - this.wireLines[i].geom.y1) / ((this.wireLines[i].geom.y1 - this.wireLines[i].geom.y2) / (this.wireLines[i].geom.x1 - this.wireLines[i].geom.x2)) + this.wireLines[i].geom.x1, this.input.mousePointer.y, 8 * scaleCount, this.wires[i].fillColor);
                        } else {
                            node = this.add.circle(this.input.mousePointer.x, (this.wireLines[i].geom.y1 + this.wireLines[i].geom.y2) / 2, 8 * scaleCount, 0xffffff);
                            node2 = this.add.circle(this.input.mousePointer.x, (this.wireLines[i].geom.y1 + this.wireLines[i].geom.y2) / 2, 8 * scaleCount, this.wires[i].fillColor);
                        }
                        node.setDepth(4);
                        this.nodes.push(node);
                        node2.enableClick();
                        node2.enableDrag();
                        node2.setDepth(4);
                        this.nodes.push(node2);
                        var selectWireGroup;
                        for (var v = 0; v < this.nodes.length; v++) {
                            if (nodeLinks[v * 4] == i || (nodeLinks[v * 4] <= -1 && nodeLinks[(v * 4) + 2] == i)) {
                                selectWireGroup = nodeLinks[(v * 4) + 3]
                            }
                        }
                        nodeLinks.push(-3);
                        nodeLinks.push(i);
                        nodeLinks.push(this.wireLines.length);
                        nodeLinks.push(selectWireGroup)
                        nodeLinks.push(-2);
                        nodeLinks.push(i);
                        nodeLinks.push(this.wireLines.length + 1);
                        nodeLinks.push(selectWireGroup);
                        var obj = this.add.line(this.wireLines[i].geom.x1, this.wireLines[i].geom.y1, node.x, node.y, 0xffffff);
                        obj.setLineWidth(3.8 * scaleCount);
                        obj.setDepth(3.5);
                        var obj2 = this.add.line(this.wireLines[i].geom.x2, this.wireLines[i].geom.y2, node.x, node.y, 0xffffff);
                        obj2.setLineWidth(3.8 * scaleCount);
                        obj2.setDepth(3.5);
                        this.wireLines[i].setVisible(0);
                        this.wires[i].setVisible(0);
                        this.wireLines.push(obj);
                        this.wireLines.push(obj2);
                        var obj3 = this.add.rectangle((obj.geom.x1 + obj.geom.x2) / 2, (obj.geom.y1 + obj.geom.y2) / 2, lineWidth, (Math.sqrt(Math.pow(Math.abs(obj.geom.x1 - obj.geom.x2), 2) + Math.pow(Math.abs(obj.geom.y1 - obj.geom.y2), 2))), this.wires[i].fillColor);
                        obj3.setAngle(-(Math.atan(Math.abs(obj.geom.x1 - obj.geom.x2) / Math.abs(obj.geom.y1 - obj.geom.y2))) * (180 / Math.PI));
                        var obj4 = this.add.rectangle((obj2.geom.x1 + obj2.geom.x2) / 2, (obj2.geom.y1 + obj2.geom.y2) / 2, lineWidth, (Math.sqrt(Math.pow(Math.abs(obj2.geom.x1 - obj2.geom.x2), 2) + Math.pow(Math.abs(obj2.geom.y1 - obj2.geom.y2), 2))), this.wires[i].fillColor);
                        obj4.setAngle(-(Math.atan(Math.abs(obj2.geom.x1 - obj2.geom.x2) / Math.abs(obj2.geom.y1 - obj2.geom.y2))) * (180 / Math.PI));
                        obj3.enableClick();
                        obj3.setDepth(3.5);
                        obj4.enableClick();
                        obj4.setDepth(3.5);
                        this.wires.push(obj3);
                        this.wires.push(obj4);

                        undo.push("subdividedWire");
                        undo.push(this.nodes.length - 2);
                        undo.push(nodeLinks.length - 8);
                        undo.push(nodeLinks.length - 4);
                        redo.splice(0, redo.length);
                    }
                }
            }
        }

        for (var i = 0; i < this.nodes.length; i++) {
            if (this.nodes[i].visible == 1) {
                if (nodeLinks[i * 4] == -2 || (nodeLinks[i * 4] >= 0 && this.objectIDs[nodeLinks[i * 4 + 1]] == 10)) {
                    if (this.nodes[i].isOver()) {
                        if (this.objectIDs[nodeLinks[(i * 4) + 1]] == 10 && this.nodes[i].depth != 0) {
                            this.objects[nodeLinks[(i * 4) + 1]].setAlpha(1);
                        }
                        this.nodes[i].alpha = 0.5;
                        pElement.style.cursor = "url('assets/hand.png'), auto";

                        if (element == null && this.uparrow.isPressed() && !(this.shift.isPressed())) {
                            this.nodes[i].y -= 0.25;
                        }
                        if (element == null && this.downarrow.isPressed() && !(this.shift.isPressed())) {
                            this.nodes[i].y += 0.25;
                        }
                        if (element == null && this.rightarrow.isPressed() && !(this.shift.isPressed())) {
                            this.nodes[i].x += 0.25;
                        }
                        if (element == null && this.leftarrow.isPressed() && !(this.shift.isPressed())) {
                            this.nodes[i].x -= 0.25;
                        }
                    } else {
                        this.nodes[i].alpha = 1;
                        if (this.objectIDs[nodeLinks[(i * 4) + 1]] == 10 && this.nodes[i].depth != 0) {
                            this.objects[nodeLinks[(i * 4) + 1]].setAlpha(0);
                        }
                    }
                    if (this.nodes[i].wasClicked()) {
                        lastPosition[0] = i;
                        lastPosition[1] = this.nodes[i].x;
                        lastPosition[2] = this.nodes[i].y;
                    }
                    if (this.nodes[i].isClicked()) {
                        if (this.slash.visible == 0) {
                            for (var v = -10000; v < 10000; v++) {
                                if (Math.abs(((v * 28 * scaleCount + (snapStartX % (28 * scaleCount))) - this.nodes[i].x)) < (28 * scaleCount) / 2 && Math.abs(((v * 28 * scaleCount + (snapStartX % (28 * scaleCount))) - this.nodes[i].x)) > 0) {
                                    this.nodes[i].x = (v * 28 * scaleCount + (snapStartX % (28 * scaleCount)));
                                }
                            }
                            for (var v = -10000; v < 10000; v++) {

                                if (Math.abs(((v * 28 * scaleCount + (snapStartY % (28 * scaleCount))) - this.nodes[i].y)) < (28 * scaleCount) / 2 && Math.abs(((v * 28 * scaleCount + (snapStartY % (28 * scaleCount))) - this.nodes[i].y)) > 0) {
                                    this.nodes[i].y = (v * 28 * scaleCount + (snapStartY % (28 * scaleCount)));
                                }
                            }
                        } else {
                            for (var v = 0; v < this.nodes.length; v++) {
                                if (this.nodes[v].visible == 1) {
                                    if (this.nodes[i].x > this.nodes[v].x - 10 && this.nodes[i].x < this.nodes[v].x + 10 && i != v && nodeLinks[(i * 4)] != -3) {
                                        this.nodes[i].x = this.nodes[v].x;
                                    }
                                    if (this.nodes[i].y > this.nodes[v].y - 10 && this.nodes[i].y < this.nodes[v].y + 10 && i != v && nodeLinks[(i * 4)] != -3) {
                                        this.nodes[i].y = this.nodes[v].y;
                                    }
                                }
                            }
                        }
                    }
                    if (i == lastPosition[0] && !(this.nodes[i].isClicked()) && (lastPosition[1] != this.nodes[i].x || lastPosition[2] != this.nodes[i].y)) {
                        undo.push("movedNode");
                        undo.push(i);
                        undo.push(lastPosition[1] - this.nodes[i].x);
                        undo.push(lastPosition[2] - this.nodes[i].y);
                        lastPosition[1] = this.nodes[i].x;
                        lastPosition[2] = this.nodes[i].y;
                        redo.splice(0, redo.length);
                    }
                }
            }
        }

        if (panelType == 1) {
            if (this.palette.length > 0) {
                for (var i = 0; i < 10; i++) {
                    this.palette[i].setDepth(6);
                    if (this.palette[i].isOver()) {
                        pElement.style.cursor = "url('assets/hand.png'), auto";
                        this.palette[i].setAlpha(0.5);
                    } else {
                        this.palette[i].setAlpha(1);

                    }
                    if (this.palette[i].wasClicked()) {
                        if (this.selected[0].fillColor != paletteColors[i]) {
                            undo.push("wireColor");
                            undo.push(this.selected[0].fillColor);
                            var selected = [];
                            for (var v = 0; v < this.selected.length; v++) {
                                this.selected[v].fillColor = paletteColors[i];
                                selected.push(this.selected[v]);
                            }
                            undo.push(selected);
                            undo.push(-1);
                            redo.splice(0, redo.length);
                            wireColor = paletteColors[i];
                        }
                    }
                }
            }
            if (this.customColors.length > 0) {
                for (var i = 0; i < this.customColors.length; i++) {
                    this.customColors[i].setDepth(6);
                    if (this.customColors[i].wasClicked()) {
                        if (this.selected[0].fillColor != customColors[i]) {
                            undo.push("wireColor");
                            undo.push(this.selected[0].fillColor);
                            var selected = [];
                            for (var v = 0; v < this.selected.length; v++) {
                                this.selected[v].fillColor = customColors[i];
                                selected.push(this.selected[v]);
                            }
                            undo.push(selected);
                            undo.push(-1);
                            redo.splice(0, redo.length);
                            wireColor = customColors[i];
                        }
                    }
                    if (this.customColors[i].isOver()) {
                        pElement.style.cursor = "url('assets/hand.png'), auto";
                        this.customColors[i].setAlpha(0.5);
                        if (this.del.wasPressed()) {
                            undo.push("deletedCustomColor");
                            undo.push(customColors[i]);
                            undo.push(i);
                            customColors.splice(i, 1);

                            this.clearPanel();
                            this.createPalette(lastWire);

                            undo.push(lastWire);
                            redo.splice(0, redo.length);
                        }
                    } else {
                        this.customColors[i].setAlpha(1);
                    }
                }
            }
            this.customColorBox.setDepth(6);
            this.customColorAdd.setDepth(6);
            if (this.customColorBox.isOver() || this.customColorAdd.isOver()) {
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.customColorBox.setAlpha(0.5);
                this.opentooltip("Add Custom Color", this.customColorAdd.x, this.customColorAdd.y, 1);
            } else {
                this.customColorBox.setAlpha(1);
            }
            if (this.customColorBox.wasClicked() || this.customColorAdd.wasClicked()) {
                this.clearHTML();
                document.getElementById('flex-box').style.flexDirection = 'row-reverse';
                document.getElementById('input').style.display = 'block';
                document.getElementById('input').focus();
                document.getElementById('label2').innerHTML = "Enter Hex: ";
            }

            this.inputBox();

            if (document.getElementById('input').style.display == 'block') {
                if (this.return.wasPressed()) {
                    var inputValue = document.getElementById('input').value;
                    if (isHexValid(inputValue) != false) {
                        undo.push("customColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        if (customColors.length > 8) {
                            customColors.splice(0, 1);
                        }
                        customColors.push(parseInt(isHexValid(inputValue), 16));
                        this.clearPanel();
                        this.createPalette(lastWire);
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = customColors[customColors.length - 1];
                            selected.push(this.selected[v]);
                            wireColor = customColors[customColors.length - 1];
                        }
                        document.getElementById('input').value = "";

                        undo.push(selected);
                        undo.push(lastWire);
                        redo.splice(0, redo.length);
                    } else {
                        document.getElementById('input').value = "";
                    }
                }
            }

            if (this.panelWireDeleteButton.isOver() || this.panelWireDeleteIcon.isOver() || this.panelWireDeleteText.isOver()) {
                this.panelWireDeleteButton.setAlpha(0.5);
                this.panelWireDeleteIcon.setAlpha(0.5);
                this.panelWireDeleteText.setAlpha(0.5);
                pElement.style.cursor = "url('assets/hand.png'), auto";
            } else {
                this.panelWireDeleteButton.setAlpha(1);
                this.panelWireDeleteIcon.setAlpha(1);
                this.panelWireDeleteText.setAlpha(1);
            }

            if (this.panelWireAddNodeButton.isOver() || this.panelWireAddNodeIcon.isOver() || this.panelWireAddNodeText.isOver()) {
                this.panelWireAddNodeButton.setAlpha(0.5);
                this.panelWireAddNodeIcon.setAlpha(0.5);
                this.panelWireAddNodeText.setAlpha(0.5);
                pElement.style.cursor = "url('assets/hand.png'), auto";
            } else {
                this.panelWireAddNodeButton.setAlpha(1);
                this.panelWireAddNodeIcon.setAlpha(1);
                this.panelWireAddNodeText.setAlpha(1);
            }

            if (this.panelWireDeleteButton.wasClicked() || this.panelWireDeleteIcon.wasClicked() || this.panelWireDeleteText.wasClicked() || (element == null && this.del.wasPressed())) {
                var selectWireGroup;
                for (var v = 0; v < this.nodes.length; v++) {
                    if (nodeLinks[v * 4] == lastWire || (nodeLinks[v * 4] <= -1 && (nodeLinks[(v * 4) + 1] == lastWire || nodeLinks[(v * 4) + 2] == lastWire))) {
                        selectWireGroup = nodeLinks[(v * 4) + 3];
                    }
                }

                var wires = [];
                var nodes = [];
                var points = [];
                for (var v = 0; v < this.nodes.length; v++) {
                    if (nodeLinks[v * 4] >= 0 && nodeLinks[(v * 4) + 3] == selectWireGroup) {
                        if (this.wires[nodeLinks[v * 4]].visible == 1) {
                            this.wires[nodeLinks[v * 4]].setVisible(0);
                            this.wireLines[nodeLinks[v * 4]].setVisible(0);
                            wires.push(nodeLinks[v * 4]);
                        }
                    }
                    if (nodeLinks[v * 4] < -1 && nodeLinks[(v * 4) + 3] == selectWireGroup) {
                        if (this.wires[nodeLinks[(v * 4) + 1]].visible == 1) {
                            this.wires[nodeLinks[(v * 4) + 1]].setVisible(0);
                            this.wireLines[nodeLinks[(v * 4) + 1]].setVisible(0);
                            wires.push(nodeLinks[(v * 4) + 1]);
                        }
                        if (this.wires[nodeLinks[(v * 4) + 2]].visible == 1) {
                            this.wires[nodeLinks[(v * 4) + 2]].setVisible(0);
                            this.wireLines[nodeLinks[(v * 4) + 2]].setVisible(0);
                            wires.push(nodeLinks[(v * 4) + 2]);
                        }
                    }
                    if (nodeLinks[(v * 4) + 3] == selectWireGroup) {
                        if (this.nodes[v].visible == 1) {
                            this.nodes[v].setVisible(0);
                            nodes.push(v);
                        }

                        if (this.objectIDs[nodeLinks[v * 4 + 1]] == 10) {
                            if (this.objects[nodeLinks[v * 4 + 1]].visible == 1) {
                                this.objects[nodeLinks[v * 4 + 1]].setVisible(0);
                                points.push(nodeLinks[v * 4 + 1]);
                            }
                        }
                    }
                }
                undo.push("deletedWire");
                undo.push(wires);
                undo.push(nodes);
                undo.push(points);
                redo.splice(0, redo.length);
                this.clearPanel();
            }
            if (this.panelWireAddNodeButton.wasClicked() || this.panelWireAddNodeIcon.wasClicked() || this.panelWireAddNodeText.wasClicked() || this.w.wasPressed()) {
                var node = this.add.circle((this.wireLines[lastWire].geom.x1 + this.wireLines[lastWire].geom.x2) / 2, (this.wireLines[lastWire].geom.y1 + this.wireLines[lastWire].geom.y2) / 2, 8 * scaleCount, 0xffffff);
                var node2 = this.add.circle((this.wireLines[lastWire].geom.x1 + this.wireLines[lastWire].geom.x2) / 2, (this.wireLines[lastWire].geom.y1 + this.wireLines[lastWire].geom.y2) / 2, 8 * scaleCount, this.wires[lastWire].fillColor);
                node.setDepth(4);
                this.nodes.push(node);
                node2.enableClick();
                node2.enableDrag();
                node2.setDepth(4);
                this.nodes.push(node2);

                var selectWireGroup;
                for (var v = 0; v < this.nodes.length; v++) {
                    if (nodeLinks[v * 4] == lastWire || (nodeLinks[v * 4] <= -1 && nodeLinks[(v * 4) + 2] == lastWire)) {
                        selectWireGroup = nodeLinks[(v * 4) + 3]
                    }
                }
                nodeLinks.push(-3);
                nodeLinks.push(lastWire);
                nodeLinks.push(this.wireLines.length);
                nodeLinks.push(selectWireGroup)
                nodeLinks.push(-2);
                nodeLinks.push(lastWire);
                nodeLinks.push(this.wireLines.length + 1);
                nodeLinks.push(selectWireGroup);
                var obj = this.add.line(this.wireLines[lastWire].geom.x1, this.wireLines[lastWire].geom.y1, node.x, node.y, 0xffffff);
                obj.setLineWidth(3.8 * scaleCount);
                obj.setDepth(3.5);
                var obj2 = this.add.line(this.wireLines[lastWire].geom.x2, this.wireLines[lastWire].geom.y2, node.x, node.y, 0xffffff);
                obj2.setLineWidth(3.8 * scaleCount);
                obj2.setDepth(3.5);
                this.wireLines[lastWire].setVisible(0);
                this.wires[lastWire].setVisible(0);
                this.wireLines.push(obj);
                this.wireLines.push(obj2);
                var obj3 = this.add.rectangle((obj.geom.x1 + obj.geom.x2) / 2, (obj.geom.y1 + obj.geom.y2) / 2, lineWidth, (Math.sqrt(Math.pow(Math.abs(obj.geom.x1 - obj.geom.x2), 2) + Math.pow(Math.abs(obj.geom.y1 - obj.geom.y2), 2))), this.wires[lastWire].fillColor);
                obj3.setAngle(-(Math.atan(Math.abs(obj.geom.x1 - obj.geom.x2) / Math.abs(obj.geom.y1 - obj.geom.y2))) * (180 / Math.PI));
                var obj4 = this.add.rectangle((obj2.geom.x1 + obj2.geom.x2) / 2, (obj2.geom.y1 + obj2.geom.y2) / 2, lineWidth, (Math.sqrt(Math.pow(Math.abs(obj2.geom.x1 - obj2.geom.x2), 2) + Math.pow(Math.abs(obj2.geom.y1 - obj2.geom.y2), 2))), this.wires[lastWire].fillColor);
                obj4.setAngle(-(Math.atan(Math.abs(obj2.geom.x1 - obj2.geom.x2) / Math.abs(obj2.geom.y1 - obj2.geom.y2))) * (180 / Math.PI));
                obj3.enableClick();
                obj3.setDepth(3.5);
                obj4.enableClick();
                obj4.setDepth(3.5);
                this.wires.push(obj3);
                this.wires.push(obj4);

                undo.push("subdividedWire");
                undo.push(this.nodes.length - 2);
                undo.push(nodeLinks.length - 8);
                undo.push(nodeLinks.length - 4);
                redo.splice(0, redo.length);
                this.clearPanel();
            }
            this.wireShortcutKeys(lastWire);
        }
        if (panelType >= 2) {
            var noOther = true;
            for (var v = 0; v < this.objects.length; v++) {
                if (this.objects[v].isOver() && v != lastClicked) {
                    noOther = false;
                }
            }
            for (var v = 0; v < this.wires.length; v++) {
                if (this.wires[v].isOver()) {
                    noOther = false;
                }
            }
            if (panelType == 5 || panelType == 8 || panelType == 15 || panelType == 16 || panelType == 22 || panelType == 45 || panelType == 47) {
                for (var v = 0; v < customObjectColors.length; v++) {
                    if (this.customObjectColors[v].isOver()) {
                        noOther = false;
                    }
                }
            }
            if (this.panelDuplicateButton.isOver() || this.panelDuplicate.isOver()) {
                this.panelDuplicateButton.setAlpha(0.5);
                this.panelDuplicate.setAlpha(0.5);
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.opentooltip("Duplicate [D]", this.panelDuplicate.x, this.panelDuplicate.y, 1);
            } else {
                this.panelDuplicateButton.setAlpha(1);
                this.panelDuplicate.setAlpha(1);
            }
            if (this.panelDeleteButton.isOver() || this.panelDelete.isOver()) {
                this.panelDeleteButton.setAlpha(0.5);
                this.panelDelete.setAlpha(0.5);
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.opentooltip("Delete [BACKSPACE]", this.panelDelete.x, this.panelDelete.y, 1);
            } else {
                this.panelDeleteButton.setAlpha(1);
                this.panelDelete.setAlpha(1);
            }
            if (this.panelEditButton.isOver() || this.panelEdit.isOver()) {
                this.panelEditButton.setAlpha(0.5);
                this.panelEdit.setAlpha(0.5);
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.opentooltip("Open in Part Editor", this.panelEdit.x, this.panelEdit.y, 1);
            } else {
                this.panelEditButton.setAlpha(1);
                this.panelEdit.setAlpha(1);
            }
            if (this.panelInfoButton.isOver() || this.panelInfo.isOver()) {
                this.panelInfoButton.setAlpha(0.5);
                this.panelInfo.setAlpha(0.5);
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.opentooltip("Learn More", this.panelInfo.x, this.panelInfo.y, 1);
            } else {
                this.panelInfoButton.setAlpha(1);
                this.panelInfo.setAlpha(1);
            }

            if (this.panelUpArrow.isOver()) {
                this.panelUpArrow.setAlpha(0.5);
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.opentooltip("Nudge Up [↑]", this.panelUpArrow.x, this.panelUpArrow.y, 1);
            } else {
                this.panelUpArrow.setAlpha(1);
            }
            if (this.panelLeftArrow.isOver()) {
                this.panelLeftArrow.setAlpha(0.5);
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.opentooltip("Nudge Left [←]", this.panelLeftArrow.x, this.panelLeftArrow.y, 1);
            } else {
                this.panelLeftArrow.setAlpha(1);
            }
            if (this.panelRightArrow.isOver()) {
                this.panelRightArrow.setAlpha(0.5);
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.opentooltip("Nudge Right [→]", this.panelRightArrow.x, this.panelRightArrow.y, 1);
            } else {
                this.panelRightArrow.setAlpha(1);
            }
            if (this.panelDownArrow.isOver()) {
                this.panelDownArrow.setAlpha(0.5);
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.opentooltip("Nudge Down [↓]", this.panelDownArrow.x, this.panelDownArrow.y, 1);
            } else {
                this.panelDownArrow.setAlpha(1);
            }
            if (this.panelRotateLeft.isOver()) {
                this.panelRotateLeft.setAlpha(0.5);
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.opentooltip("Rotate CCW [SHIFT+←]", this.panelRotateLeft.x, this.panelRotateLeft.y, 1);
            } else {
                this.panelRotateLeft.setAlpha(1);
            }
            if (this.panelRotateRight.isOver()) {
                this.panelRotateRight.setAlpha(0.5);
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.opentooltip("Rotate CW [SHIFT+→]", this.panelRotateRight.x, this.panelRotateRight.y, 1);
            } else {
                this.panelRotateRight.setAlpha(1);
            }

            if (this.panelBackward.isOver()) {
                this.panelBackward.setAlpha(0.5);
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.opentooltip("Send to Back [SHIFT+↓]", this.panelBackward.x, this.panelBackward.y, 1);
            } else {
                this.panelBackward.setAlpha(1);
            }
            if (this.panelForward.isOver()) {
                this.panelForward.setAlpha(0.5);
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.opentooltip("Bring to Front [SHIFT+↑]", this.panelForward.x, this.panelForward.y, 1);
            } else {
                this.panelForward.setAlpha(1);
            }

            if (this.panelDuplicateButton.wasClicked() || this.panelDuplicate.wasClicked() || (noOther == true && element == null && this.d.wasPressed())) {
                var obj = this.add.sprite(this.objects[lastClicked].x, this.objects[lastClicked].y, `${this.objectIDs[lastClicked]}`, 1);
                for (var v = 0; v < this.objects.length; v++) {
                    if (this.objectIDs[v] == this.objectIDs[lastClicked] && this.objects[v].x == obj.x && this.objects[v].y == obj.y && this.objects[v].visible == 1) {
                        obj.x += deviceWidth * 0.02;
                        obj.y += deviceHeight * 0.04;
                    }
                }
                obj.scale *= (objectsData[this.objectIDs[lastClicked] * 5 + 2]);
                obj.width *= (objectsData[this.objectIDs[lastClicked] * 5 + 2]);
                obj.height *= (objectsData[this.objectIDs[lastClicked] * 5 + 2]);

                obj.scale *= scaleCount;
                obj.width *= scaleCount;
                obj.height *= scaleCount;

                if (rotateAngle[lastClicked] == 1 || rotateAngle[lastClicked] == 3) {
                    var widthHolder = obj.width;
                    obj.width = obj.height;
                    obj.height = widthHolder;
                }

                obj.setAngle(rotateAngle[lastClicked] * 90);

                if (settings[(lastClicked * 2)] != -1 || settings[(lastClicked * 2) + 1] != -1) {
                    if (this.objectIDs[lastClicked] == 3 || this.objectIDs[lastClicked] == 6 || this.objectIDs[lastClicked] == 43 || this.objectIDs[lastClicked] == 45) {
                        obj.setTint(settings[lastClicked * 2]);
                    }
                }

                obj.enableDrag();
                obj.enableClick();
                obj.setDepth(3);

                for (var v = 0; v < this.objects.length; v++) {
                    this.objects[v].depth -= 0.01;
                }
                this.objects.push(obj);
                this.objectIDs.push(this.objectIDs[lastClicked]);

                var labelAvail = -1;
                for (var v = 0; v < defaultLabel.length / 14; v++) {
                    if (defaultLabel[v * 14] == this.objectIDs[this.objectIDs.length - 1]) {
                        labelAvail = v;
                    }
                }
                if (labelAvail != -1) {
                    var labelID = -1;
                    for (var v = 0; v < objectLabelData.length; v++) {
                        if (lastClicked == objectLabelData[v]) {
                            labelID = v;
                        }
                    }
                    var label = this.add.text(this.objects[this.objects.length - 1].x + scaleCount * deviceWidth * defaultLabel[(labelAvail * 14) + 5], this.objects[this.objects.length - 1].y + scaleCount * deviceHeight * defaultLabel[(labelAvail * 14) + 6], this.objectLabels[labelID].text, labelColor);
                    if (defaultLabel[(labelAvail * 14) + 13] == 0xffffff) {
                        label.setFontColor(0xffffff);
                    }
                    if (this.objectIDs[this.objectIDs.length - 1] == 13 || this.objectIDs[this.objectIDs.length - 1] == 14) {
                        if (settings[lastClicked * 2] != -1) {
                            label.setFontColor(settings[lastClicked * 2]);
                        }
                    }
                    label.setOrigin(0.5, 0.5);
                    label.setFontSize(scaleCount * deviceHeight * defaultLabel[(labelAvail * 14) + 2]);
                    label.setDepth(3);
                    this.objectLabels.push(label);
                    objectLabelData.push(this.objects.length - 1);
                }

                rotateAngle.push(rotateAngle[lastClicked]);
                shiftObjects.push(false);
                settings.push(settings[lastClicked * 2]);
                settings.push(settings[(lastClicked * 2) + 1]);

                if (this.objectIDs[lastClicked] == 2) {
                    for (var v = 0; v < resistorData.length / 5; v++) {
                        if (resistorData[v * 5] == lastClicked) {
                            var widthHolder = obj.width;
                            var heightHolder = obj.height;
                            obj.setFrame(resistorData[(v * 5) + 4]);
                            var bar1 = this.add.rectangle(obj.x, obj.y + obj.height * 0.052, obj.width * 0.3, obj.height * 0.055, resistorData[(v * 5) + 3]);
                            var bar2 = this.add.rectangle(obj.x, obj.y - obj.height * 0.057, obj.width * 0.3, obj.height * 0.055, resistorData[(v * 5) + 2]);
                            bar1.setOrigin(0.5, 0.5);
                            bar2.setOrigin(0.5, 0.5);
                            this.resistorBars.push(bar1);
                            this.resistorBars.push(bar2);
                            resistorData.push(this.objects.length - 1);
                            resistorData.push(resistorData[(v * 5) + 1]);
                            resistorData.push(resistorData[(v * 5) + 2]);
                            resistorData.push(resistorData[(v * 5) + 3]);
                            resistorData.push(resistorData[(v * 5) + 4]);
                            obj.width = widthHolder;
                            obj.height = heightHolder;
                        }
                    }
                }

                if (this.objectIDs[lastClicked] == 4 || this.objectIDs[lastClicked] == 12) {
                    var widthHolder = obj.width;
                    var heightHolder = obj.height;
                    obj.setFrame(settings[i * 2]);
                    obj.width = widthHolder;
                    obj.height = heightHolder;
                }

                lastClicked = this.objects.length - 1
                this.clearPanel();
                this.openPanel(this.objects.length - 1);

                undo.push("createdObject");
                undo.push(this.objects.length - 1);
                undo.push(-1);
                undo.push(-1);
                redo.splice(0, redo.length);
            }
            if (this.panelDeleteButton.wasClicked() || this.panelDelete.wasClicked() || (noOther == true && element == null && this.del.wasPressed())) {
                this.initiateDelete(lastClicked);
            }

            if (this.panelEditButton.wasClicked() || this.panelEdit.wasClicked()) {

                wiresDataImport.splice(0, wiresDataImport.length);
                nodesDataImport.splice(0, nodesDataImport.length);
                objectsDataImport.splice(0, objectsDataImport.length);

                wiresDataImport.push(customColors.length);
                for (var v = 0; v < customColors.length; v++) {
                    wiresDataImport.push(customColors[v]);
                }
                if (customColors.length == 0) {
                    wiresDataImport.push("");
                }
                wiresDataImport.push(nodeLinks.length);
                for (var v = 0; v < nodeLinks.length; v++) {
                    wiresDataImport.push(nodeLinks[v]);
                }
                if (nodeLinks.length == 0) {
                    wiresDataImport.push("");
                }
                for (var v = 0; v < this.wires.length; v++) {
                    wiresDataImport.push(this.wires[v].visible);
                    wiresDataImport.push(this.wireLines[v].geom.x1);
                    wiresDataImport.push(this.wireLines[v].geom.y1);
                    wiresDataImport.push(this.wireLines[v].geom.x2);
                    wiresDataImport.push(this.wireLines[v].geom.y2);
                }

                nodesDataImport.push(this.grid.x);
                nodesDataImport.push(this.grid.y);
                for (var v = 0; v < this.nodes.length; v++) {
                    nodesDataImport.push(this.nodes[v].visible);
                    nodesDataImport.push(this.nodes[v].x);
                    nodesDataImport.push(this.nodes[v].y);
                    nodesDataImport.push(this.nodes[v].fillColor);
                }

                objectsDataImport.push(scaleCount);
                objectsDataImport.push(this.objects.length);
                objectsDataImport.push(customObjectColors.length + 3);
                for (var v = 0; v < customObjectColors.length; v++) {
                    objectsDataImport.push(customObjectColors[v]);
                }
                for (var v = 0; v < this.objects.length; v++) {
                    objectsDataImport.push(this.objects[v].visible);
                    objectsDataImport.push(this.objects[v].x);
                    objectsDataImport.push(this.objects[v].y);
                    objectsDataImport.push(this.objectIDs[v]);
                    objectsDataImport.push(rotateAngle[v]);
                    objectsDataImport.push(this.objects[v].depth);
                    objectsDataImport.push(settings[v * 2]);
                    objectsDataImport.push(settings[(v * 2) + 1]);
                    var labelID = -1;
                    for (var t = 0; t < objectLabelData.length; t++) {
                        if (v == objectLabelData[t]) {
                            labelID = t;
                        }
                    }
                    if (labelID != -1) {
                        if (this.objectLabels[labelID].text != "") {
                            objectsDataImport.push(settings[(v * 2) + 1]);
                        }
                    } else {
                        objectsDataImport.push("");
                    }
                }

                for (var i = 0; i < objectsData.length / 5; i++) {
                    wiringXPoints["x" + i].splice(objectsData[(i * 5) + 3], wiringXPoints["x" + i].length - objectsData[(i * 5) + 3]);
                    wiringYPoints["y" + i].splice(objectsData[(i * 5) + 3], wiringYPoints["y" + i].length - objectsData[(i * 5) + 3]);
                }
                for (var i = 0; i < 2; i++) {
                    buttonxPoints["pin" + (i + 1) * 2].splice((i + 1) * 2, buttonxPoints["pin" + (i + 1) * 2].length - (i + 1) * 2);
                    buttonyPoints["pin" + (i + 1) * 2].splice((i + 1) * 2, buttonyPoints["pin" + (i + 1) * 2].length - (i + 1) * 2);
                }
                for (var i = 0; i < 7; i++) {
                    ICxPoints["pin" + (i + 2) * 2].splice((i + 2) * 2, ICxPoints["pin" + (i + 2) * 2].length - (i + 2) * 2);
                    ICyPoints["pin" + (i + 2) * 2].splice((i + 2) * 2, ICyPoints["pin" + (i + 2) * 2].length - (i + 2) * 2);
                }

                xLocationsImport.splice(0, xLocationsImport.length);
                xLocationsImport = wiringXPoints["x" + this.objectIDs[lastClicked]];
                xLocationsImport.splice(objectsData[(this.objectIDs[lastClicked] * 5) + 3], wiringXPoints["x" + this.objectIDs[lastClicked]].length - objectsData[(this.objectIDs[lastClicked] * 5) + 3]);

                yLocationsImport.splice(0, yLocationsImport.length);
                yLocationsImport = wiringYPoints["y" + this.objectIDs[lastClicked]];
                yLocationsImport.splice(objectsData[(this.objectIDs[lastClicked] * 5) + 3], wiringYPoints["y" + this.objectIDs[lastClicked]].length - objectsData[(this.objectIDs[lastClicked] * 5) + 3]);

                objectInfoImport.splice(0, objectInfoImport.length);
                objectInfoImport.push(objectsData[this.objectIDs[lastClicked] * 5 + 0]);
                objectInfoImport.push(objectsData[this.objectIDs[lastClicked] * 5 + 1]);
                objectInfoImport.push(objectsData[this.objectIDs[lastClicked] * 5 + 2]);
                objectInfoImport.push(objectsData[this.objectIDs[lastClicked] * 5 + 3]);
                objectInfoImport.push(objectsData[this.objectIDs[lastClicked] * 5 + 4]);

                workspaceObjectImport = this.objectIDs[lastClicked];

                this.scene.start("PartEditor");
            }

            if (this.panelInfoButton.wasClicked() || this.panelInfo.wasClicked()) {
                window.open(`/object-information/${this.objectIDs[lastClicked]}/info.html`, '_blank');
            }

            if (this.panelUpArrow.wasClicked() || this.panelLeftArrow.wasClicked() || this.panelRightArrow.wasClicked() || this.panelDownArrow.wasClicked() || (!(this.shift.isPressed()) && (this.uparrow.wasPressed() || this.leftarrow.wasPressed() || this.rightarrow.wasPressed() || this.downarrow.wasPressed()))) {
                lastPosition[0] = -lastClicked - 1;
                lastPosition[1] = this.objects[lastClicked].x;
                lastPosition[2] = this.objects[lastClicked].y;
            }

            if (this.panelUpArrow.isClicked() || (noOther == true && this.uparrow.isPressed() && !(this.shift.isPressed()))) {
                this.objects[lastClicked].y -= 0.25;
            }
            if (this.panelLeftArrow.isClicked() || (noOther == true && this.leftarrow.isPressed() && !(this.shift.isPressed()))) {
                this.objects[lastClicked].x -= 0.25;
            }
            if (this.panelRightArrow.isClicked() || (noOther == true && this.rightarrow.isPressed() && !(this.shift.isPressed()))) {
                this.objects[lastClicked].x += 0.25;
            }
            if (this.panelDownArrow.isClicked() || (noOther == true && this.downarrow.isPressed() && !(this.shift.isPressed()))) {
                this.objects[lastClicked].y += 0.25;
            }

            if (this.panelRotateRight.wasClicked() || (noOther == true && this.shift.isPressed() && this.rightarrow.wasPressed())) {
                this.objects[lastClicked].angle += 90;
                rotateAngle[lastClicked]++;
                if (rotateAngle[lastClicked] == 4) {
                    rotateAngle[lastClicked] = 0;
                }
                var widthHolder = this.objects[lastClicked].width;
                this.objects[lastClicked].width = this.objects[lastClicked].height;
                this.objects[lastClicked].height = widthHolder;
                undo.push("rotatedObject");
                undo.push(lastClicked);
                undo.push(-90);
                undo.push(widthHolder);
                redo.splice(0, redo.length);
            }
            if (this.panelRotateLeft.wasClicked() || (noOther == true && this.shift.isPressed() && this.leftarrow.wasPressed())) {
                this.objects[lastClicked].angle -= 90;
                rotateAngle[lastClicked]--;
                if (rotateAngle[lastClicked] == -1) {
                    rotateAngle[lastClicked] = 3;
                }
                var widthHolder = this.objects[lastClicked].width;
                this.objects[lastClicked].width = this.objects[lastClicked].height;
                this.objects[lastClicked].height = widthHolder;
                undo.push("rotatedObject");
                undo.push(lastClicked);
                undo.push(90);
                undo.push(widthHolder);
                redo.splice(0, redo.length);
            }

            if (this.panelBackward.wasClicked() || (noOther == true && this.shift.isPressed() && this.downarrow.wasPressed())) {
                undo.push("arrangedObject");
                undo.push(lastClicked);
                undo.push(this.objects[lastClicked].depth);
                undo.push(-0.01);
                redo.splice(0, redo.length);
                for (var v = 0; v < this.objects.length; v++) {
                    if (this.objects[lastClicked].intersects(this.objects[v]) && v != lastClicked) {
                        this.objects[v].depth += 0.01;

                        var labelID = -1;
                        for (var t = 0; t < objectLabelData.length; t++) {
                            if (v == objectLabelData[t]) {
                                labelID = t;
                            }
                        }
                        if (labelID != -1) {
                            this.objectLabels[labelID].depth += 0.01;
                        }
                    }
                }
                this.objects[lastClicked].setDepth(2);
                var labelID = -1;
                for (var v = 0; v < objectLabelData.length; v++) {
                    if (lastClicked == objectLabelData[v]) {
                        labelID = v;
                    }
                }
                if (labelID != -1) {
                    this.objectLabels[labelID].setDepth(2);
                }
            }
            if (this.panelForward.wasClicked() || (noOther == true && this.shift.isPressed() && this.uparrow.wasPressed())) {
                undo.push("arrangedObject");
                undo.push(lastClicked);
                undo.push(this.objects[lastClicked].depth);
                undo.push(0.01);
                redo.splice(0, redo.length);
                for (var v = 0; v < this.objects.length; v++) {
                    if (this.objects[lastClicked].intersects(this.objects[v]) && v != lastClicked) {
                        this.objects[v].depth -= 0.01;

                        var labelID = -1;
                        for (var t = 0; t < objectLabelData.length; t++) {
                            if (v == objectLabelData[t]) {
                                labelID = t;
                            }
                        }
                        if (labelID != -1) {
                            this.objectLabels[labelID].depth -= 0.01;
                        }
                    }
                }
                this.objects[lastClicked].setDepth(3);
                var labelID = -1;
                for (var v = 0; v < objectLabelData.length; v++) {
                    if (lastClicked == objectLabelData[v]) {
                        labelID = v;
                    }
                }
                if (labelID != -1) {
                    this.objectLabels[labelID].setDepth(3);
                }
            }
        }
        if (panelType == -2) {
            for (var v = 0; v < this.selectItems.length / 2; v++) {
                if (this.selectItems[v * 2].isOver() || this.selectItems[v * 2 + 1].isOver()) {
                    pElement.style.cursor = "url('assets/hand.png'), auto";
                    this.selectItems[v * 2].setAlpha(0.5);
                    if (this.shiftSelect[v * 2] == 1) {
                        this.objects[this.shiftSelect[v * 2 + 1]].setAlpha(0.7);
                        if (this.objectIDs[this.shiftSelect[v * 2 + 1]] == 13 || this.objectIDs[this.shiftSelect[v * 2 + 1]] == 14) {
                            var labelID = -1;
                            for (var t = 0; t < objectLabelData.length; t++) {
                                if (objectLabelData[t] == this.shiftSelect[v * 2 + 1]) {
                                    labelID = t;
                                }
                            }
                            if (labelID != -1) {
                                this.objectLabels[labelID].setAlpha(0.7);
                            }
                        }

                        if (this.del.wasPressed()) {
                            this.initiateDelete(this.shiftSelect[v * 2 + 1]);
                            selectedMode = false;
                            boxMode = false;
                        }
                        if (this.d.wasPressed()) {
                            var obj = this.add.sprite(this.objects[i].x, this.objects[i].y, `${this.objectIDs[this.shiftSelect[v * 2 + 1]]}`, 1);
                            for (var t = 0; t < this.objects.length; t++) {
                                if (this.objectIDs[t] == this.objectIDs[this.shiftSelect[v * 2 + 1]] && this.objects[t].x == obj.x && this.objects[t].y == obj.y && this.objects[t].visible == 1) {
                                    obj.x += deviceWidth * 0.02;
                                    obj.y += deviceHeight * 0.04;
                                }
                            }
                            obj.scale *= (objectsData[this.objectIDs[this.shiftSelect[v * 2 + 1]] * 5 + 2]);
                            obj.width *= (objectsData[this.objectIDs[this.shiftSelect[v * 2 + 1]] * 5 + 2]);
                            obj.height *= (objectsData[this.objectIDs[this.shiftSelect[v * 2 + 1]] * 5 + 2]);

                            obj.scale *= scaleCount;
                            obj.width *= scaleCount;
                            obj.height *= scaleCount;

                            if (rotateAngle[this.shiftSelect[v * 2 + 1]] == 1 || rotateAngle[this.shiftSelect[v * 2 + 1]] == 3) {
                                var widthHolder = obj.width;
                                obj.width = obj.height;
                                obj.height = widthHolder;
                            }

                            obj.setAngle(rotateAngle[this.shiftSelect[v * 2 + 1]] * 90);

                            if (settings[(this.shiftSelect[v * 2 + 1] * 2)] != -1 || settings[(this.shiftSelect[v * 2 + 1] * 2) + 1] != -1) {
                                if (this.objectIDs[this.shiftSelect[v * 2 + 1]] == 3 || this.objectIDs[this.shiftSelect[v * 2 + 1]] == 6) {
                                    obj.setTint(settings[this.shiftSelect[v * 2 + 1] * 2]);
                                }
                            }

                            obj.enableDrag();
                            obj.enableClick();
                            obj.setDepth(3);
                            for (var t = 0; t < this.objects.length; t++) {
                                this.objects[t].depth -= 0.01;
                            }
                            this.objects.push(obj);
                            this.objectIDs.push(this.objectIDs[this.shiftSelect[v * 2 + 1]]);

                            var labelAvail = -1;
                            for (var t = 0; t < defaultLabel.length / 14; t++) {
                                if (defaultLabel[t * 14] == this.objectIDs[this.shiftSelect[v * 2 + 1]]) {
                                    labelAvail = t;
                                }
                            }
                            if (labelAvail != -1) {
                                var labelID = -1;
                                for (var t = 0; t < objectLabelData.length; t++) {
                                    if (this.shiftSelect[v * 2 + 1] == objectLabelData[t]) {
                                        labelID = t;
                                    }
                                }
                                var label = this.add.text(this.objects[this.objects.length - 1].x + scaleCount * deviceWidth * defaultLabel[(labelAvail * 14) + 5], this.objects[this.objects.length - 1].y + scaleCount * deviceHeight * defaultLabel[(labelAvail * 14) + 6], this.objectLabels[labelID].text, labelColor);
                                if (defaultLabel[(labelAvail * 14) + 13] == 0xffffff) {
                                    label.setFontColor(0xffffff);
                                }
                                label.setOrigin(0.5, 0.5);
                                label.setFontSize(scaleCount * deviceHeight * defaultLabel[(labelAvail * 14) + 2]);
                                label.setDepth(3);
                                this.objectLabels.push(label);
                                objectLabelData.push(this.objects.length - 1);
                            }
                            rotateAngle.push(rotateAngle[this.shiftSelect[v * 2 + 1]]);
                            shiftObjects.push(false);
                            settings.push(settings[this.shiftSelect[v * 2 + 1] * 2]);
                            settings.push(settings[(this.shiftSelect[v * 2 + 1] * 2) + 1]);

                            if (this.objectIDs[this.shiftSelect[v * 2 + 1]] == 2) {
                                for (var t = 0; t < resistorData.length / 5; t++) {
                                    if (resistorData[t * 5] == i) {
                                        var widthHolder = obj.width;
                                        var heightHolder = obj.height;
                                        obj.setFrame(resistorData[(t * 5) + 4]);
                                        var bar1 = this.add.rectangle(obj.x, obj.y + obj.height * 0.052, obj.width * 0.3, obj.height * 0.055, resistorData[(t * 5) + 3]);
                                        var bar2 = this.add.rectangle(obj.x, obj.y - obj.height * 0.057, obj.width * 0.3, obj.height * 0.055, resistorData[(t * 5) + 2]);
                                        bar1.setOrigin(0.5, 0.5);
                                        bar2.setOrigin(0.5, 0.5);
                                        this.resistorBars.push(bar1);
                                        this.resistorBars.push(bar2);
                                        resistorData.push(this.objects.length - 1);
                                        resistorData.push(resistorData[(t * 5) + 1]);
                                        resistorData.push(resistorData[(t * 5) + 2]);
                                        resistorData.push(resistorData[(t * 5) + 3]);
                                        resistorData.push(resistorData[(t * 5) + 4]);
                                        obj.width = widthHolder;
                                        obj.height = heightHolder;
                                    }
                                }
                            }

                            lastClicked = this.objects.length - 1;
                            this.clearPanel();
                            this.openPanel(this.objects.length - 1);

                            undo.push("createdObject");
                            undo.push(this.objects.length - 1);
                            undo.push(-1);
                            undo.push(-1);
                            redo.splice(0, redo.length);

                            selectedMode = false;
                            boxMode = false;
                        }
                        if (!(this.shift.isPressed())) {
                            if (this.rightarrow.wasPressed() || this.leftarrow.wasPressed() || this.uparrow.wasPressed() || this.downarrow.wasPressed()) {
                                lastPosition[0] = -this.shiftSelect[v * 2 + 1] - 1;
                                lastPosition[1] = this.objects[this.shiftSelect[v * 2 + 1]].x;
                                lastPosition[2] = this.objects[this.shiftSelect[v * 2 + 1]].y;
                            }
                            if (this.rightarrow.isPressed()) {
                                this.objects[this.shiftSelect[v * 2 + 1]].x += 0.25;
                            }
                            if (this.leftarrow.isPressed()) {
                                this.objects[this.shiftSelect[v * 2 + 1]].x -= 0.25;
                            }
                            if (this.uparrow.isPressed()) {
                                this.objects[this.shiftSelect[v * 2 + 1]].y -= 0.25;
                            }
                            if (this.downarrow.isPressed()) {
                                this.objects[this.shiftSelect[v * 2 + 1]].y += 0.25;
                            }
                        } else {
                            if (this.rightarrow.wasPressed()) {
                                this.objects[this.shiftSelect[v * 2 + 1]].angle += 90;
                                rotateAngle[this.shiftSelect[v * 2 + 1]]++;
                                if (rotateAngle[this.shiftSelect[v * 2 + 1]] == 4) {
                                    rotateAngle[this.shiftSelect[v * 2 + 1]] = 0;
                                }
                                var widthHolder = this.objects[this.shiftSelect[v * 2 + 1]].width;
                                this.objects[this.shiftSelect[v * 2 + 1]].width = this.objects[this.shiftSelect[v * 2 + 1]].height;
                                this.objects[this.shiftSelect[v * 2 + 1]].height = widthHolder;
                                undo.push("rotatedObject");
                                undo.push(this.shiftSelect[v * 2 + 1]);
                                undo.push(-90);
                                undo.push(widthHolder);
                                redo.splice(0, redo.length);
                            }
                            if (this.leftarrow.wasPressed()) {
                                this.objects[this.shiftSelect[v * 2 + 1]].angle -= 90;
                                rotateAngle[this.shiftSelect[v * 2 + 1]]--;
                                if (rotateAngle[this.shiftSelect[v * 2 + 1]] == -1) {
                                    rotateAngle[this.shiftSelect[v * 2 + 1]] = 3;
                                }
                                var widthHolder = this.objects[this.shiftSelect[v * 2 + 1]].width;
                                this.objects[this.shiftSelect[v * 2 + 1]].width = this.objects[this.shiftSelect[v * 2 + 1]].height;
                                this.objects[this.shiftSelect[v * 2 + 1]].height = widthHolder;
                                undo.push("rotatedObject");
                                undo.push(this.shiftSelect[v * 2 + 1]);
                                undo.push(90);
                                undo.push(widthHolder);
                                redo.splice(0, redo.length);
                            }
                            if (this.downarrow.wasPressed() && this.objects[this.shiftSelect[v * 2 + 1]].depth != 2) {
                                undo.push("arrangedObject");
                                undo.push(this.shiftSelect[v * 2 + 1]);
                                undo.push(this.objects[this.shiftSelect[v * 2 + 1]].depth);
                                undo.push(-0.01);
                                redo.splice(0, redo.length);
                                for (var t = 0; t < this.objects.length; t++) {
                                    if (this.objects[this.shiftSelect[v * 2 + 1]].intersects(this.objects[t]) && t != this.shiftSelect[v * 2 + 1]) {
                                        this.objects[t].depth += 0.01;

                                        var labelID = -1;
                                        for (var z = 0; z < objectLabelData.length; z++) {
                                            if (t == objectLabelData[z]) {
                                                labelID = z;
                                            }
                                        }
                                        if (labelID != -1) {
                                            this.objectLabels[labelID].depth += 0.01;
                                        }
                                    }
                                }
                                this.objects[this.shiftSelect[v * 2 + 1]].setDepth(2);

                                var labelID = -1;
                                for (var t = 0; t < objectLabelData.length; t++) {
                                    if (this.shiftSelect[v * 2 + 1] == objectLabelData[t]) {
                                        labelID = t;
                                    }
                                }
                                if (labelID != -1) {
                                    this.objectLabels[labelID].setDepth(2);
                                }
                            }
                            if (this.uparrow.wasPressed() && this.objects[this.shiftSelect[v * 2 + 1]].depth != 3) {
                                undo.push("arrangedObject");
                                undo.push(this.shiftSelect[v * 2 + 1]);
                                undo.push(this.objects[this.shiftSelect[v * 2 + 1]].depth);
                                undo.push(0.01);
                                redo.splice(0, redo.length);
                                for (var t = 0; t < this.objects.length; t++) {
                                    if (this.objects[this.shiftSelect[v * 2 + 1]].intersects(this.objects[t]) && t != this.shiftSelect[v * 2 + 1]) {
                                        this.objects[t].depth -= 0.01;

                                        var labelID = -1;
                                        for (var z = 0; z < objectLabelData.length; z++) {
                                            if (t == objectLabelData[z]) {
                                                labelID = z;
                                            }
                                        }
                                        if (labelID != -1) {
                                            this.objectLabels[labelID].depth -= 0.01;
                                        }
                                    }
                                }
                                this.objects[this.shiftSelect[v * 2 + 1]].setDepth(3);

                                var labelID = -1;
                                for (var t = 0; t < objectLabelData.length; t++) {
                                    if (this.shiftSelect[v * 2 + 1] == objectLabelData[t]) {
                                        labelID = t;
                                    }
                                }
                                if (labelID != -1) {
                                    this.objectLabels[labelID].setDepth(3);
                                }
                            }
                        }
                    } else {
                        this.wires[this.shiftSelect[v * 2 + 1]].setAlpha(0.7);

                        if (this.w.wasPressed()) {
                            var node = this.add.circle((this.wireLines[this.shiftSelect[v * 2 + 1]].geom.x1 + this.wireLines[this.shiftSelect[v * 2 + 1]].geom.x2) / 2, (this.wireLines[this.shiftSelect[v * 2 + 1]].geom.y1 + this.wireLines[this.shiftSelect[v * 2 + 1]].geom.y2) / 2, 8 * scaleCount, 0xffffff);
                            var node2 = this.add.circle((this.wireLines[this.shiftSelect[v * 2 + 1]].geom.x1 + this.wireLines[this.shiftSelect[v * 2 + 1]].geom.x2) / 2, (this.wireLines[this.shiftSelect[v * 2 + 1]].geom.y1 + this.wireLines[this.shiftSelect[v * 2 + 1]].geom.y2) / 2, 8 * scaleCount, this.wires[this.shiftSelect[v * 2 + 1]].fillColor);

                            node.setDepth(4);
                            this.nodes.push(node);
                            node2.enableClick();
                            node2.enableDrag();
                            node2.setDepth(4);
                            this.nodes.push(node2);
                            var selectWireGroup;
                            for (var t = 0; t < this.nodes.length; t++) {
                                if (nodeLinks[t * 4] == this.shiftSelect[v * 2 + 1] || (nodeLinks[t * 4] <= -1 && nodeLinks[(t * 4) + 2] == this.shiftSelect[v * 2 + 1])) {
                                    selectWireGroup = nodeLinks[(t * 4) + 3]
                                }
                            }
                            nodeLinks.push(-3);
                            nodeLinks.push(this.shiftSelect[v * 2 + 1]);
                            nodeLinks.push(this.wireLines.length);
                            nodeLinks.push(selectWireGroup)
                            nodeLinks.push(-2);
                            nodeLinks.push(this.shiftSelect[v * 2 + 1]);
                            nodeLinks.push(this.wireLines.length + 1);
                            nodeLinks.push(selectWireGroup);
                            var obj = this.add.line(this.wireLines[this.shiftSelect[v * 2 + 1]].geom.x1, this.wireLines[this.shiftSelect[v * 2 + 1]].geom.y1, node.x, node.y, 0xffffff);
                            obj.setLineWidth(3.8 * scaleCount);
                            obj.setDepth(3.5);
                            var obj2 = this.add.line(this.wireLines[this.shiftSelect[v * 2 + 1]].geom.x2, this.wireLines[this.shiftSelect[v * 2 + 1]].geom.y2, node.x, node.y, 0xffffff);
                            obj2.setLineWidth(3.8 * scaleCount);
                            obj2.setDepth(3.5);
                            this.wireLines[this.shiftSelect[v * 2 + 1]].setVisible(0);
                            this.wires[this.shiftSelect[v * 2 + 1]].setVisible(0);
                            this.wireLines.push(obj);
                            this.wireLines.push(obj2);
                            var obj3 = this.add.rectangle((obj.geom.x1 + obj.geom.x2) / 2, (obj.geom.y1 + obj.geom.y2) / 2, lineWidth, (Math.sqrt(Math.pow(Math.abs(obj.geom.x1 - obj.geom.x2), 2) + Math.pow(Math.abs(obj.geom.y1 - obj.geom.y2), 2))), this.wires[this.shiftSelect[v * 2 + 1]].fillColor);
                            obj3.setAngle(-(Math.atan(Math.abs(obj.geom.x1 - obj.geom.x2) / Math.abs(obj.geom.y1 - obj.geom.y2))) * (180 / Math.PI));
                            var obj4 = this.add.rectangle((obj2.geom.x1 + obj2.geom.x2) / 2, (obj2.geom.y1 + obj2.geom.y2) / 2, lineWidth, (Math.sqrt(Math.pow(Math.abs(obj2.geom.x1 - obj2.geom.x2), 2) + Math.pow(Math.abs(obj2.geom.y1 - obj2.geom.y2), 2))), this.wires[this.shiftSelect[v * 2 + 1]].fillColor);
                            obj4.setAngle(-(Math.atan(Math.abs(obj2.geom.x1 - obj2.geom.x2) / Math.abs(obj2.geom.y1 - obj2.geom.y2))) * (180 / Math.PI));
                            obj3.enableClick();
                            obj3.setDepth(3.5);
                            obj4.enableClick();
                            obj4.setDepth(3.5);
                            this.wires.push(obj3);
                            this.wires.push(obj4);

                            undo.push("subdividedWire");
                            undo.push(this.nodes.length - 2);
                            undo.push(nodeLinks.length - 8);
                            undo.push(nodeLinks.length - 4);
                            redo.splice(0, redo.length);

                            selectedMode = false;
                            boxMode = false;

                            this.clearPanel();
                        }
                        this.wireShortcutKeys(this.shiftSelect[v * 2 + 1]);
                    }
                } else {
                    this.selectItems[v * 2].setAlpha(1);
                    if (this.objectIDs[this.shiftSelect[v * 2 + 1]] == 13 || this.objectIDs[this.shiftSelect[v * 2 + 1]] == 14) {
                        var labelID = -1;
                        for (var t = 0; t < objectLabelData.length; t++) {
                            if (objectLabelData[t] == this.shiftSelect[v * 2 + 1]) {
                                labelID = t;
                            }
                        }
                        if (labelID != -1) {
                            this.objectLabels[labelID].setAlpha(1);
                        }
                    }
                    if (this.shiftSelect[v * 2] == 1) {
                        this.objects[this.shiftSelect[v * 2 + 1]].setAlpha(1);
                    } else {
                        this.wires[this.shiftSelect[v * 2 + 1]].setAlpha(1);
                    }
                }
                if (this.selectItems[v * 2].wasClicked() || this.selectItems[v * 2 + 1].wasClicked()) {
                    this.clearPanel();
                    selectedMode = false;
                    boxMode = false;
                    if (this.shiftSelect[v * 2] == 1) {
                        this.openPanel(this.shiftSelect[v * 2 + 1]);
                        lastClicked = this.shiftSelect[v * 2 + 1];
                    } else {
                        this.createPalette();
                        lastClicked = this.shiftSelect[v * 2 + 1];
                    }
                }
            }
        }
        if (panelType == 4) {
            if (this.panelResistanceValueBox.isOver() || this.panelResistanceValue.isOver()) {
                this.panelResistanceValueBox.setAlpha(0.5);
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.opentooltip("Edit Resistance", this.panelResistanceValue.x, this.panelResistanceValue.y, 1);
            } else {
                this.panelResistanceValueBox.setAlpha(1);
            }
            if (this.panelResistanceUnitBox.isOver() || this.panelResistanceUnit.isOver()) {
                this.panelResistanceUnitBox.setAlpha(0.5);
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.opentooltip("Change Unit", this.panelResistanceUnit.x, this.panelResistanceUnit.y, 1);
            } else {
                this.panelResistanceUnitBox.setAlpha(1);
            }
            if (this.panelResistanceValueBox.wasClicked() || this.panelResistanceValue.wasClicked()) {
                this.clearHTML();
                document.getElementById('flex-box').style.flexDirection = 'row-reverse';
                document.getElementById('input').style.display = 'block';
                document.getElementById('input').focus();
                document.getElementById('label2').innerHTML = "Enter Resistance Value: ";
            }
            if (this.panelResistanceUnitBox.wasClicked() || this.panelResistanceUnit.wasClicked()) {
                this.clearHTML();
                document.getElementById('flex-box').style.flexDirection = 'row-reverse';
                document.getElementById('label3').innerHTML = "Choose Ohm Unit: "
                document.getElementById('dropdown').style.display = 'block';
                document.getElementById('dropdown').focus();
                document.getElementById('option1').style.display = "block"
                document.getElementById('option2').value = "Ω";
                document.getElementById('option2').innerHTML = "Ω";
                document.getElementById('option2').style.display = "block";
                document.getElementById('option3').value = "KΩ";
                document.getElementById('option3').innerHTML = "KΩ";
                document.getElementById('option3').style.display = "block";
                document.getElementById('option4').value = "MΩ";
                document.getElementById('option4').innerHTML = "MΩ";
                document.getElementById('option4').style.display = "block";
                document.getElementById('option5').style.display = 'none';
            }

            this.inputBox();

            if (document.getElementById('input').style.display == 'block') {
                ``
                if (this.return.wasPressed()) {

                    function isResistanceValid(input) {
                        input = input.replace(/\s/g, '');
                        let result = /^\d+$/.test(input);
                        if (input == "" || input == 0) {
                            return false;
                        }
                        if (result == true) {
                            return [input, "o"];
                        } else {
                            let inputValue = input.slice(0, -1);
                            if (inputValue == "" || input == 0) {
                                return false;
                            }
                            result = /^\d+$/.test(inputValue);
                            if (result == true) {
                                var unit = input.charAt(input.length - 1);
                                if (unit == "k" || unit == "m") {
                                    return [inputValue, unit];
                                } else {
                                    return [inputValue, "o"];
                                }
                            }
                        }
                    }

                    if (isResistanceValid(document.getElementById('input').value) != false) {
                        var previousResistanceData = [];
                        var previousSettings = [settings[lastClicked * 2], settings[(lastClicked * 2) + 1]];

                        var resistorValue = isResistanceValid(document.getElementById('input').value)[0];
                        if (isResistanceValid(document.getElementById('input').value)[1] == "o") {
                            this.panelResistanceUnit.setText("Ω");
                            settings[(lastClicked * 2) + 1] = "Ω";
                        }
                        if (isResistanceValid(document.getElementById('input').value)[1] == "k") {
                            this.panelResistanceUnit.setText("KΩ");
                            settings[(lastClicked * 2) + 1] = "KΩ";
                        }
                        if (isResistanceValid(document.getElementById('input').value)[1] == "m") {
                            this.panelResistanceUnit.setText("MΩ");
                            settings[(lastClicked * 2) + 1] = "MΩ";
                        }

                        if (settings[(lastClicked * 2) + 1] == "KΩ") {
                            resistorValue *= 1000;
                        }
                        if (settings[(lastClicked * 2) + 1] == "MΩ") {
                            resistorValue *= 1000000;
                        }

                        var stepBack = false;
                        if (resistorValue <= 99000000000) {
                            undo.push("resistanceValue");

                            for (var v = 0; v < resistorData.length / 5; v++) {
                                if (resistorData[v * 5] == lastClicked) {
                                    if (resistorValue != resistorData[(v * 5) + 1]) {
                                        undo.push(v);
                                        previousResistanceData = [resistorData[v * 5], resistorData[(v * 5) + 1], resistorData[(v * 5) + 2], resistorData[(v * 5) + 3], resistorData[(v * 5) + 4]];

                                        resistorData[(v * 5) + 1] = resistorValue;

                                        for (var t = -1; t < 11; t++) {
                                            if (resistorData[(v * 5) + 1] / Math.pow(10, t) >= 1) {
                                                this.resistorBars[(v * 2) + 1].fillColor = resistorColors[t];
                                                resistorData[(v * 5) + 2] = resistorColors[t];
                                            }
                                        }

                                        var widthHolder = this.objects[resistorData[v * 5]].width;
                                        var heightHolder = this.objects[resistorData[v * 5]].height;
                                        for (var t = 10; t >= 0; t--) {
                                            if ((resistorValue / Math.pow(10, t)) - Math.trunc(resistorValue / Math.pow(10, t)) != 0 && (resistorValue / Math.pow(10, t)) < 10) {
                                                var truncatedResistance = Math.trunc((resistorValue / Math.pow(10, t)) * 10) / 10;
                                                this.objects[resistorData[v * 5]].setFrame(Math.trunc(truncatedResistance));
                                                this.resistorBars[v * 2].fillColor = resistorColors[Math.round(-10 * (Math.trunc(truncatedResistance) - truncatedResistance) + 1)];
                                                resistorData[(v * 5) + 4] = Math.trunc(Math.trunc(truncatedResistance));
                                                resistorData[(v * 5) + 3] = resistorColors[Math.round(-10 * (Math.trunc(truncatedResistance) - truncatedResistance) + 1)];
                                            }
                                            if ((resistorValue / Math.pow(10, t)) - Math.trunc(resistorValue / Math.pow(10, t)) == 0 && (resistorValue / Math.pow(10, t)) < 10) {
                                                this.objects[resistorData[v * 5]].setFrame(Math.trunc(resistorValue / Math.pow(10, t)));
                                                this.resistorBars[v * 2].fillColor = resistorColors[1];
                                                resistorData[(v * 5) + 4] = Math.trunc(resistorValue / Math.pow(10, t));
                                                resistorData[(v * 5) + 3] = resistorColors[1];
                                            }
                                        }
                                        this.objects[resistorData[v * 5]].width = widthHolder;
                                        this.objects[resistorData[v * 5]].height = heightHolder;
                                    } else {
                                        stepBack = true;
                                    }
                                }
                            }

                            if (settings[(lastClicked * 2) + 1] == "KΩ" || isResistanceValid(document.getElementById('input').value)[1] == "k") {
                                resistorValue /= 1000;
                            }
                            if (settings[(lastClicked * 2) + 1] == "MΩ" || isResistanceValid(document.getElementById('input').value)[1] == "m") {
                                resistorValue /= 1000000;
                            }

                            this.panelResistanceValue.setText(resistorValue);
                            if (document.getElementById('input').value.length > 7) {
                                this.panelResistanceValue.setFontSize(7 / (document.getElementById('input').value.length) * deviceHeight * 0.04);
                            } else {
                                this.panelResistanceValue.setFontSize(deviceHeight * 0.04);
                            }
                            settings[lastClicked * 2] = isResistanceValid(document.getElementById('input').value)[0];

                            this.clearHTML();

                            if (stepBack == false) {
                                undo.push(previousResistanceData);
                                undo.push(previousSettings);
                                redo.splice(0, redo.length);
                            } else {
                                undo.splice(undo.length - 1, 1);
                            }
                        } else {
                            document.getElementById('input').value = "";
                        }
                    } else {
                        document.getElementById('input').value = "";
                    }
                }
            }
            if (document.getElementById('dropdown').value == "Ω" || document.getElementById('dropdown').value == "KΩ" || document.getElementById('dropdown').value == "MΩ") {
                var previousResistanceData = [];
                var previousSettings = [settings[lastClicked * 2], settings[(lastClicked * 2) + 1]];

                var resistorValue = settings[(lastClicked * 2)];
                if ((settings[(lastClicked * 2) + 1] == "KΩ" || document.getElementById('dropdown').value == "KΩ") && (document.getElementById('dropdown').value != "MΩ")) {
                    resistorValue *= 1000;
                }
                if ((settings[(lastClicked * 2) + 1] == "MΩ" || document.getElementById('dropdown').value == "MΩ") && (document.getElementById('dropdown').value != "KΩ")) {
                    resistorValue *= 1000000;
                }

                var stepBack = false;
                if (resistorValue <= 99000000000) {
                    undo.push("resistanceValue");

                    for (var v = 0; v < resistorData.length / 5; v++) {
                        if (resistorData[v * 5] == lastClicked) {
                            if (resistorValue != resistorData[(v * 5) + 1]) {
                                undo.push(v);
                                previousResistanceData = [resistorData[v * 5], resistorData[(v * 5) + 1], resistorData[(v * 5) + 2], resistorData[(v * 5) + 3], resistorData[(v * 5) + 4]];

                                resistorData[(v * 5) + 1] = resistorValue;
                                for (var t = -1; t < 11; t++) {
                                    if (resistorData[(v * 5) + 1] / Math.pow(10, t) >= 1) {
                                        this.resistorBars[(v * 2) + 1].fillColor = resistorColors[t];
                                        resistorData[(v * 5) + 2] = resistorColors[t];
                                    }
                                }
                            } else {
                                stepBack = true;
                            }
                        }
                    }

                    this.panelResistanceUnit.setText(document.getElementById('dropdown').value);
                    settings[(lastClicked * 2) + 1] = document.getElementById('dropdown').value;
                    this.clearHTML();

                    if (stepBack == false) {
                        undo.push(previousResistanceData);
                        undo.push(previousSettings);
                        redo.splice(0, redo.length);
                    } else {
                        undo.splice(undo.length - 1, 1);
                    }
                } else {
                    document.getElementById('dropdown').value = "";
                }
            }
        }
        if (panelType == 5 || panelType == 8 || panelType == 15 || panelType == 16 || panelType == 22 || panelType == 45 || panelType == 47) {
            if (this.customObjectColors.length > 0) {
                for (var i = 0; i < this.customObjectColors.length; i++) {
                    this.customObjectColors[i].setDepth(6);
                    if (this.customObjectColors[i].wasClicked()) {
                        if (panelType == 15 || panelType == 16) {
                            undo.push("customLabelColor");
                            if (settings[lastClicked * 2] != -1) {
                                undo.push(settings[lastClicked * 2]);
                            } else {
                                undo.push(0x000000);
                            }
                            var labelID = -1;
                            for (var v = 0; v < objectLabelData.length; v++) {
                                if (lastClicked == objectLabelData[v]) {
                                    labelID = v;
                                }
                            }
                            this.objectLabels[labelID].setFontColor(customObjectColors[i]);
                        } else {
                            undo.push("customObjectColor");
                            undo.push(settings[lastClicked * 2]);
                            this.objects[lastClicked].setTint(customObjectColors[i]);
                        }
                        settings[lastClicked * 2] = customObjectColors[i];
                        undo.push(lastClicked);
                        undo.push(i);
                        redo.splice(0, redo.length);
                    }
                    if (this.customObjectColors[i].isOver()) {
                        pElement.style.cursor = "url('assets/hand.png'), auto";
                        this.customObjectColors[i].setAlpha(0.5);
                        if (this.del.wasPressed()) {
                            undo.push("deletedCustomObjectColor");
                            undo.push(customObjectColors[i]);
                            customObjectColors.splice(i, 1);
                            redo.splice(0, redo.length);

                            this.clearPanel();
                            this.openPanel(lastClicked);

                            undo.push(i);
                            undo.push(lastClicked);
                        }
                    } else {
                        this.customObjectColors[i].setAlpha(1);
                    }
                }
            }
            this.customObjectColorBox.setDepth(6);
            this.customObjectColorAdd.setDepth(6);
            if (this.customObjectColorBox.isOver() || this.customObjectColorAdd.isOver()) {
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.customObjectColorBox.setAlpha(0.5);
                this.opentooltip("Add Custom Color", this.customObjectColorAdd.x, this.customObjectColorAdd.y, 1);
            } else {
                this.customObjectColorBox.setAlpha(1);
            }
            if (this.customObjectColorBox.wasClicked() || this.customObjectColorAdd.wasClicked()) {
                document.getElementById('flex-box').style.flexDirection = 'row-reverse';
                document.getElementById('input').value = "";
                document.getElementById('input').style.display = 'block';
                document.getElementById('input').focus();
                document.getElementById('label2').innerHTML = "Enter Hex: ";
            }

            this.inputBox();

            if (document.getElementById('input').style.display == 'block' && document.getElementById('label2').innerHTML == "Enter Hex: ") {
                if (this.return.wasPressed()) {
                    var inputValue = document.getElementById('input').value;
                    if (isHexValid(inputValue) != false) {
                        if (panelType == 15 || panelType == 16) {
                            undo.push("customLabelColor");
                            if (settings[lastClicked * 2] != -1) {
                                undo.push(settings[lastClicked * 2]);
                            } else {
                                undo.push(0x000000);
                            }
                            if (customObjectColors.length > 8) {
                                customObjectColors.splice(0, 1);
                            }
                            customObjectColors.push(parseInt(isHexValid(inputValue), 16));
                            this.clearPanel();
                            this.openPanel(lastClicked);
                            var labelID = -1;
                            for (var v = 0; v < objectLabelData.length; v++) {
                                if (lastClicked == objectLabelData[v]) {
                                    labelID = v;
                                }
                            }
                            this.objectLabels[labelID].setFontColor(customObjectColors[customObjectColors.length - 1]);
                            settings[lastClicked * 2] = customObjectColors[customObjectColors.length - 1];
                            this.clearHTML();

                            undo.push(lastClicked);
                            undo.push(customObjectColors.length - 1);
                            redo.splice(0, redo.length);
                        } else {
                            undo.push("customObjectColor");
                            undo.push(settings[lastClicked * 2]);
                            if (customObjectColors.length > 8) {
                                customObjectColors.splice(0, 1);
                            }
                            customObjectColors.push(parseInt(isHexValid(inputValue), 16));
                            this.clearPanel();
                            this.openPanel(lastClicked);
                            this.objects[lastClicked].setTint(customObjectColors[customObjectColors.length - 1]);
                            settings[lastClicked * 2] = customObjectColors[customObjectColors.length - 1];
                            this.clearHTML();

                            undo.push(lastClicked);
                            undo.push(customObjectColors.length - 1);
                            redo.splice(0, redo.length);
                        }
                    } else {
                        document.getElementById('input').value = "";
                    }
                }
            }
        }
        if (panelType == 6) {
            this.panelPinMore.setAlpha(0.5);
            this.panelPinLess.setAlpha(0.5);

            if (this.panelPinMore.isOver()) {
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.panelPinMore.setAlpha(0.5);
            } else {
                if (this.panelPinAmount.text < 4) {
                    this.panelPinMore.setAlpha(1);
                }
            }

            if (this.panelPinLess.isOver()) {
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.panelPinLess.setAlpha(0.5);
            } else {
                if (this.panelPinAmount.text > 2) {
                    this.panelPinLess.setAlpha(1);
                }
            }

            if (this.panelPinMore.wasClicked()) {
                if (this.panelPinAmount.text < 4) {
                    this.panelPinAmount.setText(((settings[lastClicked * 2] + 1) * 2) + 2);
                    settings[lastClicked * 2]++;
                    var widthHolder = this.objects[lastClicked].width;
                    var heightHolder = this.objects[lastClicked].height;
                    this.objects[lastClicked].setFrame(settings[lastClicked * 2]);
                    this.objects[lastClicked].width = widthHolder;
                    this.objects[lastClicked].height = heightHolder;
                }
            }

            if (this.panelPinLess.wasClicked()) {
                if (this.panelPinAmount.text > 2) {
                    this.panelPinAmount.setText(((settings[lastClicked * 2] + 1) * 2) - 2);
                    settings[lastClicked * 2]--;
                    var widthHolder = this.objects[lastClicked].width;
                    var heightHolder = this.objects[lastClicked].height;
                    this.objects[lastClicked].setFrame(settings[lastClicked * 2]);
                    this.objects[lastClicked].width = widthHolder;
                    this.objects[lastClicked].height = heightHolder;
                }
            }
        }
        if (panelType == 6 || panelType == 7 || panelType == 8 || panelType == 10 || panelType == 15 || panelType == 16 || panelType == 28 || panelType == 29 || panelType == 32 || panelType == 43 || panelType == 50) {
            this.inputBox();

            if (this.panelObjectLabelBox.isOver() || this.panelObjectLabel.isOver()) {
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.panelObjectLabelBox.setAlpha(0.5);
            } else {
                this.panelObjectLabelBox.setAlpha(1);
            }
            if (this.panelObjectLabelBox.wasClicked() || this.panelObjectLabel.wasClicked()) {
                document.getElementById('flex-box').style.flexDirection = 'row-reverse';
                document.getElementById('input').style.display = 'block';
                document.getElementById('input').value = "";
                document.getElementById('input').focus();
                document.getElementById('label2').innerHTML = "Enter Label: "
            }
            if (document.getElementById('input').style.display == 'block') {
                if (this.return.wasPressed()) {
                    undo.push("objectLabel");
                    undo.push(this.panelObjectLabel.text);

                    var labelID = -1;
                    for (var v = 0; v < objectLabelData.length; v++) {
                        if (lastClicked == objectLabelData[v]) {
                            labelID = v;
                        }
                    }
                    if (labelID != -1) {
                        if (panelType == 15 || panelType == 16) {
                            this.objects[lastClicked].scaleX *= Math.pow(document.getElementById('input').value.length / this.objectLabels[labelID].text.length, 1 / 1.25);
                            this.objects[lastClicked].width *= Math.pow(document.getElementById('input').value.length / this.objectLabels[labelID].text.length, 1 / 1.25);
                        }
                        this.objectLabels[labelID].setText(document.getElementById('input').value);
                    }
                    this.panelObjectLabel.setText(document.getElementById('input').value);
                    if (this.panelObjectLabel.text.length > 10) {
                        this.panelObjectLabel.setFontSize(10 / this.panelObjectLabel.text.length * deviceHeight * 0.04);
                    } else {
                        this.panelObjectLabel.setFontSize(deviceHeight * 0.04);
                    }
                    settings[(lastClicked * 2) + 1] = document.getElementById('input').value.replace('"', '\\"');
                    this.clearHTML();

                    undo.push(lastClicked);
                    undo.push(-1);
                    redo.splice(0, redo.length);
                }
            }
        }
        if (panelType == 14) {
            this.panelPinMore.setAlpha(0.5);
            this.panelPinLess.setAlpha(0.5);

            this.inputBox();

            if (this.panelPinMore.isOver()) {
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.panelPinMore.setAlpha(0.5);
            } else {
                if (this.panelPinAmount.text < 16) {
                    this.panelPinMore.setAlpha(1);
                }
            }

            if (this.panelPinLess.isOver()) {
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.panelPinLess.setAlpha(0.5);
            } else {
                if (this.panelPinAmount.text > 4) {
                    this.panelPinLess.setAlpha(1);
                }
            }

            if (this.panelPinMore.wasClicked()) {
                if (this.panelPinAmount.text < 16) {
                    this.panelPinAmount.setText(((settings[lastClicked * 2] + 2) * 2) + 2);
                    settings[lastClicked * 2]++;
                    var widthHolder = this.objects[lastClicked].width;
                    var heightHolder = this.objects[lastClicked].height;
                    this.objects[lastClicked].setFrame(settings[lastClicked * 2]);
                    this.objects[lastClicked].width = widthHolder;
                    this.objects[lastClicked].height = heightHolder;
                }
            }

            if (this.panelPinLess.wasClicked()) {
                if (this.panelPinAmount.text > 4) {
                    this.panelPinAmount.setText(((settings[lastClicked * 2] + 2) * 2) - 2);
                    settings[lastClicked * 2]--;
                    var widthHolder = this.objects[lastClicked].width;
                    var heightHolder = this.objects[lastClicked].height;
                    this.objects[lastClicked].setFrame(settings[lastClicked * 2]);
                    this.objects[lastClicked].width = widthHolder;
                    this.objects[lastClicked].height = heightHolder;
                }
            }

            if (this.panelObjectLabelBox.isOver() || this.panelObjectLabel.isOver()) {
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.panelObjectLabelBox.setAlpha(0.5);
            } else {
                this.panelObjectLabelBox.setAlpha(1);
            }
            if (this.panelObjectLabelBox.wasClicked() || this.panelObjectLabel.wasClicked()) {
                document.getElementById('flex-box').style.flexDirection = 'row-reverse';
                document.getElementById('input').style.display = 'block';
                document.getElementById('input').value = "";
                document.getElementById('input').focus();
                document.getElementById('label2').innerHTML = "Enter Label: "
            }
            if (document.getElementById('input').style.display == 'block') {
                if (this.return.wasPressed()) {
                    undo.push("objectLabel");
                    undo.push(this.panelObjectLabel.text);

                    this.panelObjectLabel.setText(document.getElementById('input').value);
                    var labelID = -1;
                    for (var v = 0; v < objectLabelData.length; v++) {
                        if (lastClicked == objectLabelData[v]) {
                            labelID = v;
                        }
                    }
                    if (labelID != -1) {
                        this.objectLabels[labelID].setText(document.getElementById('input').value);
                    }
                    if (document.getElementById('input').value.length > 10) {
                        this.panelObjectLabel.setFontSize(10 / (document.getElementById('input').value.length) * deviceHeight * 0.04);
                    } else {
                        this.panelObjectLabel.setFontSize(deviceHeight * 0.04);
                    }
                    settings[(lastClicked * 2) + 1] = document.getElementById('input').value.replace('"', '\\"');
                    this.clearHTML();

                    undo.push(lastClicked);
                    undo.push(-1);
                    redo.splice(0, redo.length);
                }
            }
        }

        if (this.magnet.wasClicked() || this.slash.wasClicked()) {
            if (this.slash.visible == 0) {
                this.slash.setVisible(1);
            } else {
                this.slash.setVisible(0);
            }
        }

        if (this.itemTypeArrow.wasClicked()) {
            currentPage = 0;
            currentItemType++;
            if (currentItemType == 5) {
                currentItemType = 0;
            }
            itemObjectID.splice(0, itemObjectID.length);
            for (var i = 0; i < this.items.length; i++) {
                this.items[i].destroy();
                this.itemLabels[i].destroy();
                this.itemButtons[i].destroy();
            }
            clean(this.items);
            clean(this.itemLabels);
            clean(this.itemButtons);

            this.itemResistorBars[0].destroy();
            this.itemResistorBars[1].destroy();

            this.labelItemText[0].destroy();
            this.labelItemText[1].destroy();

            this.binLabel.setText(itemTypes[currentItemType]);

            if (currentItemType == 0) {
                this.addItem.setVisible(1);
                this.search.setVisible(1);
            } else {
                this.addItem.setVisible(0);
                this.search.setVisible(0);
            }

            if (currentItemType == 1) {
                this.binLabel.setFontSize(deviceHeight * 0.035);
                this.binLabel.setY(deviceHeight * 0.035);
            } else {
                this.binLabel.setFontSize(deviceHeight * 0.045)
                this.binLabel.setY(deviceHeight * 0.03);
            }

            objectID = 0;
            var v = 0;
            for (var i = 0; i < objectsData.length / 5; i++) {
                if (v < 8) {
                    if (objectID != 10) {
                        var obj;
                        var label;
                        var button;
                        if (currentItemType == 0 || objectsData[(i * 5) + 1] == itemTypes[currentItemType]) {
                            if (v % 2 == 0) {
                                obj = this.add.sprite(deviceWidth * 0.05, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.17, `${objectID}`, 1);
                                label = this.add.text(deviceWidth * 0.05, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.26, objectsData[i * 5], labelColor);
                                button = this.add.rectangle(deviceWidth * 0.05, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.2, deviceWidth * 0.08, deviceHeight * 0.17, 0xffffff);
                            }
                            if (v % 2 == 1) {
                                obj = this.add.sprite(deviceWidth * 0.15, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.17, `${objectID}`, 1);
                                label = this.add.text(deviceWidth * 0.15, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.26, objectsData[i * 5], labelColor);
                                button = this.add.rectangle(deviceWidth * 0.15, (Math.floor(v / 2) * deviceHeight * 0.2) + deviceHeight * 0.2, deviceWidth * 0.08, deviceHeight * 0.17, 0xffffff);
                            }
                            obj.scale *= (objectsData[(i * 5) + 2]);
                            obj.width *= (objectsData[(i * 5) + 2]);
                            obj.height *= (objectsData[(i * 5) + 2]);
                            while (obj.width < deviceWidth * 0.03 && obj.height < deviceHeight * 0.08) {
                                obj.width *= 1.1;
                                obj.scale *= 1.1;
                                obj.height *= 1.1;
                            }
                            while (obj.width > deviceWidth * 0.08 || obj.height > deviceHeight * 0.12) {
                                obj.width *= 0.9;
                                obj.scale *= 0.9;
                                obj.height *= 0.9;
                            }
                            obj.enableClick();
                            obj.setDepth(6);
                            this.items[v] = obj;
                            itemObjectID.push(objectID);

                            button.setAlpha(0.01);
                            button.setDepth(7);
                            button.enableClick();
                            this.itemButtons.push(button);

                            if (objectID == 2) {
                                this.itemResistorBars[0] = this.add.rectangle(obj.x, obj.y + obj.height * 0.052, obj.width * 0.3, obj.height * 0.055, 0x3b3b3b);
                                this.itemResistorBars[1] = this.add.rectangle(obj.x, obj.y - obj.height * 0.057, obj.width * 0.3, obj.height * 0.055, 0xed9c40);
                                this.itemResistorBars[0].setOrigin(0.5, 0.5);
                                this.itemResistorBars[1].setOrigin(0.5, 0.5);
                                this.itemResistorBars[0].setDepth(6);
                                this.itemResistorBars[1].setDepth(6);
                            }
                            if (objectID == 13) {
                                this.labelItemText[0] = this.add.text(obj.x, obj.y, "Heading", 0xff0000);
                                this.labelItemText[0].setFontSize(deviceHeight * 0.025);
                                this.labelItemText[0].setDepth(6);
                                this.labelItemText[0].setOrigin(0.5, 0.5);
                            }
                            if (objectID == 14) {
                                this.labelItemText[1] = this.add.text(obj.x, obj.y, "Label", 0x0000ff);
                                this.labelItemText[1].setFontSize(deviceHeight * 0.03);
                                this.labelItemText[1].setDepth(6);
                                this.labelItemText[1].setOrigin(0.5, 0.5);
                            }
                            if (label.text.length > 15) {
                                label.setFontSize(15 / label.text.length * deviceHeight * 0.025);
                            } else {
                                label.setFontSize(deviceHeight * 0.025);
                            }
                            label.setOrigin(0.5, 0.5);
                            label.setDepth(6);
                            this.itemLabels[v] = label;
                            v++;
                        }
                    }
                    objectID++;
                }
            }

        }

        if (this.lastPageArrow.wasClicked() || this.lastPageButton.wasClicked()) {
            if (currentPage > 0) {
                currentPage--;
                itemObjectID.splice(0, itemObjectID.length);
                for (var i = 0; i < this.items.length; i++) {
                    this.items[i].destroy();
                    this.itemLabels[i].destroy();
                    this.itemButtons[i].destroy();
                }
                clean(this.items);
                clean(this.itemLabels);
                clean(this.itemButtons);

                this.itemResistorBars[0].destroy();
                this.itemResistorBars[1].destroy();

                this.labelItemText[0].destroy();
                this.labelItemText[1].destroy();

                objectID = 0;
                var v = 0;
                var t = 0;
                for (var i = 0; i < objectsData.length / 5; i++) {
                    if (t < 8) {
                        if (objectID != 10) {
                            var obj;
                            var label;
                            var button;
                            if (currentItemType == 0 || objectsData[(i * 5) + 1] == itemTypes[currentItemType]) {
                                if (v >= currentPage * 2) {
                                    if (v % 2 == 0) {
                                        obj = this.add.sprite(deviceWidth * 0.05, (Math.floor((v - currentPage * 2) / 2) * deviceHeight * 0.2) + deviceHeight * 0.17, `${objectID}`, 1);
                                        label = this.add.text(deviceWidth * 0.05, (Math.floor((v - currentPage * 2) / 2) * deviceHeight * 0.2) + deviceHeight * 0.26, objectsData[i * 5], labelColor);
                                        button = this.add.rectangle(deviceWidth * 0.05, (Math.floor((v - currentPage * 2) / 2) * deviceHeight * 0.2) + deviceHeight * 0.2, deviceWidth * 0.08, deviceHeight * 0.17, 0xffffff);
                                    }
                                    if (v % 2 == 1) {
                                        obj = this.add.sprite(deviceWidth * 0.15, (Math.floor((v - currentPage * 2) / 2) * deviceHeight * 0.2) + deviceHeight * 0.17, `${objectID}`, 1);
                                        label = this.add.text(deviceWidth * 0.15, (Math.floor((v - currentPage * 2) / 2) * deviceHeight * 0.2) + deviceHeight * 0.26, objectsData[i * 5], labelColor);
                                        button = this.add.rectangle(deviceWidth * 0.15, (Math.floor((v - currentPage * 2) / 2) * deviceHeight * 0.2) + deviceHeight * 0.2, deviceWidth * 0.08, deviceHeight * 0.17, 0xffffff);
                                    }
                                    obj.scale *= (objectsData[(i * 5) + 2]);
                                    obj.width *= (objectsData[(i * 5) + 2]);
                                    obj.height *= (objectsData[(i * 5) + 2]);
                                    while (obj.width < deviceWidth * 0.03 && obj.height < deviceHeight * 0.08) {
                                        obj.width *= 1.1;
                                        obj.scale *= 1.1;
                                        obj.height *= 1.1;
                                    }
                                    while (obj.width > deviceWidth * 0.08 || obj.height > deviceHeight * 0.12) {
                                        obj.width *= 0.9;
                                        obj.scale *= 0.9;
                                        obj.height *= 0.9;
                                    }
                                    obj.enableClick();
                                    obj.setDepth(6);
                                    this.items[v - currentPage * 2] = obj;
                                    itemObjectID.push(objectID);

                                    button.setAlpha(0.01);
                                    button.setDepth(7);
                                    button.enableClick();
                                    this.itemButtons.push(button);

                                    if (objectID == 2) {
                                        this.itemResistorBars[0] = this.add.rectangle(obj.x, obj.y + obj.height * 0.052, obj.width * 0.3, obj.height * 0.055, 0x3b3b3b);
                                        this.itemResistorBars[1] = this.add.rectangle(obj.x, obj.y - obj.height * 0.057, obj.width * 0.3, obj.height * 0.055, 0xed9c40);
                                        this.itemResistorBars[0].setOrigin(0.5, 0.5);
                                        this.itemResistorBars[1].setOrigin(0.5, 0.5);
                                        this.itemResistorBars[0].setDepth(6);
                                        this.itemResistorBars[1].setDepth(6);
                                    }
                                    if (objectID == 13) {
                                        this.labelItemText[0] = this.add.text(obj.x, obj.y, "Heading", 0xff0000);
                                        this.labelItemText[0].setFontSize(deviceHeight * 0.025);
                                        this.labelItemText[0].setDepth(6);
                                        this.labelItemText[0].setOrigin(0.5, 0.5);
                                    }
                                    if (objectID == 14) {
                                        this.labelItemText[1] = this.add.text(obj.x, obj.y, "Label", 0x0000ff);
                                        this.labelItemText[1].setFontSize(deviceHeight * 0.03);
                                        this.labelItemText[1].setDepth(6);
                                        this.labelItemText[1].setOrigin(0.5, 0.5);
                                    }
                                    if (label.text.length > 15) {
                                        label.setFontSize(15 / label.text.length * deviceHeight * 0.025);
                                    } else {
                                        label.setFontSize(deviceHeight * 0.025);
                                    }
                                    label.setOrigin(0.5, 0.5);
                                    label.setDepth(6);
                                    this.itemLabels[v - currentPage * 2] = label;
                                    t++;
                                }
                                v++;
                            }
                        }
                        objectID++;
                    }
                }
            }
        }

        if (this.nextPageArrow.wasClicked() || this.nextPageButton.wasClicked()) {
            currentPage++;
            itemObjectID.splice(0, itemObjectID.length);
            for (var i = 0; i < this.items.length; i++) {
                this.items[i].destroy();
                this.itemLabels[i].destroy();
                this.itemButtons[i].destroy();
            }
            clean(this.items);
            clean(this.itemLabels);
            clean(this.itemButtons);

            this.itemResistorBars[0].destroy();
            this.itemResistorBars[1].destroy();

            this.labelItemText[0].destroy();
            this.labelItemText[1].destroy();

            objectID = 0;
            var v = 0;
            var t = 0;
            for (var i = 0; i < objectsData.length / 5; i++) {
                if (t < 8) {
                    if (objectID != 10) {
                        var obj;
                        var label;
                        var button;
                        if (currentItemType == 0 || objectsData[(i * 5) + 1] == itemTypes[currentItemType]) {
                            if (v >= currentPage * 2) {
                                if (v % 2 == 0) {
                                    obj = this.add.sprite(deviceWidth * 0.05, (Math.floor((v - currentPage * 2) / 2) * deviceHeight * 0.2) + deviceHeight * 0.17, `${objectID}`, 1);
                                    label = this.add.text(deviceWidth * 0.05, (Math.floor((v - currentPage * 2) / 2) * deviceHeight * 0.2) + deviceHeight * 0.26, objectsData[i * 5], labelColor);
                                    button = this.add.rectangle(deviceWidth * 0.05, (Math.floor((v - currentPage * 2) / 2) * deviceHeight * 0.2) + deviceHeight * 0.2, deviceWidth * 0.08, deviceHeight * 0.17, 0xffffff);
                                }
                                if (v % 2 == 1) {
                                    obj = this.add.sprite(deviceWidth * 0.15, (Math.floor((v - currentPage * 2) / 2) * deviceHeight * 0.2) + deviceHeight * 0.17, `${objectID}`, 1);
                                    label = this.add.text(deviceWidth * 0.15, (Math.floor((v - currentPage * 2) / 2) * deviceHeight * 0.2) + deviceHeight * 0.26, objectsData[i * 5], labelColor);
                                    button = this.add.rectangle(deviceWidth * 0.15, (Math.floor((v - currentPage * 2) / 2) * deviceHeight * 0.2) + deviceHeight * 0.2, deviceWidth * 0.08, deviceHeight * 0.17, 0xffffff);
                                }
                                obj.scale *= (objectsData[(i * 5) + 2]);
                                obj.width *= (objectsData[(i * 5) + 2]);
                                obj.height *= (objectsData[(i * 5) + 2]);
                                while (obj.width < deviceWidth * 0.03 && obj.height < deviceHeight * 0.08) {
                                    obj.width *= 1.1;
                                    obj.scale *= 1.1;
                                    obj.height *= 1.1;
                                }
                                while (obj.width > deviceWidth * 0.08 || obj.height > deviceHeight * 0.12) {
                                    obj.width *= 0.9;
                                    obj.scale *= 0.9;
                                    obj.height *= 0.9;
                                }
                                obj.enableClick();
                                obj.setDepth(6);
                                this.items[v - currentPage * 2] = obj;
                                itemObjectID.push(objectID);

                                button.setAlpha(0.01);
                                button.setDepth(7);
                                button.enableClick();
                                this.itemButtons.push(button);

                                if (objectID == 2) {
                                    this.itemResistorBars[0] = this.add.rectangle(obj.x, obj.y + obj.height * 0.052, obj.width * 0.3, obj.height * 0.055, 0x3b3b3b);
                                    this.itemResistorBars[1] = this.add.rectangle(obj.x, obj.y - obj.height * 0.057, obj.width * 0.3, obj.height * 0.055, 0xed9c40);
                                    this.itemResistorBars[0].setOrigin(0.5, 0.5);
                                    this.itemResistorBars[1].setOrigin(0.5, 0.5);
                                    this.itemResistorBars[0].setDepth(6);
                                    this.itemResistorBars[1].setDepth(6);
                                }
                                if (objectID == 13) {
                                    this.labelItemText[0] = this.add.text(obj.x, obj.y, "Heading", 0xff0000);
                                    this.labelItemText[0].setFontSize(deviceHeight * 0.025);
                                    this.labelItemText[0].setDepth(6);
                                    this.labelItemText[0].setOrigin(0.5, 0.5);
                                }
                                if (objectID == 14) {
                                    this.labelItemText[1] = this.add.text(obj.x, obj.y, "Label", 0x0000ff);
                                    this.labelItemText[1].setFontSize(deviceHeight * 0.03);
                                    this.labelItemText[1].setDepth(6);
                                    this.labelItemText[1].setOrigin(0.5, 0.5);
                                }

                                if (label.length > 10) {
                                    label.setFontSize(10 / label.length * deviceHeight * 0.025);
                                } else {
                                    label.setFontSize(deviceHeight * 0.025);
                                }
                                if (label.text.length > 15) {
                                    label.setFontSize(15 / label.text.length * deviceHeight * 0.025);
                                } else {
                                    label.setFontSize(deviceHeight * 0.025);
                                }
                                label.setOrigin(0.5, 0.5);
                                label.setDepth(6);
                                this.itemLabels[v - currentPage * 2] = label;
                                t++;
                            }
                            v++;
                        }
                    }
                    objectID++;
                }
            }

        }

        if (wireClick == 1) {
            clickTime++;
            if (clickTime > 20) {
                wireClick = 0;
                clickTime = 0;
            }
        }

        for (var i = 0; i < this.resistorBars.length / 2; i++) {
            if (rotateAngle[resistorData[(i * 5)]] == 0) {
                this.resistorBars[i * 2].width = this.objects[resistorData[(i * 5)]].width * 0.3;
                this.resistorBars[(i * 2) + 1].width = this.objects[resistorData[(i * 5)]].width * 0.3;
                this.resistorBars[i * 2].height = this.objects[resistorData[(i * 5)]].height * 0.055;
                this.resistorBars[(i * 2) + 1].height = this.objects[resistorData[(i * 5)]].height * 0.055;
                this.resistorBars[i * 2].x = this.objects[resistorData[(i * 5)]].x;
                this.resistorBars[(i * 2) + 1].x = this.objects[resistorData[(i * 5)]].x;
                this.resistorBars[i * 2].y = this.objects[resistorData[(i * 5)]].y + this.objects[resistorData[(i * 5)]].height * 0.052;
                this.resistorBars[(i * 2) + 1].y = this.objects[resistorData[(i * 5)]].y - this.objects[resistorData[(i * 5)]].height * 0.057;
            }
            if (rotateAngle[resistorData[(i * 5)]] == 1) {
                this.resistorBars[i * 2].width = this.objects[resistorData[(i * 5)]].width * 0.055;
                this.resistorBars[(i * 2) + 1].width = this.objects[resistorData[(i * 5)]].width * 0.055;
                this.resistorBars[i * 2].height = this.objects[resistorData[(i * 5)]].height * 0.3;
                this.resistorBars[(i * 2) + 1].height = this.objects[resistorData[(i * 5)]].height * 0.3;
                this.resistorBars[i * 2].x = this.objects[resistorData[(i * 5)]].x - this.objects[resistorData[(i * 5)]].width * 0.052;
                this.resistorBars[(i * 2) + 1].x = this.objects[resistorData[(i * 5)]].x + this.objects[resistorData[(i * 5)]].width * 0.057;
                this.resistorBars[i * 2].y = this.objects[resistorData[(i * 5)]].y;
                this.resistorBars[(i * 2) + 1].y = this.objects[resistorData[(i * 5)]].y;
            }
            if (rotateAngle[resistorData[(i * 5)]] == 2) {
                this.resistorBars[i * 2].width = this.objects[resistorData[(i * 5)]].width * 0.3;
                this.resistorBars[(i * 2) + 1].width = this.objects[resistorData[(i * 5)]].width * 0.3;
                this.resistorBars[i * 2].height = this.objects[resistorData[(i * 5)]].height * 0.055;
                this.resistorBars[(i * 2) + 1].height = this.objects[resistorData[(i * 5)]].height * 0.055;
                this.resistorBars[i * 2].x = this.objects[resistorData[(i * 5)]].x;
                this.resistorBars[(i * 2) + 1].x = this.objects[resistorData[(i * 5)]].x;
                this.resistorBars[i * 2].y = this.objects[resistorData[(i * 5)]].y - this.objects[resistorData[(i * 5)]].height * 0.053;
                this.resistorBars[(i * 2) + 1].y = this.objects[resistorData[(i * 5)]].y + this.objects[resistorData[(i * 5)]].height * 0.056;
            }
            if (rotateAngle[resistorData[(i * 5)]] == 3) {
                this.resistorBars[i * 2].width = this.objects[resistorData[(i * 5)]].width * 0.055;
                this.resistorBars[(i * 2) + 1].width = this.objects[resistorData[(i * 5)]].width * 0.055;
                this.resistorBars[i * 2].height = this.objects[resistorData[(i * 5)]].height * 0.3;
                this.resistorBars[(i * 2) + 1].height = this.objects[resistorData[(i * 5)]].height * 0.3;
                this.resistorBars[i * 2].x = this.objects[resistorData[(i * 5)]].x - this.objects[resistorData[(i * 5)]].width * 0.056;
                this.resistorBars[(i * 2) + 1].x = this.objects[resistorData[(i * 5)]].x + this.objects[resistorData[(i * 5)]].width * 0.053;
                this.resistorBars[i * 2].y = this.objects[resistorData[(i * 5)]].y;
                this.resistorBars[(i * 2) + 1].y = this.objects[resistorData[(i * 5)]].y;
            }
            this.resistorBars[i * 2].setOrigin(0.5, 0.5);
            this.resistorBars[(i * 2) + 1].setOrigin(0.5, 0.5);
            this.resistorBars[i * 2].setDepth(this.objects[resistorData[(i * 5)]].depth);
            this.resistorBars[(i * 2) + 1].setDepth(this.objects[resistorData[(i * 5)]].depth);
        }

        var noHover = true;
        if (this.search.isOver() || this.addItem.isOver() || this.itemTypeArrow.isOver() || this.exit.isOver() || this.nextPageArrow.isOver() || this.nextPageButton.isOver() || this.lastPageArrow.isOver() || this.lastPageButton.isOver() || this.binHandle.isOver() || this.binHandleArrow.isOver()) {
            noHover = false;
        }
        for (var t = 0; t < this.itemButtons.length; t++) {
            if (this.itemButtons[t].isOver()) {
                noHover = false;
            }
        }
        if (this.undo.isOver() || this.redo.isOver() || this.magnet.isOver() || this.slash.isOver() || this.increaseScale.isOver() || this.increaseScaleButton.isOver() || this.decreaseScale.isOver() || this.decreaseScaleButton.isOver() || this.save.isOver() || this.saveButton.isOver() || this.import.isOver()) {
            noHover = false;
        }
        if (this.pen.isOver() || this.penSlash.isOver() || this.select.isOver() || this.dark.isOver() || this.help.isOver()) {
            noHover = false;
        }
        if (this.panelType > 0) {
            if (this.closex.isOver()) {
                noHover = false;
            }
            if (panelType == 1) {
                if (this.panelWireDeleteButton.isOver() || this.panelWireDeleteText.isOver() || this.panelWireDeleteIcon.isOver() || this.panelWireAddNodeButton.isOver() || this.panelWireAddNodeIcon.isOver() || this.panelWireAddNodeText.isOver()) {
                    noHover = false;
                }
                for (var t = 0; t < this.palette.length; t++) {
                    if (this.palette[t].isOver()) {
                        noHover = false;
                    }
                }
                for (var t = 0; t < this.customColors.length; t++) {
                    if (this.customColors[t].isOver()) {
                        noHover = false;
                    }
                }
                if (this.customColorAdd.isOver() || this.customColorBox.isOver()) {
                    noHover = false;
                }
            }
            if (panelType >= 2) {
                if (this.panelDeleteButton.isOver() || this.panelDelete.isOver() || this.panelDuplicateButton.isOver() || this.panelDuplicate.isOver() || this.panelEditButton.isOver() || this.panelEdit.isOver() || this.panelInfoButton.isOver() || this.panelInfo.isOver()) {
                    noHover = false;
                }
                if (this.panelRightArrow.isOver() || this.panelLeftArrow.isOver() || this.panelUpArrow.isOver() || this.panelDownArrow.isOver() || this.panelRotateRight.isOver() || this.panelRotateLeft.isOver() || this.panelForward.isOver() || this.panelBackward.isOver()) {
                    noHover = false;
                }
            }
            if (panelType == 4) {
                if (this.panelResistanceValue.isOver() || this.panelResistanceValueBox.isOver() || this.panelResistanceUnit.isOver() || this.panelResistanceUnitBox.isOver()) {
                    noHover = false;
                }
            }
            if (panelType == 5 || panelType == 8 || panelType == 15 || panelType == 16 || panelType == 22 || panelType == 45 || panelType == 47) {
                for (var t = 0; t < this.customObjectColors.length; t++) {
                    if (this.customObjectColors[v].isOver()) {
                        noHover = false;
                    }
                }
                if (this.customObjectColorAdd.isOver() || this.customObjectColorBox.isOver()) {
                    noHover = false;
                }
            }
            if (panelType == 6 || panelType == 7 || panelType == 8 || panelType == 10 || panelType == 15 || panelType == 16 || panelType == 28 || panelType == 29 || panelType == 32 || panelType == 43 || panelType == 50) {
                if (this.panelObjectLabel.isOver() || this.panelObjectLabelBox.isOver()) {
                    noHover = false;
                }
            }
        }

        var wiringPointer = false;
        if (this.slash.scale > 0.01 && this.popup.visible == 0) {
            if (this.penSlash.visible == 0) {
                if (activeWire == false) {
                    wiringPointer = true;
                    this.wiringPointer.setVisible(1);
                    pElement.style.cursor = "url('assets/hand.png'), auto";
                    if (this.slash.visible == 0) {
                        for (var v = -10000; v < 10000; v++) {
                            if (Math.abs(((v * 28 * scaleCount + (snapStartX % (28 * scaleCount))) - this.input.mousePointer.x)) < (28 * scaleCount) / 2) {
                                this.wiringPointer.x = (v * 28 * scaleCount + (snapStartX % (28 * scaleCount)));
                            }
                        }
                        for (var v = -10000; v < 10000; v++) {
                            if (Math.abs(((v * 28 * scaleCount + (snapStartY % (28 * scaleCount))) - this.input.mousePointer.y)) < (28 * scaleCount) / 2) {
                                this.wiringPointer.y = (v * 28 * scaleCount + (snapStartY % (28 * scaleCount)));
                            }
                        }
                    } else {
                        this.wiringPointer.x = this.input.mousePointer.x;
                        this.wiringPointer.y = this.input.mousePointer.y;
                        for (var t = 0; t < this.nodes.length; t++) {
                            if (this.nodes[t].visible == 1) {
                                if (this.input.mousePointer.x > this.nodes[t].x - 10 && this.input.mousePointer.x < this.nodes[t].x + 10) {
                                    this.wiringPointer.x = this.nodes[t].x;
                                }
                                if (this.input.mousePointer.y > this.nodes[t].y - 10 && this.input.mousePointer.y < this.nodes[t].y + 10) {
                                    this.wiringPointer.y = this.nodes[t].y;
                                }
                            }
                        }
                    }

                    if (down == true && noHover == true) {
                        var point = this.add.sprite(this.wiringPointer.x, this.wiringPointer.y, "10");
                        point.setScale(scaleCount * objectsData[(10 * 5) + 2]);
                        point.width = 500 * scaleCount;
                        point.height = 500 * scaleCount;
                        point.enableClick();
                        point.setDepth(0);
                        this.objects.push(point);
                        this.objectIDs.push(10);
                        settings.push(-1);
                        settings.push(-1);
                        rotateAngle.push(0);
                        shiftObjects.push(false);

                        if (activeWire == false) {
                            activeWire = true;
                            this.clearPanel()
                            activeWireXY[0] = this.objects.length - 1;;
                            activeWireXY[1] = 0;
                            activeWireXY[2] = point.x + (wiringXPoints["x10"][0] * point.width);
                            activeWireXY[3] = point.y + (wiringYPoints["y10"][0] * point.height);
                            down = false;
                        }
                    }
                } else {
                    wiringPointer = true;
                    activeWire = true;
                    this.activeWire.setTo(this.objects[activeWireXY[0]].x, this.objects[activeWireXY[0]].y, this.wiringPointer.x, this.wiringPointer.y);
                    this.activeWire.setVisible(1);
                    if (this.slash.visible == 0) {
                        for (var v = -10000; v < 10000; v++) {
                            if (Math.abs(((v * 28 * scaleCount + (snapStartX % (28 * scaleCount))) - this.input.mousePointer.x)) < (28 * scaleCount) / 2) {
                                this.wiringPointer.x = (v * 28 * scaleCount + (snapStartX % (28 * scaleCount)));
                            }
                        }
                        for (var v = -10000; v < 10000; v++) {
                            if (Math.abs(((v * 28 * scaleCount + (snapStartY % (28 * scaleCount))) - this.input.mousePointer.y)) < (28 * scaleCount) / 2) {
                                this.wiringPointer.y = (v * 28 * scaleCount + (snapStartY % (28 * scaleCount)));
                            }
                        }
                    } else {
                        this.wiringPointer.x = this.input.mousePointer.x;
                        this.wiringPointer.y = this.input.mousePointer.y;
                        for (var t = 0; t < this.nodes.length; t++) {
                            if (this.nodes[t].visible == 1) {
                                if (this.input.mousePointer.x > this.nodes[t].x - 10 && this.input.mousePointer.x < this.nodes[t].x + 10) {
                                    this.wiringPointer.x = this.nodes[t].x;
                                }
                                if (this.input.mousePointer.y > this.nodes[t].y - 10 && this.input.mousePointer.y < this.nodes[t].y + 10) {
                                    this.wiringPointer.y = this.nodes[t].y;
                                }
                            }
                        }
                    }
                    this.wiringPointer.setVisible(1);
                    if (down == true && noHover == true) {
                        var point = this.add.sprite(this.wiringPointer.x, this.wiringPointer.y, "10");
                        point.setScale(scaleCount * objectsData[(10 * 5) + 2]);
                        point.width = 500 * scaleCount;
                        point.height = 500 * scaleCount;
                        point.enableClick();
                        point.setDepth(4);
                        this.objects.push(point);
                        this.objectIDs.push(10);
                        settings.push(-1);
                        settings.push(-1);
                        rotateAngle.push(0);
                        shiftObjects.push(false);

                        var node = this.add.circle(this.objects[activeWireXY[0]].x, this.objects[activeWireXY[0]].y, 8 * scaleCount, wireColor);
                        node.setDepth(0);
                        node.enableClick();
                        node.enableDrag();
                        node.setDepth(4);
                        if (this.nodes.length > 0) {
                            if (this.nodes[this.nodes.length - 1].x != node.x || this.nodes[this.nodes.length - 1].y != node.y) {
                                wireGroup++;
                            }
                        }
                        this.nodes.push(node);
                        var node2 = this.add.circle(point.x, point.y, 8 * scaleCount, wireColor);
                        node2.setDepth(3.2);
                        node2.enableClick();
                        node2.enableDrag();
                        this.nodes.push(node2);
                        nodeLinks.push(this.wireLines.length);
                        nodeLinks.push(activeWireXY[0]);
                        nodeLinks.push(activeWireXY[1]);
                        nodeLinks.push(wireGroup);
                        nodeLinks.push(this.wireLines.length);
                        nodeLinks.push(this.objects.length - 1);
                        nodeLinks.push(0);
                        nodeLinks.push(wireGroup);

                        var obj = this.add.line(node.x, node.y, node2.x, node2.y, 0xffffff);
                        obj.setLineWidth(3.8 * scaleCount);
                        obj.setDepth(3.5);
                        this.wireLines.push(obj);
                        var obj2;
                        obj2 = this.add.rectangle((obj.geom.x1 + obj.geom.x2) / 2, (obj.geom.y1 + obj.geom.y2) / 2, lineWidth, Math.sqrt(Math.pow(Math.abs(obj.geom.x1 - obj.geom.x2), 2) + Math.pow(Math.abs(obj.geom.y1 - obj.geom.y2), 2)), wireColor)
                        obj2.setDepth(3.5);
                        obj2.setAngle(-Math.atan(Math.abs(obj.geom.x1 - obj.geom.x2) / Math.abs(obj.geom.y1 - obj.geom.y2)) * 180 / Math.PI);
                        obj2.enableClick();
                        this.wires.push(obj2);
                        down = false;

                        lastWire = this.wires.length - 1;
                        this.createPalette(lastWire);

                        activeWireXY[0] = this.objects.length - 1;
                        activeWireXY[1] = 0;
                        activeWireXY[2] = point.x + (wiringXPoints["x10"][0] * point.width);
                        activeWireXY[3] = point.y + (wiringYPoints["y10"][0] * point.height);

                        undo.push("createdWire");
                        undo.push(this.wires.length - 1);
                        undo.push(this.nodes.length - 2);
                        undo.push(this.nodes.length - 1);
                        redo.splice(0, redo.length);
                    }
                }
            }
        }

        for (var i = 0; i < this.objects.length; i++) {
            if (this.objects[i].visible == 1) {
                startingX[i] = this.objects[i].x;
                startingY[i] = this.objects[i].y;
                if (this.objectIDs[i] != 10) {
                    if (this.objects[i].wasClicked()) {

                        lastPosition[0] = -i - 1;
                        lastPosition[1] = this.objects[i].x;
                        lastPosition[2] = this.objects[i].y;
                        lastClicked = i;

                        this.clearPanel();
                        this.openPanel(i);
                        lastX = this.input.mousePointer.x;
                        lastY = this.input.mousePointer.y;

                        if (this.shift.isPressed()) {
                            for (var v = 0; v < this.objects.length; v++) {
                                this.objects[v].disableDrag();
                            }
                            if (shiftObjects[i] == false) {
                                this.shiftSelect.push(this.objects[i]);
                                shiftObjects[i] = true;
                            }
                        }

                        var allGroups = [];
                        var wiresPerGroup = [];
                        var selectWireGroup;

                        for (var v = 0; v < this.nodes.length; v++) {
                            if (nodeLinks[v * 4] >= 0 && nodeLinks[(v * 4) + 1] == i) {
                                selectWireGroup = nodeLinks[(v * 4) + 3];
                                allGroups.push(selectWireGroup);
                            }
                        }

                        for (var v = 0; v < allGroups.length; v++) {
                            wiresPerGroup.push(0);
                        }

                        for (var v = 0; v < allGroups.length; v++) {
                            for (var t = 0; t < this.nodes.length; t++) {
                                if (nodeLinks[(t * 4) + 3] == allGroups[v]) {
                                    wiresPerGroup[v]++;
                                }
                            }
                        }

                        dragPositionWires.splice(0, dragPositionWires.length);
                        dragPositionNodes.splice(0, dragPositionNodes.length);
                        for (var t = 0; t < allGroups.length; t++) {
                            for (var v = 0; v < this.nodes.length; v++) {
                                if (nodeLinks[(v * 4) + 3] == allGroups[t]) {
                                    if (nodeLinks[v * 4] == i) {
                                        dragPositionWires.push(this.wires[nodeLinks[v * 4]].x - this.objects[i].x);
                                        dragPositionWires.push(this.wires[nodeLinks[v * 4]].y - this.objects[i].y);
                                        dragPositionWires.push(this.wireLines[nodeLinks[v * 4]].geom.x1 - this.objects[i].x);
                                        dragPositionWires.push(this.wireLines[nodeLinks[v * 4]].geom.y1 - this.objects[i].y);
                                        dragPositionWires.push(this.wireLines[nodeLinks[v * 4]].geom.x2 - this.objects[i].x);
                                        dragPositionWires.push(this.wireLines[nodeLinks[v * 4]].geom.y2 - this.objects[i].y);
                                        dragPositionWires.push(nodeLinks[v * 4]);
                                    }
                                    if (nodeLinks[v * 4] <= -1) {
                                        dragPositionWires.push(this.wires[nodeLinks[(v * 4) + 2]].x - this.objects[i].x);
                                        dragPositionWires.push(this.wires[nodeLinks[(v * 4) + 2]].y - this.objects[i].y);
                                        dragPositionWires.push(this.wireLines[nodeLinks[(v * 4) + 2]].geom.x1 - this.objects[i].x);
                                        dragPositionWires.push(this.wireLines[nodeLinks[(v * 4) + 2]].geom.y1 - this.objects[i].y);
                                        dragPositionWires.push(this.wireLines[nodeLinks[(v * 4) + 2]].geom.x2 - this.objects[i].x);
                                        dragPositionWires.push(this.wireLines[nodeLinks[(v * 4) + 2]].geom.y2 - this.objects[i].y);
                                        dragPositionWires.push(nodeLinks[(v * 4) + 2]);
                                    }
                                }
                            }

                            for (var v = 0; v < this.nodes.length; v++) {
                                if (nodeLinks[(v * 4) + 3] == allGroups[t]) {
                                    if (nodeLinks[v * 4] < -1 || this.objectIDs[nodeLinks[(v * 4) + 1]] == 10) {
                                        dragPositionNodes.push(this.nodes[v].x - this.objects[i].x);
                                        dragPositionNodes.push(this.nodes[v].y - this.objects[i].y);
                                        dragPositionNodes.push(v);
                                    }
                                }
                            }
                        }
                    }
                    if (lastPosition[0] == -i - 1 && !(this.objects[i].isClicked()) && (lastPosition[1] != this.objects[i].x || lastPosition[2] != this.objects[i].y) && !(this.panelUpArrow.isClicked()) && !(this.panelLeftArrow.isClicked()) && !(this.panelRightArrow.isClicked()) && !(this.panelDownArrow.isClicked()) && !(this.uparrow.isPressed()) && !(this.leftarrow.isPressed()) && !(this.rightarrow.isPressed()) && !(this.downarrow.isPressed())) {
                        undo.push("movedObject");
                        undo.push(-i - 1);
                        undo.push(lastPosition[1] - this.objects[i].x);
                        undo.push(lastPosition[2] - this.objects[i].y);
                        lastPosition[1] = this.objects[i].x;
                        lastPosition[2] = this.objects[i].y;
                        redo.splice(0, redo.length);
                    }
                    if (this.input.activePointer.isDown == false) {
                        lastX = -1;
                        lastY = -1;
                    }
                    if (this.shiftSelect.length > 0 && this.input.activePointer.isDown == true && lastX != -1 && lastY != -1) {
                        if (this.input.mousePointer.x != lastX || this.input.mousePointer.y != lastY) {
                            moved = i;
                            this.objects[i].x += this.input.mousePointer.x - lastX;
                            this.objects[i].y += this.input.mousePointer.y - lastY;
                            lastX = this.input.mousePointer.x;
                            lastY = this.input.mousePointer.y;
                        }
                    }
                    if (!(this.shift.isPressed()) && boxMode == false) {
                        this.objects[i].setAlpha(1);
                        if (this.popup.visible == 0) {
                            for (var v = 0; v < this.objects.length; v++) {
                                this.objects[v].enableDrag();
                            }
                        }
                        for (var v = 0; v < this.shiftSelect.length; v++) {
                            this.shiftSelect[v] = -1;
                        }
                        for (var v = 0; v < shiftObjects.length; v++) {
                            shiftObjects[v] = false;
                        }
                        this.shiftSelect.splice(0, this.shiftSelect.length);
                    }
                    if (this.objects[i].isClicked()) {
                        pElement.style.cursor = "url('assets/hand.png'), auto";
                        /*for (var v = 0; v < dragPositionWires.length / 7; v++) {
                            this.wires[dragPositionWires[(v * 7) + 6]].x = this.objects[i].x + dragPositionWires[v * 7];
                            this.wires[dragPositionWires[(v * 7) + 6]].y = this.objects[i].y + dragPositionWires[(v * 7) + 1];
                            this.wireLines[dragPositionWires[(v * 7) + 6]].setTo(this.objects[i].x + dragPositionWires[(v * 7) + 2], this.objects[i].y + dragPositionWires[(v * 7) + 3], this.objects[i].x + dragPositionWires[(v * 7) + 4], this.objects[i].y + dragPositionWires[(v * 7) + 5]);
                        }
                        for (var v = 0; v < dragPositionNodes.length / 3; v++) {
                            this.nodes[dragPositionNodes[(v * 3) + 2]].x = this.objects[i].x + dragPositionNodes[v * 3];
                            this.nodes[dragPositionNodes[(v * 3) + 2]].y = this.objects[i].y + dragPositionNodes[(v * 3) + 1];
                        }*/
                    }

                    var noOther = true;
                    for (var v = 0; v < this.nodes.length; v++) {
                        if (nodeLinks[v * 4] == -2 || nodeLinks[v * 4] == -1) {
                            if (this.nodes[v].isClicked()) {
                                noOther = false;
                            }
                        }
                    }
                    if (this.objects[i].isOver() && noOther == true && boxMode == false) {
                        this.objects[i].setAlpha(0.7);
                        if (this.objectIDs[i] == 13 || this.objectIDs[i] == 14) {
                            var labelID = -1;
                            for (var v = 0; v < objectLabelData.length; v++) {
                                if (objectLabelData[v] == i) {
                                    labelID = v;
                                }
                            }
                            if (labelID != -1) {
                                this.objectLabels[labelID].setAlpha(0.7);
                            }
                        }
                        if (this.objectIDs[i] == 2) {
                            for (var v = 0; v < resistorData.length / 5; v++) {
                                if (resistorData[v * 5] == i) {
                                    this.resistorBars[v * 2].setAlpha(0.7);
                                    this.resistorBars[(v * 2) + 1].setAlpha(0.7);
                                }
                            }
                        }
                        if (element == null) {
                            if (this.del.wasPressed()) {
                                this.initiateDelete(i);
                            }
                            if (this.d.wasPressed()) {
                                var obj = this.add.sprite(this.objects[i].x, this.objects[i].y, `${this.objectIDs[i]}`, 1);
                                for (var v = 0; v < this.objects.length; v++) {
                                    if (this.objectIDs[v] == this.objectIDs[i] && this.objects[v].x == obj.x && this.objects[v].y == obj.y && this.objects[v].visible == 1) {
                                        obj.x += deviceWidth * 0.02;
                                        obj.y += deviceHeight * 0.04;
                                    }
                                }
                                obj.scale *= (objectsData[this.objectIDs[i] * 5 + 2]);
                                obj.width *= (objectsData[this.objectIDs[i] * 5 + 2]);
                                obj.height *= (objectsData[this.objectIDs[i] * 5 + 2]);

                                obj.scale *= scaleCount;
                                obj.width *= scaleCount;
                                obj.height *= scaleCount;

                                if (rotateAngle[i] == 1 || rotateAngle[i] == 3) {
                                    var widthHolder = obj.width;
                                    obj.width = obj.height;
                                    obj.height = widthHolder;
                                }

                                obj.setAngle(rotateAngle[i] * 90);

                                if (settings[(i * 2)] != -1 || settings[(i * 2) + 1] != -1) {
                                    if (this.objectIDs[i] == 3 || this.objectIDs[i] == 6 || this.objectIDs[i] == 43 || this.objectIDs[i] == 45) {
                                        obj.setTint(settings[i * 2]);
                                    }
                                }

                                obj.enableDrag();
                                obj.enableClick();
                                obj.setDepth(3);
                                for (var v = 0; v < this.objects.length; v++) {
                                    this.objects[v].depth -= 0.01;
                                }
                                this.objects.push(obj);
                                this.objectIDs.push(this.objectIDs[i]);

                                var labelAvail = -1;
                                for (var v = 0; v < defaultLabel.length / 14; v++) {
                                    if (defaultLabel[v * 14] == this.objectIDs[i]) {
                                        labelAvail = v;
                                    }
                                }
                                if (labelAvail != -1) {
                                    var labelID = -1;
                                    for (var v = 0; v < objectLabelData.length; v++) {
                                        if (i == objectLabelData[v]) {
                                            labelID = v;
                                        }
                                    }
                                    var label = this.add.text(this.objects[this.objects.length - 1].x + scaleCount * deviceWidth * defaultLabel[(labelAvail * 14) + 5], this.objects[this.objects.length - 1].y + scaleCount * deviceHeight * defaultLabel[(labelAvail * 14) + 6], this.objectLabels[labelID].text, labelColor);
                                    if (defaultLabel[(labelAvail * 14) + 13] == 0xffffff) {
                                        label.setFontColor(0xffffff);
                                    }
                                    label.setOrigin(0.5, 0.5);
                                    label.setFontSize(scaleCount * deviceHeight * defaultLabel[(labelAvail * 14) + 2]);
                                    label.setDepth(3);
                                    this.objectLabels.push(label);
                                    objectLabelData.push(this.objects.length - 1);
                                }
                                rotateAngle.push(rotateAngle[i]);
                                shiftObjects.push(false);
                                settings.push(settings[i * 2]);
                                settings.push(settings[(i * 2) + 1]);

                                if (this.objectIDs[i] == 2) {
                                    for (var v = 0; v < resistorData.length / 5; v++) {
                                        if (resistorData[v * 5] == i) {
                                            var widthHolder = obj.width;
                                            var heightHolder = obj.height;
                                            obj.setFrame(resistorData[(v * 5) + 4]);
                                            var bar1 = this.add.rectangle(obj.x, obj.y + obj.height * 0.052, obj.width * 0.3, obj.height * 0.055, resistorData[(v * 5) + 3]);
                                            var bar2 = this.add.rectangle(obj.x, obj.y - obj.height * 0.057, obj.width * 0.3, obj.height * 0.055, resistorData[(v * 5) + 2]);
                                            bar1.setOrigin(0.5, 0.5);
                                            bar2.setOrigin(0.5, 0.5);
                                            this.resistorBars.push(bar1);
                                            this.resistorBars.push(bar2);
                                            resistorData.push(this.objects.length - 1);
                                            resistorData.push(resistorData[(v * 5) + 1]);
                                            resistorData.push(resistorData[(v * 5) + 2]);
                                            resistorData.push(resistorData[(v * 5) + 3]);
                                            resistorData.push(resistorData[(v * 5) + 4]);
                                            obj.width = widthHolder;
                                            obj.height = heightHolder;
                                        }
                                    }
                                }

                                if (this.objectIDs[i] == 4 || this.objectIDs[i] == 12) { // If it is resistor or IC chip
                                    var widthHolder = obj.width;
                                    var heightHolder = obj.height;
                                    obj.setFrame(settings[i * 2]);
                                    obj.width = widthHolder;
                                    obj.height = heightHolder;
                                }

                                lastClicked = this.objects.length - 1
                                this.clearPanel();
                                this.openPanel(this.objects.length - 1);

                                undo.push("createdObject");
                                undo.push(this.objects.length - 1);
                                undo.push(-1);
                                undo.push(-1);
                                redo.splice(0, redo.length);
                            }
                            if (!(this.shift.isPressed())) {
                                if (this.rightarrow.wasPressed() || this.leftarrow.wasPressed() || this.uparrow.wasPressed() || this.downarrow.wasPressed()) {
                                    lastPosition[0] = -i - 1;
                                    lastPosition[1] = this.objects[i].x;
                                    lastPosition[2] = this.objects[i].y;
                                }
                                if (this.rightarrow.isPressed()) {
                                    this.objects[i].x += 0.25;
                                }
                                if (this.leftarrow.isPressed()) {
                                    this.objects[i].x -= 0.25;
                                }
                                if (this.uparrow.isPressed()) {
                                    this.objects[i].y -= 0.25;
                                }
                                if (this.downarrow.isPressed()) {
                                    this.objects[i].y += 0.25;
                                }
                            } else {
                                if (this.rightarrow.wasPressed()) {
                                    this.objects[i].angle += 90;
                                    rotateAngle[i]++;
                                    if (rotateAngle[i] == 4) {
                                        rotateAngle[i] = 0;
                                    }
                                    var widthHolder = this.objects[i].width;
                                    this.objects[i].width = this.objects[i].height;
                                    this.objects[i].height = widthHolder;
                                    undo.push("rotatedObject");
                                    undo.push(i);
                                    undo.push(-90);
                                    undo.push(widthHolder);
                                    redo.splice(0, redo.length);
                                }
                                if (this.leftarrow.wasPressed()) {
                                    this.objects[i].angle -= 90;
                                    rotateAngle[i]--;
                                    if (rotateAngle[i] == -1) {
                                        rotateAngle[i] = 3;
                                    }
                                    var widthHolder = this.objects[i].width;
                                    this.objects[i].width = this.objects[i].height;
                                    this.objects[i].height = widthHolder;
                                    undo.push("rotatedObject");
                                    undo.push(i);
                                    undo.push(90);
                                    undo.push(widthHolder);
                                    redo.splice(0, redo.length);
                                }
                                if (this.downarrow.wasPressed() && this.objects[i].depth != 2) {
                                    undo.push("arrangedObject");
                                    undo.push(i);
                                    undo.push(this.objects[i].depth);
                                    undo.push(-0.01);
                                    redo.splice(0, redo.length);
                                    for (var v = 0; v < this.objects.length; v++) {
                                        if (this.objects[i].intersects(this.objects[v]) && v != i) {
                                            this.objects[v].depth += 0.01;

                                            var labelID = -1;
                                            for (var t = 0; t < objectLabelData.length; t++) {
                                                if (v == objectLabelData[t]) {
                                                    labelID = t;
                                                }
                                            }
                                            if (labelID != -1) {
                                                this.objectLabels[labelID].depth += 0.01;
                                            }
                                        }
                                    }
                                    this.objects[i].setDepth(2);

                                    var labelID = -1;
                                    for (var v = 0; v < objectLabelData.length; v++) {
                                        if (i == objectLabelData[v]) {
                                            labelID = v;
                                        }
                                    }
                                    if (labelID != -1) {
                                        this.objectLabels[labelID].setDepth(2);
                                    }
                                }
                                if (this.uparrow.wasPressed() && this.objects[i].depth != 3) {
                                    undo.push("arrangedObject");
                                    undo.push(i);
                                    undo.push(this.objects[i].depth);
                                    undo.push(0.01);
                                    redo.splice(0, redo.length);
                                    for (var v = 0; v < this.objects.length; v++) {
                                        if (this.objects[i].intersects(this.objects[v]) && v != i) {
                                            this.objects[v].depth -= 0.01;

                                            var labelID = -1;
                                            for (var t = 0; t < objectLabelData.length; t++) {
                                                if (v == objectLabelData[t]) {
                                                    labelID = t;
                                                }
                                            }
                                            if (labelID != -1) {
                                                this.objectLabels[labelID].depth -= 0.01;
                                            }
                                        }
                                    }
                                    this.objects[i].setDepth(3);

                                    var labelID = -1;
                                    for (var v = 0; v < objectLabelData.length; v++) {
                                        if (i == objectLabelData[v]) {
                                            labelID = v;
                                        }
                                    }
                                    if (labelID != -1) {
                                        this.objectLabels[labelID].setDepth(3);
                                    }
                                }
                            }
                        }
                    } else {
                        if (shiftObjects[i] == false && boxMode == false) {
                            this.objects[i].setAlpha(1);
                            if (this.objectIDs[i] == 13 || this.objectIDs[i] == 14) {
                                var labelID = -1;
                                for (var v = 0; v < objectLabelData.length; v++) {
                                    if (objectLabelData[v] == i) {
                                        labelID = v;
                                    }
                                }
                                if (labelID != -1) {
                                    this.objectLabels[labelID].setAlpha(1);
                                }
                            }
                            if (this.objectIDs[i] == 2) {
                                for (var v = 0; v < resistorData.length / 5; v++) {
                                    if (resistorData[v * 5] == i) {
                                        this.resistorBars[v * 2].setAlpha(1);
                                        this.resistorBars[(v * 2) + 1].setAlpha(1);
                                    }
                                }
                            }
                        }
                    }
                }

                for (var v = 0; v < this.nodes.length; v++) {
                    for (var t = 0; t < this.nodes.length; t++) {
                        if (this.nodes[v].x == this.nodes[t].x && this.nodes[v].y == this.nodes[t].y && v != t && nodeLinks[v * 4] != -1 && nodeLinks[(t * 4)] != -1 && nodeLinks[(v * 4) + 3] == nodeLinks[(t * 4) + 3]) {
                            if ((nodeLinks[v * 4] == -2 || nodeLinks[v * 4] <= -4) && nodeLinks[(t * 4)] != -3 && nodeLinks[(t * 4)] > -4) {
                                this.nodes[v].disableClick();
                                this.nodes[v].disableDrag();
                                this.nodes[v].setVisible(0);
                                this.nodes[v - 1].setVisible(0);
                                nodeLinks[v * 4] = t - t - t - 4;
                            }
                        }
                    }
                    if (nodeLinks[v * 4] >= 0 && this.objectIDs[nodeLinks[(v * 4) + 1]] != 10) {
                        if (nodeLinks[(v * 4) + 1] == i) {
                            if (this.objectIDs[i] != 4 && this.objectIDs[i] != 12) {
                                this.nodes[v].setX(this.objects[i].x + (wiringXPoints["x" + this.objectIDs[i]][nodeLinks[(v * 4) + 2] + rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].width));
                                this.nodes[v].setY(this.objects[i].y + (wiringYPoints["y" + this.objectIDs[i]][nodeLinks[(v * 4) + 2] + rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].height));
                            }
                            if (this.objectIDs[i] == 4) {
                                this.nodes[v].setX(this.objects[i].x + (buttonxPoints["pin" + (settings[i * 2] + 1) * 2][nodeLinks[(v * 4) + 2] + rotateAngle[i] * (settings[i * 2] + 1) * 2] * this.objects[i].width));
                                this.nodes[v].setY(this.objects[i].y + (buttonyPoints["pin" + (settings[i * 2] + 1) * 2][nodeLinks[(v * 4) + 2] + rotateAngle[i] * (settings[i * 2] + 1) * 2] * this.objects[i].height));
                            }
                            if (this.objectIDs[i] == 12) {
                                this.nodes[v].setX(this.objects[i].x + (ICxPoints["pin" + (settings[i * 2] + 2) * 2][nodeLinks[(v * 4) + 2] + rotateAngle[i] * (settings[i * 2] + 2) * 2] * this.objects[i].width));
                                this.nodes[v].setY(this.objects[i].y + (ICyPoints["pin" + (settings[i * 2] + 2) * 2][nodeLinks[(v * 4) + 2] + rotateAngle[i] * (settings[i * 2] + 2) * 2] * this.objects[i].height));
                            }
                        }
                    }
                    if (nodeLinks[v * 4] == -3) {
                        this.nodes[v].setX(this.nodes[v + 1].x);
                        this.nodes[v].setY(this.nodes[v + 1].y);
                    }
                    if (nodeLinks[v * 4] <= -4) {
                        this.nodes[v].setX(this.nodes[0 - (nodeLinks[v * 4] + 4)].x);
                        this.nodes[v].setY(this.nodes[0 - (nodeLinks[v * 4] + 4)].y);
                    }
                }

                for (var v = 0; v < this.nodes.length; v++) {
                    if (nodeLinks[v * 8] >= 0) {
                        if (nodeLinks[(v * 8) + 1] == i) {
                            this.wireLines[nodeLinks[v * 8]].setTo(this.nodes[v * 2].x, this.nodes[v * 2].y, this.wireLines[nodeLinks[v * 8]].geom.x2, this.wireLines[nodeLinks[v * 8]].geom.y2);
                        }
                    }
                    if (nodeLinks[(v * 8) + 4] >= 0) {
                        if (nodeLinks[(v * 8) + 5] == i) {
                            this.wireLines[nodeLinks[(v * 8) + 4]].setTo(this.wireLines[nodeLinks[(v * 8) + 4]].geom.x1, this.wireLines[nodeLinks[(v * 8) + 4]].geom.y1, this.nodes[(v * 2) + 1].x, this.nodes[(v * 2) + 1].y);
                        }
                    }
                    if (nodeLinks[v * 4] == -3) {
                        this.wireLines[nodeLinks[(v * 4) + 2]].setTo(this.wireLines[nodeLinks[(v * 4) + 1]].geom.x1, this.wireLines[nodeLinks[(v * 4) + 1]].geom.y1, this.nodes[v].x, this.nodes[v].y);
                    }
                    if (nodeLinks[v * 4] == -2 || nodeLinks[v * 4] <= -4) {
                        this.wireLines[nodeLinks[(v * 4) + 2]].setTo(this.nodes[v].x, this.nodes[v].y, this.wireLines[nodeLinks[(v * 4) + 1]].geom.x2, this.wireLines[nodeLinks[(v * 4) + 1]].geom.y2);
                    }
                }
                for (var v = 0; v < this.wires.length; v++) {
                    this.wires[v].x = (this.wireLines[v].geom.x1 + this.wireLines[v].geom.x2) / 2;
                    this.wires[v].y = (this.wireLines[v].geom.y1 + this.wireLines[v].geom.y2) / 2;
                    this.wires[v].height = Math.sqrt(Math.pow(Math.abs(this.wireLines[v].geom.x1 - this.wireLines[v].geom.x2), 2) + Math.pow(Math.abs(this.wireLines[v].geom.y1 - this.wireLines[v].geom.y2), 2));

                    if ((this.wireLines[v].geom.x1 < this.wireLines[v].geom.x2 && this.wireLines[v].geom.y1 < this.wireLines[v].geom.y2) || (this.wireLines[v].geom.x1 > this.wireLines[v].geom.x2 && this.wireLines[v].geom.y1 > this.wireLines[v].geom.y2)) {
                        this.wires[v].setAngle((-Math.atan(Math.abs(this.wireLines[v].geom.x1 - this.wireLines[v].geom.x2) / Math.abs(this.wireLines[v].geom.y1 - this.wireLines[v].geom.y2))) * (180 / Math.PI));
                    }
                    if ((this.wireLines[v].geom.x1 > this.wireLines[v].geom.x2) && (this.wireLines[v].geom.y1 < this.wireLines[v].geom.y2) || (this.wireLines[v].geom.x1 < this.wireLines[v].geom.x2 && this.wireLines[v].geom.y1 > this.wireLines[v].geom.y2)) {
                        this.wires[v].setAngle((Math.atan(Math.abs(this.wireLines[v].geom.x1 - this.wireLines[v].geom.x2) / Math.abs(this.wireLines[v].geom.y1 - this.wireLines[v].geom.y2))) * (180 / Math.PI));
                    }
                    if (this.wireLines[v].geom.y1 == this.wireLines[v].geom.y2) {
                        this.wires[v].setAngle(90);
                    }
                    if (this.wireLines[v].geom.x1 == this.wireLines[v].geom.x2) {
                        this.wires[v].setAngle(0);
                    }
                    this.wires[v].setOrigin(0.5, 0.5);
                }

                if (this.slash.scale > 0.01 && this.popup.visible == 0) {
                    if (this.objectIDs[i] != 4 && this.objectIDs[i] != 12) {
                        for (var v = 0; v < wiringXPoints["x" + this.objectIDs[i]].length / 4; v++) {
                            if (activeWireXY[0] == i && activeWireXY[1] == v) {
                                activeWireXY[2] = this.objects[i].x + (wiringXPoints["x" + this.objectIDs[i]][v + rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].width);
                                activeWireXY[3] = this.objects[i].y + (wiringYPoints["y" + this.objectIDs[i]][v + rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].height);
                            }
                            if (activeWire == true) {
                                if (this.penSlash.visible == 1) {
                                    this.activeWire.setTo(activeWireXY[2], activeWireXY[3], this.input.mousePointer.x, this.input.mousePointer.y);
                                    this.activeWire.setVisible(1);
                                    if (down == true && noHover == true) {
                                        if (this.input.mousePointer.x >= (this.objects[i].x + (wiringXPoints["x" + this.objectIDs[i]][v + rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].width)) - deviceWidth * 0.01 && this.input.mousePointer.x <= (this.objects[i].x + (wiringXPoints["x" + this.objectIDs[i]][v + rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].width)) + deviceWidth * 0.01 && this.input.mousePointer.y <= (this.objects[i].y + (wiringYPoints["y" + this.objectIDs[i]][v + rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].height)) + deviceHeight * 0.015 && this.input.mousePointer.y >= (this.objects[i].y + (wiringYPoints["y" + this.objectIDs[i]][v + rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].height)) - deviceHeight * 0.015 && !(activeWireXY[0] == i && activeWireXY[1] == v)) {
                                            activeWire = false;
                                            this.activeWire.setVisible(0);
                                            var node = this.add.circle(activeWireXY[2], activeWireXY[3], 8 * scaleCount, wireColor);
                                            node.setDepth(4);
                                            this.nodes.push(node);
                                            var node2 = this.add.circle(this.objects[i].x + (wiringXPoints["x" + this.objectIDs[i]][v + rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].width), this.objects[i].y + (wiringYPoints["y" + this.objectIDs[i]][v + rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].height), 8 * scaleCount, wireColor);
                                            node2.setDepth(4);
                                            if (this.objectIDs[i] == 10) {
                                                node2.enableClick();
                                            }
                                            this.nodes.push(node2);
                                            wireGroup++;
                                            nodeLinks.push(this.wireLines.length);
                                            nodeLinks.push(activeWireXY[0]);
                                            nodeLinks.push(activeWireXY[1]);
                                            nodeLinks.push(wireGroup);
                                            nodeLinks.push(this.wireLines.length);
                                            nodeLinks.push(i);
                                            nodeLinks.push(v);
                                            nodeLinks.push(wireGroup);

                                            var obj = this.add.line(node.x, node.y, node2.x, node2.y, 0xffffff);
                                            obj.setLineWidth(3.8 * scaleCount);
                                            obj.setDepth(3.5);
                                            this.wireLines.push(obj);
                                            var obj2;
                                            obj2 = this.add.rectangle((obj.geom.x1 + obj.geom.x2) / 2, (obj.geom.y1 + obj.geom.y2) / 2, lineWidth, Math.sqrt(Math.pow(Math.abs(obj.geom.x1 - obj.geom.x2), 2) + Math.pow(Math.abs(obj.geom.y1 - obj.geom.y2), 2)), wireColor)
                                            obj2.setDepth(3.5);
                                            obj2.setAngle(-Math.atan(Math.abs(obj.geom.x1 - obj.geom.x2) / Math.abs(obj.geom.y1 - obj.geom.y2)) * 180 / Math.PI);
                                            obj2.enableClick();
                                            this.wires.push(obj2);
                                            down = false;

                                            lastWire = this.wires.length - 1;
                                            this.createPalette(lastWire);

                                            undo.push("createdWire");
                                            undo.push(this.wires.length - 1);
                                            undo.push(this.nodes.length - 2);
                                            undo.push(this.nodes.length - 1);
                                            redo.splice(0, redo.length);
                                        }
                                    }
                                }
                                this.activeWire.setDepth(4);
                                this.activeWire.strokeColor = wireColor;
                            }
                            if (this.penSlash.visible == 1) {
                                if (this.input.mousePointer.x >= (this.objects[i].x + (wiringXPoints["x" + this.objectIDs[i]][v + rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].width)) - deviceWidth * 0.01 && this.input.mousePointer.x <= (this.objects[i].x + (wiringXPoints["x" + this.objectIDs[i]][v + rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].width)) + deviceWidth * 0.01 && this.input.mousePointer.y <= (this.objects[i].y + (wiringYPoints["y" + this.objectIDs[i]][v + rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].height)) + deviceHeight * 0.015 && this.input.mousePointer.y >= (this.objects[i].y + (wiringYPoints["y" + this.objectIDs[i]][v + rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].height)) - deviceHeight * 0.015) {
                                    if (this.objectIDs[i] != 10 || this.penSlash.visible == 0) {
                                        wiringPointer = true;
                                        this.wiringPointer.x = this.objects[i].x + (wiringXPoints["x" + this.objectIDs[i]][v + rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].width)
                                        this.wiringPointer.y = this.objects[i].y + (wiringYPoints["y" + this.objectIDs[i]][v + rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].height);
                                        this.wiringPointer.radius = 8 * scaleCount;
                                        this.wiringPointer.setVisible(1);
                                        pElement.style.cursor = "url('assets/hand.png'), auto";
                                        if (down == true && noHover == true) {
                                            if (activeWire == false) {
                                                activeWire = true;
                                                this.clearPanel()
                                                activeWireXY[0] = i;
                                                activeWireXY[1] = v;
                                                activeWireXY[2] = this.objects[i].x + (wiringXPoints["x" + this.objectIDs[i]][v + rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].width);
                                                activeWireXY[3] = this.objects[i].y + (wiringYPoints["y" + this.objectIDs[i]][v + rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].height);
                                                down = false;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (this.objectIDs[i] == 4) {
                        for (var v = 0; v < (settings[i * 2] + 1) * 2; v++) {
                            if (activeWireXY[0] == i && activeWireXY[1] == v) {
                                activeWireXY[2] = this.objects[i].x + (buttonxPoints["pin" + (settings[i * 2] + 1) * 2][v + rotateAngle[i] * (settings[i * 2] + 1) * 2] * this.objects[i].width);
                                activeWireXY[3] = this.objects[i].y + (buttonyPoints["pin" + (settings[i * 2] + 1) * 2][v + rotateAngle[i] * (settings[i * 2] + 1) * 2] * this.objects[i].height);
                            }
                            if (activeWire == true) {
                                if (this.penSlash.visible == 1) {
                                    this.activeWire.setTo(activeWireXY[2], activeWireXY[3], this.input.mousePointer.x, this.input.mousePointer.y);
                                    this.activeWire.setVisible(1);
                                    this.activeWire.setDepth(4);
                                    this.activeWire.strokeColor = wireColor;
                                    if (down == true && noHover == true && this.objectIDs[i] != 10) {
                                        if (this.input.mousePointer.x >= (this.objects[i].x + (buttonxPoints["pin" + (settings[i * 2] + 1) * 2][v + rotateAngle[i] * (settings[i * 2] + 1) * 2] * this.objects[i].width)) - deviceWidth * 0.01 && this.input.mousePointer.x <= (this.objects[i].x + (buttonxPoints["pin" + (settings[i * 2] + 1) * 2][v + rotateAngle[i] * (settings[i * 2] + 1) * 2] * this.objects[i].width)) + deviceWidth * 0.01 && this.input.mousePointer.y <= (this.objects[i].y + (buttonyPoints["pin" + (settings[i * 2] + 1) * 2][v + rotateAngle[i] * (settings[i * 2] + 1) * 2] * this.objects[i].height)) + deviceHeight * 0.015 && this.input.mousePointer.y >= (this.objects[i].y + (buttonyPoints["pin" + (settings[i * 2] + 1) * 2][v + rotateAngle[i] * (settings[i * 2] + 1) * 2] * this.objects[i].height)) - deviceHeight * 0.015 && !(activeWireXY[0] == i && activeWireXY[1] == v)) {
                                            activeWire = false;
                                            this.activeWire.setVisible(0);
                                            var node = this.add.circle(activeWireXY[2], activeWireXY[3], 8 * scaleCount, wireColor);
                                            node.setDepth(4);
                                            this.nodes.push(node);
                                            var node2 = this.add.circle(this.objects[i].x + (buttonxPoints["pin" + (settings[i * 2] + 1) * 2][v + rotateAngle[i] * (settings[i * 2] + 1) * 2] * this.objects[i].width), this.objects[i].y + (buttonyPoints["pin" + (settings[i * 2] + 1) * 2][v + rotateAngle[i] * (settings[i * 2] + 1) * 2] * this.objects[i].height), 8 * scaleCount, wireColor);
                                            node2.setDepth(4);
                                            this.nodes.push(node2);
                                            wireGroup++;
                                            nodeLinks.push(this.wireLines.length);
                                            nodeLinks.push(activeWireXY[0]);
                                            nodeLinks.push(activeWireXY[1]);
                                            nodeLinks.push(wireGroup);
                                            nodeLinks.push(this.wireLines.length);
                                            nodeLinks.push(i);
                                            nodeLinks.push(v);
                                            nodeLinks.push(wireGroup);

                                            var obj = this.add.line(node.x, node.y, node2.x, node2.y, 0xffffff);
                                            obj.setLineWidth(3.8 * scaleCount);
                                            obj.setDepth(3.5);
                                            this.wireLines.push(obj);
                                            var obj2;
                                            obj2 = this.add.rectangle((obj.geom.x1 + obj.geom.x2) / 2, (obj.geom.y1 + obj.geom.y2) / 2, lineWidth, Math.sqrt(Math.pow(Math.abs(obj.geom.x1 - obj.geom.x2), 2) + Math.pow(Math.abs(obj.geom.y1 - obj.geom.y2), 2)), wireColor)
                                            obj2.setDepth(3.5);
                                            obj2.setAngle(-Math.atan(Math.abs(obj.geom.x1 - obj.geom.x2) / Math.abs(obj.geom.y1 - obj.geom.y2)) * 180 / Math.PI);
                                            obj2.enableClick();
                                            this.wires.push(obj2);
                                            down = false;

                                            lastWire = this.wires.length - 1;
                                            this.createPalette(lastWire);

                                            undo.push("createdWire");
                                            undo.push(this.wires.length - 1);
                                            undo.push(this.nodes.length - 2);
                                            undo.push(this.nodes.length - 1);
                                            redo.splice(0, redo.length);
                                        }
                                    }
                                }
                            }
                            if (this.input.mousePointer.x >= (this.objects[i].x + (buttonxPoints["pin" + (settings[i * 2] + 1) * 2][v + rotateAngle[i] * (settings[i * 2] + 1) * 2] * this.objects[i].width)) - deviceWidth * 0.01 && this.input.mousePointer.x <= (this.objects[i].x + (buttonxPoints["pin" + (settings[i * 2] + 1) * 2][v + rotateAngle[i] * (settings[i * 2] + 1) * 2] * this.objects[i].width)) + deviceWidth * 0.01 && this.input.mousePointer.y <= (this.objects[i].y + (buttonyPoints["pin" + (settings[i * 2] + 1) * 2][v + rotateAngle[i] * (settings[i * 2] + 1) * 2] * this.objects[i].height)) + deviceHeight * 0.015 && this.input.mousePointer.y >= (this.objects[i].y + (buttonyPoints["pin" + (settings[i * 2] + 1) * 2][v + rotateAngle[i] * (settings[i * 2] + 1) * 2] * this.objects[i].height)) - deviceHeight * 0.015) {
                                wiringPointer = true;
                                this.wiringPointer.x = this.objects[i].x + (buttonxPoints["pin" + (settings[i * 2] + 1) * 2][v + rotateAngle[i] * (settings[i * 2] + 1) * 2] * this.objects[i].width)
                                this.wiringPointer.y = this.objects[i].y + (buttonyPoints["pin" + (settings[i * 2] + 1) * 2][v + rotateAngle[i] * (settings[i * 2] + 1) * 2] * this.objects[i].height);
                                this.wiringPointer.radius = 8 * scaleCount;
                                this.wiringPointer.setVisible(1);
                                pElement.style.cursor = "url('assets/hand.png'), auto";
                                if (down == true && noHover == true) {
                                    if (activeWire == false) {
                                        activeWire = true;
                                        this.clearPanel()
                                        activeWireXY[0] = i;
                                        activeWireXY[1] = v;
                                        activeWireXY[2] = this.objects[i].x + (buttonxPoints["pin" + (settings[i * 2] + 1) * 2][v + rotateAngle[i] * (settings[i * 2] + 1) * 2] * this.objects[i].width);
                                        activeWireXY[3] = this.objects[i].y + (buttonyPoints["pin" + (settings[i * 2] + 1) * 2][v + rotateAngle[i] * (settings[i * 2] + 1) * 2] * this.objects[i].height);
                                        down = false;
                                    }
                                }
                            }
                        }
                    }
                    if (this.objectIDs[i] == 12) { // Only for IC chip
                        for (var v = 0; v < (settings[i * 2] + 2) * 2; v++) {
                            if (activeWireXY[0] == i && activeWireXY[1] == v) {
                                activeWireXY[2] = this.objects[i].x + (ICxPoints["pin" + (settings[i * 2] + 2) * 2][v + rotateAngle[i] * (settings[i * 2] + 2) * 2] * this.objects[i].width);
                                activeWireXY[3] = this.objects[i].y + (ICyPoints["pin" + (settings[i * 2] + 2) * 2][v + rotateAngle[i] * (settings[i * 2] + 2) * 2] * this.objects[i].height);
                            }
                            if (activeWire == true) {
                                if (this.penSlash.visible == 1) {
                                    this.activeWire.setTo(activeWireXY[2], activeWireXY[3], this.input.mousePointer.x, this.input.mousePointer.y);
                                    this.activeWire.setVisible(1);
                                    this.activeWire.setDepth(4);
                                    this.activeWire.strokeColor = wireColor;
                                    if (down == true && noHover == true && this.objectIDs[i] != 10) {
                                        if (this.input.mousePointer.x >= (this.objects[i].x + (ICxPoints["pin" + (settings[i * 2] + 2) * 2][v + rotateAngle[i] * (settings[i * 2] + 2) * 2] * this.objects[i].width)) - deviceWidth * 0.01 && this.input.mousePointer.x <= (this.objects[i].x + (ICxPoints["pin" + (settings[i * 2] + 2) * 2][v + rotateAngle[i] * (settings[i * 2] + 2) * 2] * this.objects[i].width)) + deviceWidth * 0.01 && this.input.mousePointer.y <= (this.objects[i].y + (ICyPoints["pin" + (settings[i * 2] + 2) * 2][v + rotateAngle[i] * (settings[i * 2] + 2) * 2] * this.objects[i].height)) + deviceHeight * 0.015 && this.input.mousePointer.y >= (this.objects[i].y + (ICyPoints["pin" + (settings[i * 2] + 2) * 2][v + rotateAngle[i] * (settings[i * 2] + 2) * 2] * this.objects[i].height)) - deviceHeight * 0.015 && !(activeWireXY[0] == i && activeWireXY[1] == v)) {
                                            activeWire = false;
                                            this.activeWire.setVisible(0);
                                            var node = this.add.circle(activeWireXY[2], activeWireXY[3], 8 * scaleCount, wireColor);
                                            node.setDepth(4);
                                            this.nodes.push(node);
                                            var node2 = this.add.circle(this.objects[i].x + (ICxPoints["pin" + (settings[i * 2] + 2) * 2][v + rotateAngle[i] * (settings[i * 2] + 2) * 2] * this.objects[i].width), this.objects[i].y + (ICyPoints["pin" + (settings[i * 2] + 2) * 2][v + rotateAngle[i] * (settings[i * 2] + 2) * 2] * this.objects[i].height), 8 * scaleCount, wireColor);
                                            node2.setDepth(4);
                                            this.nodes.push(node2);
                                            wireGroup++;
                                            nodeLinks.push(this.wireLines.length);
                                            nodeLinks.push(activeWireXY[0]);
                                            nodeLinks.push(activeWireXY[1]);
                                            nodeLinks.push(wireGroup);
                                            nodeLinks.push(this.wireLines.length);
                                            nodeLinks.push(i);
                                            nodeLinks.push(v);
                                            nodeLinks.push(wireGroup);

                                            var obj = this.add.line(node.x, node.y, node2.x, node2.y, 0xffffff);
                                            obj.setLineWidth(3.8 * scaleCount);
                                            obj.setDepth(3.5);
                                            this.wireLines.push(obj);
                                            var obj2;
                                            obj2 = this.add.rectangle((obj.geom.x1 + obj.geom.x2) / 2, (obj.geom.y1 + obj.geom.y2) / 2, lineWidth, Math.sqrt(Math.pow(Math.abs(obj.geom.x1 - obj.geom.x2), 2) + Math.pow(Math.abs(obj.geom.y1 - obj.geom.y2), 2)), wireColor)
                                            obj2.setDepth(3.5);
                                            obj2.setAngle(-Math.atan(Math.abs(obj.geom.x1 - obj.geom.x2) / Math.abs(obj.geom.y1 - obj.geom.y2)) * 180 / Math.PI);
                                            obj2.enableClick();
                                            this.wires.push(obj2);
                                            down = false;

                                            lastWire = this.wires.length - 1;
                                            this.createPalette(lastWire);

                                            undo.push("createdWire");
                                            undo.push(this.wires.length - 1);
                                            undo.push(this.nodes.length - 2);
                                            undo.push(this.nodes.length - 1);
                                            redo.splice(0, redo.length);
                                        }
                                    }
                                }
                            }
                            if (this.input.mousePointer.x >= (this.objects[i].x + (ICxPoints["pin" + (settings[i * 2] + 2) * 2][v + rotateAngle[i] * (settings[i * 2] + 2) * 2] * this.objects[i].width)) - deviceWidth * 0.01 && this.input.mousePointer.x <= (this.objects[i].x + (ICxPoints["pin" + (settings[i * 2] + 2) * 2][v + rotateAngle[i] * (settings[i * 2] + 2) * 2] * this.objects[i].width)) + deviceWidth * 0.01 && this.input.mousePointer.y <= (this.objects[i].y + (ICyPoints["pin" + (settings[i * 2] + 2) * 2][v + rotateAngle[i] * (settings[i * 2] + 2) * 2] * this.objects[i].height)) + deviceHeight * 0.015 && this.input.mousePointer.y >= (this.objects[i].y + (ICyPoints["pin" + (settings[i * 2] + 2) * 2][v + rotateAngle[i] * (settings[i * 2] + 2) * 2] * this.objects[i].height)) - deviceHeight * 0.015) {
                                wiringPointer = true;
                                this.wiringPointer.x = this.objects[i].x + (ICxPoints["pin" + (settings[i * 2] + 2) * 2][v + rotateAngle[i] * (settings[i * 2] + 2) * 2] * this.objects[i].width)
                                this.wiringPointer.y = this.objects[i].y + (ICyPoints["pin" + (settings[i * 2] + 2) * 2][v + rotateAngle[i] * (settings[i * 2] + 2) * 2] * this.objects[i].height);
                                this.wiringPointer.radius = 8 * scaleCount;
                                this.wiringPointer.setVisible(1);
                                pElement.style.cursor = "url('assets/hand.png'), auto";
                                if (down == true && noHover == true) {
                                    if (activeWire == false) {
                                        activeWire = true;
                                        this.clearPanel()
                                        activeWireXY[0] = i;
                                        activeWireXY[1] = v;
                                        activeWireXY[2] = this.objects[i].x + (ICxPoints["pin" + (settings[i * 2] + 2) * 2][v + rotateAngle[i] * (settings[i * 2] + 2) * 2] * this.objects[i].width);
                                        activeWireXY[3] = this.objects[i].y + (ICyPoints["pin" + (settings[i * 2] + 2) * 2][v + rotateAngle[i] * (settings[i * 2] + 2) * 2] * this.objects[i].height);
                                        down = false;
                                    }
                                }
                            }
                        }
                    }
                }

                if (this.objects[i].isClicked()) {
                    if (this.slash.visible == 0) {
                        if (this.objectIDs[i] != 4 && this.objectIDs[i] != 12) {
                            for (var v = -10000; v < 10000; v++) {
                                if (Math.abs(((v * 28 * scaleCount + (snapStartX % (28 * scaleCount))) - ((wiringXPoints["x" + this.objectIDs[i]][rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].width) + this.objects[i].x))) < (28 * scaleCount) / 2) {
                                    this.objects[i].x = (v * 28 * scaleCount + (snapStartX % (28 * scaleCount))) - (wiringXPoints["x" + this.objectIDs[i]][rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].width);
                                }
                            }
                            for (var v = -10000; v < 10000; v++) {
                                if (Math.abs(((v * 28 * scaleCount + (snapStartY % (28 * scaleCount))) - ((wiringYPoints["y" + this.objectIDs[i]][rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].height) + this.objects[i].y))) < (28 * scaleCount) / 2) {
                                    this.objects[i].y = (v * 28 * scaleCount + (snapStartY % (28 * scaleCount))) - (wiringYPoints["y" + this.objectIDs[i]][rotateAngle[i] * objectsData[(this.objectIDs[i] * 5) + 3]] * this.objects[i].height);
                                }
                            }
                        }
                        if (this.objectIDs[i] == 4) {
                            for (var v = -10000; v < 10000; v++) {
                                if (Math.abs(((v * 28 * scaleCount + (snapStartX % (28 * scaleCount))) - ((buttonxPoints["pin" + (settings[i * 2] + 1) * 2][rotateAngle[i] * ((settings[i * 2] + 1) * 2)] * this.objects[i].width) + this.objects[i].x))) < (28 * scaleCount) / 2) {
                                    this.objects[i].x = (v * 28 * scaleCount + (snapStartX % (28 * scaleCount))) - (buttonxPoints["pin" + (settings[i * 2] + 1) * 2][rotateAngle[i] * ((settings[i * 2] + 1) * 2)] * this.objects[i].width);
                                }
                            }
                            for (var v = -10000; v < 10000; v++) {
                                if (Math.abs(((v * 28 * scaleCount + (snapStartY % (28 * scaleCount))) - ((buttonyPoints["pin" + (settings[i * 2] + 1) * 2][rotateAngle[i] * ((settings[i * 2] + 1) * 2)] * this.objects[i].height) + this.objects[i].y))) < (28 * scaleCount) / 2) {
                                    this.objects[i].y = (v * 28 * scaleCount + (snapStartY % (28 * scaleCount))) - (buttonyPoints["pin" + (settings[i * 2] + 1) * 2][rotateAngle[i] * ((settings[i * 2] + 1) * 2)] * this.objects[i].height);
                                }
                            }
                        }
                        if (this.objectIDs[i] == 12) {
                            for (var v = -10000; v < 10000; v++) {
                                if (Math.abs(((v * 28 * scaleCount + (snapStartX % (28 * scaleCount))) - ((ICxPoints["pin" + (settings[i * 2] + 2) * 2][rotateAngle[i] * ((settings[i * 2] + 2) * 2)] * this.objects[i].width) + this.objects[i].x))) < (28 * scaleCount) / 2) {
                                    this.objects[i].x = (v * 28 * scaleCount + (snapStartX % (28 * scaleCount))) - (ICxPoints["pin" + (settings[i * 2] + 2) * 2][rotateAngle[i] * ((settings[i * 2] + 2) * 2)] * this.objects[i].width);
                                }
                            }
                            for (var v = -10000; v < 10000; v++) {
                                if (Math.abs(((v * 28 * scaleCount + (snapStartY % (28 * scaleCount))) - ((ICyPoints["pin" + (settings[i * 2] + 2) * 2][rotateAngle[i] * ((settings[i * 2] + 2) * 2)] * this.objects[i].height) + this.objects[i].y))) < (28 * scaleCount) / 2) {
                                    this.objects[i].y = (v * 28 * scaleCount + (snapStartY % (28 * scaleCount))) - (ICyPoints["pin" + (settings[i * 2] + 2) * 2][rotateAngle[i] * ((settings[i * 2] + 2) * 2)] * this.objects[i].height);
                                }
                            }
                        }
                    }
                }
                endingX[i] = this.objects[i].x;
                endingY[i] = this.objects[i].y;
            }
            if (this.objectIDs[i] == 10) {
                for (var v = 0; v < this.nodes.length; v++) {
                    if (nodeLinks[(v * 4) + 1] == i) {
                        this.objects[i].x = this.nodes[v].x;
                        this.objects[i].y = this.nodes[v].y;
                    }
                }
            }
        }

        var moved = -1;
        if (this.shiftSelect.length > 0) {
            for (var v = 0; v < this.shiftSelect.length; v++) {
                if (startingX[v] != endingX[v] || startingY[v] != endingY[v]) {
                    moved = v;
                }
            }
            for (var v = 0; v < this.shiftSelect.length; v++) {
                if (this.shiftSelect[v] != this.objects[moved] && moved != -1) {
                    this.shiftSelect[v].x += (endingX[moved] - startingX[moved]);
                    this.shiftSelect[v].y += (endingY[moved] - startingY[moved]);
                }
            }
        }

        if (wiringPointer == false) {
            this.wiringPointer.setVisible(0);
        }

        if (autoSave == true && undo.length != 0 && undo.length / 4 % autoFrequency == 0 && autoSaved == undo.length / 4) {
            autoSaved += autoFrequency;
            this.save.setVisible(0);
            this.saved.setVisible(1);

            var textFileUrl = null;

            function generateTextFileUrl(txt) {
                let fileData = new Blob([txt], {
                    type: 'text/plain'
                });

                if (textFileUrl !== null) {
                    window.URL.revokeObjectURL(textFile);
                }
                textFileUrl = window.URL.createObjectURL(fileData);

                return textFileUrl;
            };

            this.clearHTML();
            document.getElementById('downloads').innerHTML = "Downloads: ";

            var wiresData = [];
            wiresData.push(customColors.length);
            wiresData.push(customColors);
            wiresData.push(nodeLinks.length);
            wiresData.push(nodeLinks);
            for (var v = 0; v < this.wires.length; v++) {
                wiresData.push(this.wires[v].visible);
                wiresData.push(this.wireLines[v].geom.x1);
                wiresData.push(this.wireLines[v].geom.y1);
                wiresData.push(this.wireLines[v].geom.x2);
                wiresData.push(this.wireLines[v].geom.y2);
            }

            document.getElementById('download0').innerHTML = "Wires Data";
            document.getElementById('download0').download = "WiresData.txt";
            document.getElementById('download0').href = generateTextFileUrl(wiresData);
            document.getElementById('download0').click();

            textFileUrl = null;

            var nodesData = [];
            nodesData.push(this.grid.x);
            nodesData.push(this.grid.y);
            for (var v = 0; v < this.nodes.length; v++) {
                nodesData.push(this.nodes[v].visible);
                nodesData.push(this.nodes[v].x);
                nodesData.push(this.nodes[v].y);
                nodesData.push(this.nodes[v].fillColor);
            }

            document.getElementById('download1').innerHTML = "Nodes Data";
            document.getElementById('download1').download = "NodesData.txt";
            document.getElementById('download1').href = generateTextFileUrl(nodesData);
            document.getElementById('download1').click();

            textFileUrl = null;

            var objectData = [];
            objectData.push(scaleCount);
            objectData.push(this.objects.length);
            objectData.push(customObjectColors.length + 3);
            objectData.push(customObjectColors);
            for (var v = 0; v < this.objects.length; v++) {
                objectData.push(this.objects[v].visible);
                objectData.push(this.objects[v].x);
                objectData.push(this.objects[v].y);
                objectData.push(this.objectIDs[v]);
                objectData.push(rotateAngle[v]);
                objectData.push(this.objects[v].depth);
                objectData.push(settings[v * 2]);
                objectData.push('"' + settings[(v * 2) + 1] + '"');
                var labelAvail = -1;
                for (var t = 0; t < defaultLabel.length / 14; t++) {
                    if (defaultLabel[t * 14] == this.objectIDs[v]) {
                        labelAvail = t;
                    }
                }
                if (labelAvail != -1) {
                    objectData.push('"' + settings[(v * 2) + 1] + '"');
                } else {
                    objectData.push("");
                }
            }

            document.getElementById('download2').innerHTML = "Objects Data";
            document.getElementById('download2').download = "ObjectsData.txt";
            document.getElementById('download2').href = generateTextFileUrl(objectData);
            document.getElementById('download2').click();

            this.clearHTML();
        }
        if (undo.length / 4 % autoFrequency != 0 && this.slash.scale > 0.01) {
            this.save.setVisible(1);
            this.saved.setVisible(0);
        }

        if (this.undo.wasClicked() || (element == null && this.z.wasPressed())) {
            if (undo.length >= 4) {
                redo.push(undo[undo.length - 4]);
                redo.push(undo[undo.length - 3]);
                redo.push(undo[undo.length - 2]);
                redo.push(undo[undo.length - 1]);
                if (undo[undo.length - 4] == "deletedObject") {
                    this.objects[undo[undo.length - 3]].setVisible(1);
                    var labelID = -1;
                    for (var v = 0; v < objectLabelData.length; v++) {
                        if (undo[undo.length - 3] == objectLabelData[v]) {
                            labelID = v;
                        }
                    }
                    if (labelID != -1) {
                        this.objectLabels[labelID].setVisible(1);
                    }
                    for (var v = 0; v < undo[undo.length - 2].length; v++) {
                        this.wires[undo[undo.length - 2][v]].setVisible(1);
                        this.wireLines[undo[undo.length - 2][v]].setVisible(1);
                    }
                    for (var v = 0; v < undo[undo.length - 1].length; v++) {
                        this.nodes[undo[undo.length - 1][v]].setVisible(1);
                    }
                    if (this.objectIDs[undo[undo.length - 3]] == 2) {
                        for (var v = 0; v < resistorData.length / 5; v++) {
                            if (resistorData[v * 5] == [undo[undo.length - 3]]) {
                                this.resistorBars[v * 2].setVisible(1);
                                this.resistorBars[(v * 2) + 1].setVisible(1);
                            }
                        }
                    }
                    this.clearPanel();
                    this.openPanel(undo[undo.length - 3]);
                }
                if (undo[undo.length - 4] == "createdObject") {
                    this.objects[undo[undo.length - 3]].setVisible(0);
                    var labelID = -1;
                    for (var v = 0; v < objectLabelData.length; v++) {
                        if (undo[undo.length - 3] == objectLabelData[v]) {
                            labelID = v;
                        }
                    }
                    if (labelID != -1) {
                        this.objectLabels[labelID].setVisible(0);
                    }
                    if (this.objectIDs[undo[undo.length - 3]] == 2) {
                        for (var v = 0; v < resistorData.length / 5; v++) {
                            if (resistorData[v * 5] == [undo[undo.length - 3]]) {
                                this.resistorBars[v * 2].setVisible(0);
                                this.resistorBars[(v * 2) + 1].setVisible(0);
                            }
                        }
                    }
                    this.clearPanel();
                }
                if (undo[undo.length - 4] == "movedObject") {
                    redo[redo.length - 2] = -undo[undo.length - 2];
                    redo[redo.length - 1] = -undo[undo.length - 1];
                    this.objects[-undo[undo.length - 3] - 1].x += undo[undo.length - 2];
                    this.objects[-undo[undo.length - 3] - 1].y += undo[undo.length - 1];
                    lastPosition[0] = undo[undo.length - 3]
                    lastPosition[1] = this.objects[-undo[undo.length - 3] - 1].x;
                    lastPosition[2] = this.objects[-undo[undo.length - 3] - 1].y;
                }
                if (undo[undo.length - 4] == "createdWire") {
                    this.wires[undo[undo.length - 3]].setVisible(0);
                    this.wireLines[undo[undo.length - 3]].setVisible(0);
                    this.nodes[undo[undo.length - 2]].setVisible(0);
                    this.nodes[undo[undo.length - 1]].setVisible(0);
                    activeWire = false;
                    wiringPointer = false;
                    this.activeWire.setVisible(0);
                    if (this.objectIDs[nodeLinks[undo[undo.length - 1] * 4 + 1]] == 10) {
                        this.objects[nodeLinks[undo[undo.length - 1] * 4 + 1]].setVisible(0);
                    }
                }
                if (undo[undo.length - 4] == "subdividedWire") {
                    this.nodes[undo[undo.length - 3]].setVisible(0);
                    this.nodes[undo[undo.length - 3] + 1].setVisible(0);
                    this.wires[nodeLinks[undo[undo.length - 2] + 1]].setVisible(1);
                    this.wires[nodeLinks[undo[undo.length - 2] + 2]].setVisible(0);
                    this.wires[nodeLinks[undo[undo.length - 1] + 2]].setVisible(0);
                    this.wireLines[nodeLinks[undo[undo.length - 2] + 1]].setVisible(1);
                    this.wireLines[nodeLinks[undo[undo.length - 2] + 2]].setVisible(0);
                    this.wireLines[nodeLinks[undo[undo.length - 1] + 2]].setVisible(0);
                }
                if (undo[undo.length - 4] == "deletedWire") {
                    for (var v = 0; v < undo[undo.length - 3].length; v++) {
                        this.wires[undo[undo.length - 3][v]].setVisible(1);
                        this.wireLines[undo[undo.length - 3][v]].setVisible(1);
                    }
                    for (var v = 0; v < undo[undo.length - 2].length; v++) {
                        this.nodes[undo[undo.length - 2][v]].setVisible(1);
                    }
                    for (var v = 0; v < undo[undo.length - 1].length; v++) {
                        this.objects[undo[undo.length - 1][v]].setVisible(1);
                    }
                }
                if (undo[undo.length - 4] == "movedNode") {
                    redo[redo.length - 2] = -undo[undo.length - 2];
                    redo[redo.length - 1] = -undo[undo.length - 1];
                    this.nodes[undo[undo.length - 3]].x += undo[undo.length - 2];
                    this.nodes[undo[undo.length - 3]].y += undo[undo.length - 1];
                    this.nodes[undo[undo.length - 3]].radius = 8 * scaleCount;
                    lastPosition[0] = undo[undo.length - 3];
                    lastPosition[1] = this.nodes[undo[undo.length - 3]].x;
                    lastPosition[2] = this.nodes[undo[undo.length - 3]].y;
                }
                if (undo[undo.length - 4] == "rotatedObject") {
                    redo[redo.length - 2] = -undo[undo.length - 2];
                    redo[redo.length - 1] = this.objects[undo[undo.length - 3]].width;
                    this.objects[undo[undo.length - 3]].angle += undo[undo.length - 2];
                    this.objects[undo[undo.length - 3]].height = this.objects[undo[undo.length - 3]].width;
                    this.objects[undo[undo.length - 3]].width = undo[undo.length - 1];
                    if (undo[undo.length - 2] > 0) {
                        rotateAngle[undo[undo.length - 3]]++;
                    } else {
                        rotateAngle[undo[undo.length - 3]]--;
                    }
                    if (rotateAngle[undo[undo.length - 3]] == -1) {
                        rotateAngle[undo[undo.length - 3]] = 3;
                    }
                    if (rotateAngle[undo[undo.length - 3]] == 4) {
                        rotateAngle[undo[undo.length - 3]] = 0;
                    }
                }
                if (undo[undo.length - 4] == "arrangedObject") {
                    redo[redo.length - 1] = -undo[undo.length - 1];
                    for (var v = 0; v < this.objects.length; v++) {
                        this.objects[v].depth += undo[undo.length - 1];

                        var labelID = -1;
                        for (var t = 0; t < objectLabelData.length; t++) {
                            if (v == objectLabelData[t]) {
                                labelID = t;
                            }
                        }
                        if (labelID != -1) {
                            this.objectLabels[labelID].depth += undo[undo.length - 1];
                        }
                    }
                    redo[redo.length - 2] = this.objects[undo[undo.length - 3]].depth;
                    this.objects[undo[undo.length - 3]].setDepth(undo[undo.length - 2]);

                    var labelID = -1;
                    for (var v = 0; v < objectLabelData.length; v++) {
                        if (undo[undo.length - 3] == objectLabelData[v]) {
                            labelID = v;
                        }
                    }
                    if (labelID != -1) {
                        this.objectLabels[v].setDepth(undo[undo.length - 2]);
                    }
                }
                if (undo[undo.length - 4] == "wireColor") {
                    redo[redo.length - 3] = undo[undo.length - 2][0].fillColor;
                    for (var v = 0; v < undo[undo.length - 2].length; v++) {
                        undo[undo.length - 2][v].fillColor = undo[undo.length - 3];
                    }
                }
                if (undo[undo.length - 4] == "customColor") {
                    redo[redo.length - 3] = undo[undo.length - 2][0].fillColor;
                    customColors.splice(customColors.length - 1, 1);
                    for (var v = 0; v < undo[undo.length - 2].length; v++) {
                        undo[undo.length - 2][v].fillColor = undo[undo.length - 3];
                    }
                    this.clearPanel();
                    this.createPalette(undo[undo.length - 1]);
                }
                if (undo[undo.length - 4] == "deletedCustomColor") {
                    customColors.splice(undo[undo.length - 2], 0, undo[undo.length - 3]);
                    this.clearPanel();
                    this.createPalette(undo[undo.length - 1]);
                }
                if (undo[undo.length - 4] == "customObjectColor") {
                    redo[redo.length - 3] = settings[undo[undo.length - 2] * 2];
                    this.objects[undo[undo.length - 2]].setTint(undo[undo.length - 3]);
                    settings[undo[undo.length - 2] * 2] = undo[undo.length - 3];
                    this.clearPanel();
                    this.openPanel(undo[undo.length - 2]);
                }
                if (undo[undo.length - 4] == "customLabelColor") {
                    redo[redo.length - 3] = settings[undo[undo.length - 2] * 2];
                    var labelID = -1;
                    for (var v = 0; v < objectLabelData.length; v++) {
                        if (undo[undo.length - 2] == objectLabelData[v]) {
                            labelID = v;
                        }
                    }
                    this.objectLabels[labelID].setFontColor(undo[undo.length - 3]);
                    settings[undo[undo.length - 2] * 2] = undo[undo.length - 3];
                    this.clearPanel();
                    this.openPanel(undo[undo.length - 2]);
                }
                if (undo[undo.length - 4] == "deletedCustomObjectColor") {
                    customObjectColors.splice(undo[undo.length - 2], 0, undo[undo.length - 3]);
                    this.clearPanel();
                    this.openPanel(undo[undo.length - 1]);
                }
                if (undo[undo.length - 4] == "objectLabel") {
                    redo[redo.length - 3] = settings[undo[undo.length - 2] * 2 + 1];
                    var labelID = -1;
                    for (var v = 0; v < objectLabelData.length; v++) {
                        if (undo[undo.length - 2] == objectLabelData[v]) {
                            labelID = v;
                        }
                    }
                    if (labelAvail != -1) {
                        this.objectLabels[labelID].setText(undo[undo.length - 3]);
                    }
                    settings[undo[undo.length - 2] * 2 + 1] = undo[undo.length - 3];
                    if (panelType == 6 || panelType == 7 || panelType == 8 || panelType == 10 || panelType == 15 || panelType == 16 || panelType == 28 || panelType == 29 || panelType == 32 || panelType == 43 || panelType == 50) {
                        this.panelObjectLabel.setText(undo[undo.length - 3]);
                    }
                }
                if (undo[undo.length - 4] == "resistanceValue") {
                    redo[redo.length - 2] = [resistorData[undo[undo.length - 3] * 5], resistorData[(undo[undo.length - 3] * 5) + 1], resistorData[(undo[undo.length - 3] * 5) + 2], resistorData[(undo[undo.length - 3] * 5) + 3], resistorData[(undo[undo.length - 3] * 5) + 4]];
                    redo[redo.length - 1] = [settings[undo[undo.length - 3] * 2], settings[(undo[undo.length - 3] * 2) + 1]];
                    for (var v = 0; v < 5; v++) {
                        resistorData[(undo[undo.length - 3] * 5) + v] = undo[undo.length - 2][v];
                    }

                    var widthHolder = this.objects[undo[undo.length - 2][0]].width;
                    var heightHolder = this.objects[undo[undo.length - 2][0]].height;
                    this.resistorBars[undo[undo.length - 3] * 2].fillColor = undo[undo.length - 2][3];
                    this.resistorBars[(undo[undo.length - 3] * 2) + 1].fillColor = undo[undo.length - 2][2];
                    this.objects[undo[undo.length - 2][0]].setFrame(undo[undo.length - 2][4]);
                    this.objects[undo[undo.length - 2][0]].width = widthHolder;
                    this.objects[undo[undo.length - 2][0]].height = heightHolder;

                    if (panelType == 4) {
                        this.panelResistanceValue.setText(undo[undo.length - 1][0]);
                        this.panelResistanceUnit.setText(undo[undo.length - 1][1]);
                        settings[undo[undo.length - 2][0] * 2] = undo[undo.length - 1][0];
                        settings[(undo[undo.length - 2][0] * 2) + 1] = undo[undo.length - 1][1];
                    }
                }
                undo.splice(undo.length - 4, 4);
            }
        }

        if (this.redo.wasClicked() || (element == null && this.x.wasPressed())) {
            if (redo.length >= 4) {
                undo.push(redo[redo.length - 4]);
                undo.push(redo[redo.length - 3]);
                undo.push(redo[redo.length - 2]);
                undo.push(redo[redo.length - 1]);
                if (redo[redo.length - 4] == "deletedObject") {
                    this.objects[redo[redo.length - 3]].setVisible(0);
                    var labelID = -1;
                    for (var v = 0; v < objectLabelData.length; v++) {
                        if (redo[redo.length - 3] == objectLabelData[v]) {
                            labelID = v;
                        }
                    }
                    if (labelID != -1) {
                        this.objectLabels[labelID].setVisible(1);
                    }
                    for (var v = 0; v < redo[redo.length - 2].length; v++) {
                        this.wires[redo[redo.length - 2][v]].setVisible(0);
                        this.wireLines[redo[redo.length - 2][v]].setVisible(0);
                    }
                    for (var v = 0; v < redo[redo.length - 1].length; v++) {
                        this.nodes[redo[redo.length - 1][v]].setVisible(0);
                    }
                    if (this.objectIDs[undo[undo.length - 3]] == 2) {
                        for (var v = 0; v < resistorData.length / 5; v++) {
                            if (resistorData[v * 5] == [undo[undo.length - 3]]) {
                                this.resistorBars[v * 2].setVisible(0);
                                this.resistorBars[(v * 2) + 1].setVisible(0);
                            }
                        }
                    }
                    this.clearPanel();
                }
                if (redo[redo.length - 4] == "createdObject") {
                    this.objects[redo[redo.length - 3]].setVisible(1);
                    var labelID = -1;
                    for (var v = 0; v < objectLabelData.length; v++) {
                        if (redo[redo.length - 3] == objectLabelData[v]) {
                            labelID = v;
                        }
                    }
                    if (labelID != -1) {
                        this.objectLabels[labelID].setVisible(1);
                    }
                    if (this.objectIDs[redo[redo.length - 3]] == 2) {
                        for (var v = 0; v < resistorData.length / 5; v++) {
                            if (resistorData[v * 5] == [redo[redo.length - 3]]) {
                                this.resistorBars[v * 2].setVisible(1);
                                this.resistorBars[(v * 2) + 1].setVisible(1);
                            }
                        }
                    }
                    this.clearPanel();
                    this.openPanel(redo[redo.length - 3]);
                }
                if (redo[redo.length - 4] == "movedObject") {
                    undo[undo.length - 2] = -redo[redo.length - 2];
                    undo[undo.length - 1] = -redo[redo.length - 1];
                    this.objects[-redo[redo.length - 3] - 1].x += redo[redo.length - 2];
                    this.objects[-redo[redo.length - 3] - 1].y += redo[redo.length - 1];
                    lastPosition[0] = redo[redo.length - 3];
                    lastPosition[1] = this.objects[-redo[redo.length - 3] - 1].x;
                    lastPosition[2] = this.objects[-redo[redo.length - 3] - 1].y;
                }
                if (redo[redo.length - 4] == "createdWire") {
                    this.wires[redo[redo.length - 3]].setVisible(1);
                    this.wireLines[redo[redo.length - 3]].setVisible(1);
                    this.nodes[redo[redo.length - 2]].setVisible(1);
                    this.nodes[redo[redo.length - 1]].setVisible(1);
                    if (this.objectIDs[nodeLinks[undo[undo.length - 1] * 4 + 1]] == 10) {
                        this.objects[nodeLinks[undo[undo.length - 1] * 4 + 1]].setVisible(1);
                    }
                }
                if (redo[redo.length - 4] == "subdividedWire") {
                    this.nodes[redo[redo.length - 3]].setVisible(1);
                    this.nodes[redo[redo.length - 3] + 1].setVisible(1);
                    this.wires[nodeLinks[redo[redo.length - 2] + 1]].setVisible(0);
                    this.wires[nodeLinks[redo[redo.length - 2] + 2]].setVisible(1);
                    this.wires[nodeLinks[redo[redo.length - 1] + 2]].setVisible(1);
                    this.wireLines[nodeLinks[redo[redo.length - 2] + 1]].setVisible(0);
                    this.wireLines[nodeLinks[redo[redo.length - 2] + 2]].setVisible(1);
                    this.wireLines[nodeLinks[redo[redo.length - 1] + 2]].setVisible(1);
                }
                if (redo[redo.length - 4] == "deletedWire") {
                    for (var v = 0; v < redo[redo.length - 3].length; v++) {
                        this.wires[redo[redo.length - 3][v]].setVisible(0);
                        this.wireLines[redo[redo.length - 3][v]].setVisible(0);
                    }
                    for (var v = 0; v < redo[redo.length - 2].length; v++) {
                        this.nodes[redo[redo.length - 2][v]].setVisible(0);
                    }
                    for (var v = 0; v < redo[redo.length - 1].length; v++) {
                        this.objects[redo[redo.length - 1][v]].setVisible(0);
                    }
                }
                if (redo[redo.length - 4] == "movedNode") {
                    undo[undo.length - 2] = -redo[redo.length - 2];
                    undo[undo.length - 1] = -redo[redo.length - 1];
                    this.nodes[redo[redo.length - 3]].x += redo[redo.length - 2];
                    this.nodes[redo[redo.length - 3]].y += redo[redo.length - 1];
                    this.nodes[redo[redo.length - 3]].radius = 8 * scaleCount;
                    lastPosition[0] = redo[redo.length - 3];
                    lastPosition[1] = this.nodes[redo[redo.length - 3]].x;
                    lastPosition[2] = this.nodes[redo[redo.length - 3]].y;
                }
                if (redo[redo.length - 4] == "rotatedObject") {
                    undo[undo.length - 2] = -redo[redo.length - 2];
                    undo[undo.length - 1] = this.objects[redo[redo.length - 3]].width;
                    this.objects[redo[redo.length - 3]].angle += redo[redo.length - 2];
                    this.objects[redo[redo.length - 3]].height = this.objects[redo[redo.length - 3]].width;
                    this.objects[redo[redo.length - 3]].width = redo[redo.length - 1];
                    if (redo[redo.length - 2] > 0) {
                        rotateAngle[redo[redo.length - 3]]++;
                    } else {
                        rotateAngle[redo[redo.length - 3]]--;
                    }
                    if (rotateAngle[redo[redo.length - 3]] == -1) {
                        rotateAngle[redo[redo.length - 3]] = 3;
                    }
                    if (rotateAngle[redo[redo.length - 3]] == 4) {
                        rotateAngle[redo[redo.length - 3]] = 0;
                    }
                }
                if (undo[undo.length - 4] == "arrangedObject") {
                    undo[undo.length - 1] = -redo[redo.length - 1];
                    for (var v = 0; v < this.objects.length; v++) {
                        this.objects[v].depth += redo[redo.length - 1];

                        var labelID = -1;
                        for (var t = 0; t < objectLabelData.length; t++) {
                            if (v == objectLabelData[t]) {
                                labelID = t;
                            }
                        }
                        if (labelID != -1) {
                            this.objectLabels[labelID].depth += redo[redo.length - 1];
                        }
                    }
                    undo[undo.length - 2] = this.objects[redo[redo.length - 3]].depth;
                    this.objects[redo[redo.length - 3]].setDepth(redo[redo.length - 2]);

                    var labelID = -1;
                    for (var v = 0; v < objectLabelData.length; v++) {
                        if (redo[redo.length - 3] == objectLabelData[v]) {
                            labelID = v;
                        }
                    }
                    if (labelID != -1) {
                        this.objectLabels[v].setDepth(redo[redo.length - 2]);
                    }
                }
                if (redo[redo.length - 4] == "wireColor") {
                    undo[undo.length - 3] = redo[redo.length - 2][0].fillColor;
                    for (var v = 0; v < redo[redo.length - 2].length; v++) {
                        redo[redo.length - 2][v].fillColor = redo[redo.length - 3];
                    }
                }
                if (redo[redo.length - 4] == "customColor") {
                    undo[undo.length - 3] = redo[redo.length - 2][0].fillColor;
                    customColors.push(redo[redo.length - 3]);
                    for (var v = 0; v < redo[redo.length - 2].length; v++) {
                        redo[redo.length - 2][v].fillColor = redo[redo.length - 3];
                    }
                    this.clearPanel();
                    this.createPalette(redo[redo.length - 1]);
                }
                if (redo[redo.length - 4] == "deletedCustomColor") {
                    customColors.splice(redo[redo.length - 2], 1);
                    this.clearPanel();
                    this.createPalette(redo[redo.length - 1]);
                }
                if (redo[redo.length - 4] == "customObjectColor") {
                    undo[undo.length - 3] = settings[redo[redo.length - 2] * 2];
                    this.objects[redo[redo.length - 2]].setTint(redo[redo.length - 3]);
                    settings[redo[redo.length - 2] * 2] = redo[redo.length - 3];
                    this.clearPanel();
                    this.openPanel(redo[redo.length - 2]);
                }
                if (redo[redo.length - 4] == "customLabelColor") {
                    undo[undo.length - 3] = settings[redo[redo.length - 2] * 2];
                    var labelID = -1;
                    for (var v = 0; v < objectLabelData.length; v++) {
                        if (redo[redo.length - 2] == objectLabelData[v]) {
                            labelID = v;
                        }
                    }
                    this.objectLabels[labelID].setFontColor(redo[redo.length - 3]);
                    settings[redo[redo.length - 2] * 2] = redo[redo.length - 3];
                    this.clearPanel();
                    this.openPanel(redo[redo.length - 2]);
                }
                if (redo[redo.length - 4] == "deletedCustomObjectColor") {
                    customObjectColors.splice(redo[redo.length - 2], 1);
                    this.clearPanel();
                    this.openPanel(redo[redo.length - 1]);
                }
                if (redo[redo.length - 4] == "objectLabel") {
                    undo[undo.length - 3] = settings[redo[redo.length - 2] * 2 + 1];
                    var labelID = -1;
                    for (var v = 0; v < objectLabelData.length; v++) {
                        if (redo[redo.length - 2] == objectLabelData[v]) {
                            labelID = v;
                        }
                    }
                    if (labelAvail != -1) {
                        this.objectLabels[labelID].setText(redo[redo.length - 3]);
                    }
                    settings[redo[redo.length - 2] * 2 + 1] = redo[redo.length - 3];
                    if (panelType == 6 || panelType == 7 || panelType == 8 || panelType == 10 || panelType == 15 || panelType == 16 || panelType == 28 || panelType == 29 || panelType == 32 || panelType == 43 || panelType == 50) {
                        this.panelObjectLabel.setText(redo[redo.length - 3]);
                    }
                }
                if (redo[redo.length - 4] == "resistanceValue") {
                    undo[undo.length - 2] = [resistorData[redo[redo.length - 3] * 5], resistorData[(redo[redo.length - 3] * 5) + 1], resistorData[(redo[redo.length - 3] * 5) + 2], resistorData[(redo[redo.length - 3] * 5) + 3], resistorData[(redo[redo.length - 3] * 5) + 4]];
                    undo[undo.length - 1] = [settings[redo[redo.length - 3] * 2], settings[(redo[redo.length - 3] * 2) + 1]];
                    for (var v = 0; v < 5; v++) {
                        resistorData[(redo[redo.length - 3] * 5) + v] = redo[redo.length - 2][v];
                    }

                    var widthHolder = this.objects[redo[redo.length - 2][0]].width;
                    var heightHolder = this.objects[redo[redo.length - 2][0]].height;
                    this.resistorBars[redo[redo.length - 3] * 2].fillColor = redo[redo.length - 2][3];
                    this.resistorBars[(redo[redo.length - 3] * 2) + 1].fillColor = redo[redo.length - 2][2];
                    this.objects[redo[redo.length - 2][0]].setFrame(redo[redo.length - 2][4]);
                    this.objects[redo[redo.length - 2][0]].width = widthHolder;
                    this.objects[redo[redo.length - 2][0]].height = heightHolder;

                    if (panelType == 4) {
                        this.panelResistanceValue.setText(redo[redo.length - 1][0]);
                        this.panelResistanceUnit.setText(redo[redo.length - 1][1]);
                        settings[redo[redo.length - 2][0] * 2] = redo[redo.length - 1][0];
                        settings[(redo[redo.length - 2][0] * 2) + 1] = redo[redo.length - 1][1];
                    }
                }
                redo.splice(redo.length - 4, 4);
            }
        }

        if (this.popupcandel.visible == true) {
            if (this.popupcandel.wasClicked() || this.popupcandeltext.wasClicked() || this.esc.wasPressed()) {
                this.popupcandel.setVisible(0);
                this.popupdel.setVisible(0);
                this.popupcandeltext.setVisible(0);
                this.popupdeltext.setVisible(0);

                this.enabling();
                del = -1;
            }

            if (this.popupdel.wasClicked() || (del >= 0 && this.return.wasPressed())) {
                this.popupcandel.setVisible(0);
                this.popupdel.setVisible(0);
                this.popupcandeltext.setVisible(0);
                this.popupdeltext.setVisible(0);

                this.objects[del].setVisible(0);
                var labelID = -1;
                for (var v = 0; v < objectLabelData.length; v++) {
                    if (del == objectLabelData[v]) {
                        labelID = v;
                    }
                }
                if (labelID != -1) {
                    this.objectLabels[labelID].setVisible(0);
                }

                for (var v = 0; v < resistorData.length / 5; v++) {
                    if (resistorData[v * 5] == del) {
                        this.resistorBars[v * 2].setVisible(0);
                        this.resistorBars[(v * 2) + 1].setVisible(0);
                    }
                }

                var allGroups = [];
                var wiresPerGroup = [];
                var selectWireGroup;

                for (var v = 0; v < this.nodes.length; v++) {
                    if (nodeLinks[v * 4] >= 0 && nodeLinks[(v * 4) + 1] == del) {
                        selectWireGroup = nodeLinks[(v * 4) + 3];
                        allGroups.push(selectWireGroup);
                    }
                }

                for (var v = 0; v < allGroups.length; v++) {
                    wiresPerGroup.push(0);
                }

                for (var v = 0; v < allGroups.length; v++) {
                    for (var t = 0; t < this.nodes.length; t++) {
                        if (nodeLinks[(t * 4) + 3] == allGroups[v]) {
                            wiresPerGroup[v]++;
                        }
                    }
                }

                var wires = [];
                var nodes = [];
                for (var t = 0; t < allGroups.length; t++) {
                    for (var v = 0; v < this.nodes.length; v++) {
                        if (nodeLinks[(v * 4) + 3] == allGroups[t]) {
                            if (nodeLinks[v * 4] >= 0) {
                                if (this.wires[nodeLinks[v * 4]].visible == 1) {
                                    this.wires[nodeLinks[v * 4]].setVisible(0);
                                    this.wireLines[nodeLinks[v * 4]].setVisible(0);
                                    wires.push(nodeLinks[v * 4]);
                                }
                            } else {
                                if (this.wires[nodeLinks[(v * 4) + 2]].visible == 1) {
                                    this.wires[nodeLinks[(v * 4) + 2]].setVisible(0)
                                    this.wireLines[nodeLinks[(v * 4) + 2]].setVisible(0);
                                    wires.push(nodeLinks[(v * 4) + 2]);
                                }
                            }

                            if (this.objectIDs[nodeLinks[v * 4 + 1]] == 10) {
                                this.objects[nodeLinks[v * 4 + 1]].setVisible(0);
                            }
                        }
                    }

                    for (var v = 0; v < this.nodes.length; v++) {
                        if (nodeLinks[(v * 4) + 3] == allGroups[t]) {
                            if (this.nodes[v].visible == 1) {
                                this.nodes[v].setVisible(0);
                                nodes.push(v);
                            }
                        }
                    }
                }

                undo.push("deletedObject");
                undo.push(del);
                undo.push(wires);
                undo.push(nodes);
                redo.splice(0, redo.length);

                this.enabling();
                del = -1;
            }
        }

        for (var i = 0; i < this.items.length; i++) {
            if (this.itemButtons[i].isOver()) {
                pElement.style.cursor = "url('assets/hand.png'), auto";
                this.items[i].setTint(0xffbfbf);
                if (itemObjectID[i] == 13) {
                    this.labelItemText[0].setAlpha(0.8);
                }
                if (itemObjectID[i] == 14) {
                    this.labelItemText[1].setAlpha(0.8);
                }
            } else {
                this.items[i].setTint(0xffffff);
                if (itemObjectID[i] == 13) {
                    this.labelItemText[0].setAlpha(1);
                }
                if (itemObjectID[i] == 14) {
                    this.labelItemText[1].setAlpha(1);
                }
            }

            if (this.itemButtons[i].wasClicked()) {
                this.clearPanel();
                var obj = this.add.sprite(deviceWidth / 2, deviceHeight / 2, `${itemObjectID[i]}`, 1);

                obj.scale *= (objectsData[(itemObjectID[i] * 5) + 2]);
                obj.width *= (objectsData[(itemObjectID[i] * 5) + 2]);
                obj.height *= (objectsData[(itemObjectID[i] * 5) + 2]);
                obj.scale *= scaleCount;
                obj.width *= scaleCount;
                obj.height *= scaleCount;

                obj.enableDrag();
                obj.enableClick();
                obj.setDepth(3);
                for (var v = 0; v < this.objects.length; v++) {
                    this.objects[v].depth -= 0.01;
                }

                var shiftX = 0;
                var shiftY = 0;
                for (var v = -10000; v < 10000; v++) {
                    if (Math.abs(((v * 28 * scaleCount + (snapStartX % (28 * scaleCount))) - ((wiringXPoints["x" + itemObjectID[i]][0] * obj.width) + obj.x))) < (28 * scaleCount) / 2 && Math.abs(((v * 28 * scaleCount + (snapStartX % (28 * scaleCount))) - ((wiringXPoints["x" + itemObjectID[i]][0] * obj.width) + obj.x))) > 0) {
                        shiftX = (v * 28 * scaleCount + (snapStartX % (28 * scaleCount))) - ((wiringXPoints["x" + itemObjectID[i]][0] * obj.width) + obj.x);
                    }
                }
                for (var v = -10000; v < 10000; v++) {
                    if (Math.abs(((v * 28 * scaleCount + (snapStartY % (28 * scaleCount))) - ((wiringYPoints["y" + itemObjectID[i]][0] * obj.height) + obj.y))) < (28 * scaleCount) / 2 && Math.abs(((v * 28 * scaleCount + (snapStartY % (28 * scaleCount))) - ((wiringYPoints["y" + itemObjectID[i]][0] * obj.height) + obj.y))) > 0) {
                        shiftY = (v * 28 * scaleCount + (snapStartY % (28 * scaleCount))) - ((wiringYPoints["y" + itemObjectID[i]][0] * obj.height) + obj.y);
                    }
                }
                obj.x += shiftX;
                obj.y += shiftY;
                for (var v = 0; v < this.objects.length; v++) {
                    if (this.objectIDs[v] == itemObjectID[i] && this.objects[v].x == obj.x && this.objects[v].y == obj.y && this.objects[v].visible == 1) {
                        obj.x += deviceWidth * 0.02;
                        obj.y += deviceHeight * 0.04;
                    }
                }

                this.objects.push(obj);
                this.objectIDs.push(itemObjectID[i]);

                rotateAngle.push(0);
                shiftObjects.push(false);
                settings.push(-1);

                var labelAvail = -1;
                for (var v = 0; v < defaultLabel.length / 14; v++) {
                    if (defaultLabel[v * 14] == itemObjectID[i]) {
                        labelAvail = v;
                    }
                }
                if (labelAvail != -1) {
                    var label = this.add.text(this.objects[this.objects.length - 1].x + scaleCount * deviceWidth * defaultLabel[(labelAvail * 14) + 5], this.objects[this.objects.length - 1].y + scaleCount * deviceHeight * defaultLabel[(labelAvail * 14) + 6], defaultLabel[(labelAvail * 14) + 1], labelColor);
                    if (defaultLabel[(labelAvail * 14) + 13] == 0xffffff) {
                        label.setFontColor(0xffffff);
                    }
                    if (itemObjectID[i] == 13) {
                        label.setFontColor(0xff0000);
                    }
                    if (itemObjectID[i] == 14) {
                        label.setFontColor(0x0000ff);
                    }
                    label.setOrigin(0.5, 0.5);
                    label.setFontSize(scaleCount * deviceHeight * defaultLabel[(labelAvail * 14) + 2]);
                    label.setDepth(3);
                    this.objectLabels.push(label);
                    objectLabelData.push(this.objects.length - 1);
                    settings.push("" + defaultLabel[(labelAvail * 14) + 1] + "");
                } else {
                    settings.push(-1);
                }

                if (itemObjectID[i] == 2) {
                    var bar1 = this.add.rectangle(obj.x, obj.y + obj.height * 0.052, obj.width * 0.3, obj.height * 0.055, resistorColors[1]);
                    var bar2 = this.add.rectangle(obj.x, obj.y - obj.height * 0.057, obj.width * 0.3, obj.height * 0.055, resistorColors[4]);
                    bar1.setOrigin(0.5, 0.5);
                    bar2.setOrigin(0.5, 0.5);
                    this.resistorBars.push(bar1);
                    this.resistorBars.push(bar2);
                    resistorData.push(this.objects.length - 1);
                    resistorData.push(10000);
                    resistorData.push(resistorColors[4]);
                    resistorData.push(resistorColors[1]);
                    resistorData.push(1);
                    settings[settings.length - 2] = 10;
                    settings[settings.length - 1] = "KΩ";
                }

                if (itemObjectID[i] == 4) {
                    settings[settings.length - 2] = 1;
                }

                if (itemObjectID[i] == 12) {
                    settings[settings.length - 2] = 1;
                    settings[settings.length - 1] = "4N35";
                }

                if (itemObjectID[i] == 13) {
                    settings[settings.length - 2] = 0xff0000;
                    settings[settings.length - 1] = "Heading";
                }

                if (itemObjectID[i] == 14) {
                    settings[settings.length - 2] = 0x0000ff;
                    settings[settings.length - 1] = "Label";
                }

                this.openPanel(this.objects.length - 1);
                lastClicked = this.objects.length - 1;

                undo.push("createdObject");
                undo.push(this.objects.length - 1);
                undo.push(-1);
                undo.push(-1);
                redo.splice(0, redo.length);
            }
        }

        if ((this.floor.wasClicked() || this.grid.wasClicked()) && (this.input.mousePointer.x < 1095 || this.input.mousePointer.y > 325)) {
            this.clearPanel();
            if (element != null) {
                element.blur();
            }
        }

        if (this.slash.visible == 0) {
            this.grid.visible = 1;
        } else {
            this.grid.visible = 0;
        }

        if (this.binHandleArrow.wasClicked() || this.binHandle.wasClicked()) {
            if (itemBinOpen == true) {
                this.clearHTML();
                if (closing == false) {
                    closing = true;
                    this.binHandleArrow.setAngle(0);
                }
            } else {
                if (opening == false) {
                    opening = true;
                    this.binHandleArrow.setAngle(180);
                }
            }
        }

        if (this.binHandleArrow.x <= deviceWidth * 0.015) {
            closing = false;
            itemBinOpen = false;
        }

        if (this.binHandleArrow.x > deviceWidth * 0.205 && this.binHandleArrow.x < deviceWidth * 0.21) {
            this.itemTypeArrow.setVisible(1);
            this.lastPageButton.setVisible(1);
            this.lastPageArrow.setVisible(1);
            this.nextPageButton.setVisible(1);
            this.nextPageArrow.setVisible(1);
            if (currentItemType == 0) {
                this.addItem.setVisible(1);
                this.search.setVisible(1);
            }
            if (currentItemType == 5) {
                this.exit.setVisible(1);
                this.itemTypeArrow.setVisible(0);
            }
        }

        if (this.binHandleArrow.x >= deviceWidth * 0.21) {
            opening = false;
            itemBinOpen = true;
            this.binLabel.setVisible(1);
            this.binLabelDivider.setVisible(1);
            for (var t = 0; t < this.itemLabels.length; t++) {
                this.itemLabels[t].setVisible(1);
                this.items[t].setVisible(1);
                this.itemButtons[t].setVisible(1);
                if (itemObjectID[t] == 2) {
                    this.itemResistorBars[0].setVisible(1);
                    this.itemResistorBars[1].setVisible(1);
                }
                if (itemObjectID[t] == 13) {
                    this.labelItemText[0].setVisible(1);
                }
                if (itemObjectID[t] == 14) {
                    this.labelItemText[1].setVisible(1);
                }
            }
        }

        if (closing == true) {
            this.itemBin.x -= 10;
            this.binHandle.x -= 10;
            this.binHandleArrow.x -= 10;
            this.binLabel.setVisible(0);
            this.binLabelDivider.setVisible(0);
            for (var t = 0; t < this.itemLabels.length; t++) {
                this.itemLabels[t].setVisible(0);
                this.items[t].setVisible(0);
                this.itemButtons[t].setVisible(0);
                if (itemObjectID[t] == 2) {
                    this.itemResistorBars[0].setVisible(0);
                    this.itemResistorBars[1].setVisible(0);
                }
                if (itemObjectID[t] == 13) {
                    this.labelItemText[0].setVisible(0);
                }
                if (itemObjectID[t] == 14) {
                    this.labelItemText[1].setVisible(0);
                }
            }
            this.lastPageButton.setVisible(0);
            this.lastPageArrow.setVisible(0);
            this.nextPageButton.setVisible(0);
            this.nextPageArrow.setVisible(0);
            this.addItem.setVisible(0);
            this.itemTypeArrow.setVisible(0);
            this.search.setVisible(0);
            this.exit.setVisible(0);
        }

        if (opening == true) {
            this.itemBin.x += 10;
            this.binHandle.x += 10;
            this.binHandleArrow.x += 10;
        }

        if (element == null && this.slash.scale > 0.01 && (this.s.wasPressed()) || this.save.wasClicked() || this.saveButton.wasClicked()) {
            this.save.setVisible(0);
            this.saved.setVisible(1);

            this.popupover.setVisible(1);
            this.popup.setVisible(1);
            this.popuptext.setText("Click the above links to download your data.");
            this.popuptext.setVisible(1);
            this.popupdone.setVisible(1);
            this.popupcreate.setVisible(1);
            this.popupdonetext.setVisible(1);
            this.popupcreatetext.setVisible(1);
            this.popupcheckbox.setVisible(1);
            this.popupautoSave.setVisible(1);

            var textFileUrl = null;

            function generateTextFileUrl(txt) {
                let fileData = new Blob([txt], {
                    type: 'text/plain'
                });

                if (textFileUrl !== null) {
                    window.URL.revokeObjectURL(textFile);
                }
                textFileUrl = window.URL.createObjectURL(fileData);

                return textFileUrl;
            };

            this.clearPanel();
            this.disabling();
            this.clearHTML();
            document.getElementById('downloads').innerHTML = "Downloads: ";

            var wiresData = [];
            wiresData.push(customColors.length);
            wiresData.push(customColors);
            wiresData.push(nodeLinks.length);
            wiresData.push(nodeLinks);
            for (var v = 0; v < this.wires.length; v++) {
                wiresData.push(this.wires[v].visible);
                wiresData.push(this.wireLines[v].geom.x1);
                wiresData.push(this.wireLines[v].geom.y1);
                wiresData.push(this.wireLines[v].geom.x2);
                wiresData.push(this.wireLines[v].geom.y2);
            }

            document.getElementById('download0').innerHTML = "Wires Data";
            document.getElementById('download0').download = "WiresData.txt";
            document.getElementById('download0').href = generateTextFileUrl(wiresData);
            document.getElementById('download0').click();

            textFileUrl = null;

            var nodesData = [];
            nodesData.push(this.grid.x);
            nodesData.push(this.grid.y);
            for (var v = 0; v < this.nodes.length; v++) {
                nodesData.push(this.nodes[v].visible);
                nodesData.push(this.nodes[v].x);
                nodesData.push(this.nodes[v].y);
                nodesData.push(this.nodes[v].fillColor);
            }

            document.getElementById('download1').innerHTML = "Nodes Data";
            document.getElementById('download1').download = "NodesData.txt";
            document.getElementById('download1').href = generateTextFileUrl(nodesData);
            document.getElementById('download1').click();

            textFileUrl = null;

            var objectData = [];
            objectData.push(scaleCount);
            objectData.push(this.objects.length);
            objectData.push(customObjectColors.length + 3);
            objectData.push(customObjectColors);
            for (var v = 0; v < this.objects.length; v++) {
                objectData.push(this.objects[v].visible);
                objectData.push(this.objects[v].x);
                objectData.push(this.objects[v].y);
                objectData.push(this.objectIDs[v]);
                objectData.push(rotateAngle[v]);
                objectData.push(this.objects[v].depth);
                objectData.push(settings[v * 2]);
                objectData.push('"' + settings[(v * 2) + 1] + '"');
                var labelAvail = -1;
                for (var t = 0; t < defaultLabel.length / 14; t++) {
                    if (defaultLabel[t * 14] == this.objectIDs[v]) {
                        labelAvail = t;
                    }
                }
                if (labelAvail != -1) {
                    objectData.push('"' + settings[(v * 2) + 1] + '"');
                } else {
                    objectData.push("");
                }
            }

            document.getElementById('download2').innerHTML = "Objects Data";
            document.getElementById('download2').download = "ObjectsData.txt";
            document.getElementById('download2').href = generateTextFileUrl(objectData);
            document.getElementById('download2').click();
        }

        if (this.popupcreate.wasClicked() || this.popupcreatetext.wasClicked() || (this.popupcreate.visible == 1 && this.return.wasPressed())) {
            this.floor.fillColor = 0xF4F5F6;
            gridColor = 0xdddddd;
            this.grid.setOutlineStyle(gridColor, 1);
            this.instructions.setFontColor(0x000000);
            this.itemBin.fillColor = 0xdddddd;
            this.binHandle.fillColor = 0xdddddd;
            this.binHandleArrow.setFrame(0);
            this.nextPageArrow.setFrame(0);
            this.lastPageArrow.setFrame(0);
            this.lastPageButton.fillColor = 0xffffff;
            this.nextPageButton.fillColor = 0xffffff;
            labelColor = 0x000000;
            for (var v = 0; v < this.itemLabels.length; v++) {
                this.itemLabels[v].setFontColor(labelColor);
            }
            for (var v = 0; v < this.objectLabels.length; v++) {
                if (this.objectIDs[objectLabelData[v]] != 12 && this.objectIDs[objectLabelData[v]] != 13 && this.objectIDs[objectLabelData[v]] != 14) {
                    if (defaultLabel[objectLabelData[v] * 14 + 13] != 0xffffff) {
                        this.objectLabels[v].setFontColor(labelColor);
                    }
                }
            }
            document.getElementById('fullpage').style.backgroundColor = "#F4F5F6";
            document.getElementById('spacer').style.color = "white";
            document.getElementById('label').style.color = "black";
            document.getElementById('label2').style.color = "black";
            document.getElementById('label3').style.color = "black";
            document.getElementById('downloads').style.color = "black";

            this.title.setVisible(0);
            this.instructions.setVisible(0);
            this.clearHTML();
            if (closing == false) {
                closing = true;
                this.binHandleArrow.setAngle(0);
            }
            this.itemBin.setVisible(0);
            this.binHandle.setVisible(0);
            this.binHandleArrow.setVisible(0);

            panelType = 0;
            this.popup.setVisible(0);
            this.popuptext.setVisible(0);
            this.popupdone.setVisible(0);
            this.popupdonetext.setVisible(0);
            this.popupcreate.setVisible(0);
            this.popupcreatetext.setVisible(0);
            this.popupcheckbox.setVisible(0);
            this.popupautoSave.setVisible(0);
            this.popupover.setAlpha(0.01);

            this.grid.setVisible(0);
            this.floor.fillColor = 0xffffff;
            this.pen.setVisible(0);
            this.penSlash.setVisible(0);
            this.select.setVisible(0);
            this.dark.setVisible(0);
            this.help.setVisible(0);

            this.undo.setVisible(0);
            this.redo.setVisible(0);
            this.magnet.setVisible(0);
            this.slash.setVisible(1);
            this.slash.scale *= 0.001;
            this.increaseScale.setVisible(0);
            this.increaseScaleButton.setVisible(0);
            this.decreaseScale.setVisible(0);
            this.decreaseScaleButton.setVisible(0);
            this.save.setVisible(0);
            this.saveButton.setVisible(0);
            this.saved.setVisible(0);
            this.import.setVisible(0);
        }

        if (this.slash.scale < 0.01) {
            this.disabling();
            document.getElementById('flex-box').style.flexDirection = "row-reverse";
            document.getElementById('label3').innerHTML = "Zoom & pan to fit objects on screen, then take a screenshot!! ∙ ∙ ∙ ∙ Custom Background Color:"
            document.getElementById('input2').style.display = 'block';
            document.getElementById('label2').innerHTML = "Custom Label Color:"
            document.getElementById('label').innerHTML = "Hover here ↓↓"
            document.getElementById('input').style.display = 'block';
            this.inputBox();
            if (this.input.mousePointer.x > deviceWidth * 0.8 && this.input.mousePointer.y < deviceHeight * 0.1) {
                this.home.setVisible(1);
                this.help2.setVisible(1);
                this.increaseScale2.setVisible(1);
                this.increaseScaleButton2.setVisible(1);
                this.decreaseScale2.setVisible(1);
                this.decreaseScaleButton2.setVisible(1);
                this.wand.setVisible(1);
            } else {
                this.home.setVisible(0);
                this.help2.setVisible(0);
                this.increaseScale2.setVisible(0);
                this.increaseScaleButton2.setVisible(0);
                this.decreaseScale2.setVisible(0);
                this.decreaseScaleButton2.setVisible(0);
                this.wand.setVisible(0);
            }

            if (this.return.wasPressed()) {
                var backgroundValue = document.getElementById('input2').value;
                if (isHexValid(backgroundValue) != false) {
                    this.floor.fillColor = parseInt(isHexValid(backgroundValue), 16);
                    document.getElementById('input2').value = "";
                    document.getElementById('input2').blur();
                } else {
                    document.getElementById('input2').value = "";
                }
                var labelValue = document.getElementById('input').value;
                if (isHexValid(labelValue) != false) {
                    for (var v = 0; v < this.objectLabels.length; v++) {
                        var labelAvail = -1;
                        for (var t = 0; t < defaultLabel.length / 14; t++) {
                            if (defaultLabel[t * 14] == this.objectIDs[objectLabelData[v]]) {
                                labelAvail = t;
                            }
                        }
                        if (defaultLabel[(labelAvail * 14) + 13] == 0x000000 && this.objectIDs[objectLabelData[v]] != 6 && this.objectIDs[objectLabelData[v]] != 13 && this.objectIDs[objectLabelData[v]] != 14) {
                            this.objectLabels[v].setFontColor(parseInt(isHexValid(labelValue), 16));
                        }
                    }
                    document.getElementById('input').value = "";
                    document.getElementById('input').blur();
                } else {
                    document.getElementById('input').value = "";
                }
            }

            if (this.esc.wasPressed()) {
                this.clearHTML();
                this.home.setVisible(0);
                this.help2.setVisible(0);
                this.increaseScale2.setVisible(0);
                this.increaseScaleButton2.setVisible(0);
                this.decreaseScale2.setVisible(0);
                this.decreaseScaleButton2.setVisible(0);

                if (opening == false) {
                    opening = true;
                    this.binHandleArrow.setAngle(180);
                }
                this.itemBin.setVisible(1);
                this.binHandle.setVisible(1);
                this.binHandleArrow.setVisible(1);
                this.popupover.setAlpha(0.5);
                this.popupover.setVisible(0);

                this.grid.setVisible(1);
                this.floor.fillColor = 0xF4F5F6;
                this.pen.setVisible(1);
                this.penSlash.setVisible(1);
                this.select.setVisible(1);
                this.dark.setVisible(1);
                this.help.setVisible(1);

                this.undo.setVisible(1);
                this.redo.setVisible(1);
                this.magnet.setVisible(1);
                this.slash.setVisible(0);
                this.slash.scale *= 1000;
                this.increaseScale.setVisible(1);
                this.increaseScaleButton.setVisible(1);
                this.decreaseScale.setVisible(1);
                this.decreaseScaleButton.setVisible(1);
                this.save.setVisible(1);
                this.saveButton.setVisible(1);
                this.import.setVisible(1);

                this.enabling();
            }
        }

        if (this.home.wasClicked()) {
            this.clearHTML();
            this.home.setVisible(0);
            this.help2.setVisible(0);
            this.increaseScale2.setVisible(0);
            this.increaseScaleButton2.setVisible(0);
            this.decreaseScale2.setVisible(0);
            this.decreaseScaleButton2.setVisible(0);

            if (opening == false) {
                opening = true;
                this.binHandleArrow.setAngle(180);
            }
            this.itemBin.setVisible(1);
            this.binHandle.setVisible(1);
            this.binHandleArrow.setVisible(1);
            this.popupover.setAlpha(0.5);
            this.popupover.setVisible(0);

            this.grid.setVisible(1);
            this.floor.fillColor = 0xF4F5F6;
            this.pen.setVisible(1);
            this.penSlash.setVisible(1);
            this.select.setVisible(1);
            this.dark.setVisible(1);
            this.help.setVisible(1);

            this.undo.setVisible(1);
            this.redo.setVisible(1);
            this.magnet.setVisible(1);
            this.slash.setVisible(0);
            this.slash.scale *= 1000;
            this.increaseScale.setVisible(1);
            this.increaseScaleButton.setVisible(1);
            this.decreaseScale.setVisible(1);
            this.decreaseScaleButton.setVisible(1);
            this.save.setVisible(1);
            this.saveButton.setVisible(1);
            this.import.setVisible(1);

            this.enabling();
        }

        if (this.increaseScale.isClicked() || this.increaseScaleButton.isClicked() || this.increaseScale2.isClicked() || this.increaseScaleButton2.isClicked() || (element == null && this.space.isPressed() && !(this.shift.isPressed()))) {
            scaleCount *= 1.005;
            snapStartX = ((snapStartX - (deviceWidth / 2)) * 1.005) + (deviceWidth / 2);
            snapStartY = ((snapStartY - (deviceHeight / 2)) * 1.005) + (deviceHeight / 2);
            for (var v = 0; v < this.objects.length; v++) {
                this.objects[v].scaleX *= 1.005;
                this.objects[v].scaleY *= 1.005;
                this.objects[v].width *= 1.005;
                this.objects[v].height *= 1.005;
                this.objects[v].x = ((this.objects[v].x - (deviceWidth / 2)) * 1.005) + (deviceWidth / 2);
                this.objects[v].y = ((this.objects[v].y - (deviceHeight / 2)) * 1.005) + (deviceHeight / 2);
            }
            for (var v = 0; v < this.objectLabels.length; v++) {
                this.objectLabels[v].scale *= 1.005;
            }
            this.title.setDepth(1);
            this.instructions.setDepth(1);
            this.grid.destroy();
            this.grid = this.add.gridLayout(snapStartX, snapStartY, 100000, 100000, 28 * scaleCount, 28 * scaleCount);
            this.grid.setOutlineStyle(gridColor, 1)
            this.grid.setDepth(0);
            this.grid.enableClick();
            grid = this.grid;
            lineWidth *= 1.005;
            for (var v = 0; v < this.wires.length; v++) {
                this.wires[v].width *= 1.005;
            }
            for (var v = 0; v < this.nodes.length; v++) {
                this.nodes[v].setRadius(this.nodes[v].radius *= 1.005);
                this.nodes[v].x = ((this.nodes[v].x - (deviceWidth / 2)) * 1.005) + (deviceWidth / 2);
                this.nodes[v].y = ((this.nodes[v].y - (deviceHeight / 2)) * 1.005) + (deviceHeight / 2);
            }
            for (var v = 0; v < this.resistorBars.length; v++) {
                this.resistorBars[v].width *= 1.005;
                this.resistorBars[v].height *= 1.005;
                this.resistorBars[v].setOrigin(0.5, 0.5);
                this.resistorBars[v].x = ((this.resistorBars[v].x - (deviceWidth / 2)) * 1.005) + (deviceWidth / 2);
                this.resistorBars[v].y = ((this.resistorBars[v].y - (deviceHeight / 2)) * 1.005) + (deviceHeight / 2);
            }
            for (var v = 0; v < this.wireLines.length; v++) {
                this.wireLines[v].setLineWidth(this.wireLines[v].lineWidth * 1.005);
            }
            this.activeWire.setLineWidth(this.activeWire.lineWidth * 1.005);
            this.wiringPointer.setRadius(this.wiringPointer.radius * 1.005);

            lastPosition[1] = ((lastPosition[1] - (deviceWidth / 2)) * 1.005) + (deviceWidth / 2);
            lastPosition[2] = ((lastPosition[2] - (deviceHeight / 2)) * 1.005) + (deviceHeight / 2);

            for (var v = 0; v < undo.length / 4; v++) {
                if (undo[v * 4] == "movedObject" || undo[v * 4] == "movedNode") {
                    undo[(v * 4) + 2] *= 1.005;
                    undo[(v * 4) + 3] *= 1.005;
                }
            }

            for (var v = 0; v < redo.length / 4; v++) {
                if (redo[v * 4] == "movedObject" || redo[v * 4] == "movedNode") {
                    redo[(v * 4) + 2] *= 1.005;
                    redo[(v * 4) + 3] *= 1.005;
                }
            }
        }

        if (this.decreaseScale.isClicked() || this.decreaseScaleButton.isClicked() || this.decreaseScale2.isClicked() || this.decreaseScaleButton2.isClicked() || (element == null && this.space.isPressed() && this.shift.isPressed())) {
            scaleCount *= 0.995;
            snapStartX = ((snapStartX - (deviceWidth / 2)) * 0.995) + (deviceWidth / 2);
            snapStartY = ((snapStartY - (deviceHeight / 2)) * 0.995) + (deviceHeight / 2);
            for (var v = 0; v < this.objects.length; v++) {
                this.objects[v].scale *= 0.995;
                this.objects[v].width *= 0.995;
                this.objects[v].height *= 0.995;
                this.objects[v].x = ((this.objects[v].x - (deviceWidth / 2)) * 0.995) + (deviceWidth / 2);
                this.objects[v].y = ((this.objects[v].y - (deviceHeight / 2)) * 0.995) + (deviceHeight / 2);
            }
            for (var v = 0; v < this.objectLabels.length; v++) {
                this.objectLabels[v].scale *= 0.995;
            }
            this.title.setDepth(1);
            this.instructions.setDepth(1);

            this.grid.destroy();
            this.grid = this.add.gridLayout(snapStartX, snapStartY, 100000, 100000, 28 * scaleCount, 28 * scaleCount);
            this.grid.setOutlineStyle(gridColor, 1)
            this.grid.setDepth(0);
            this.grid.enableClick();
            grid = this.grid;
            lineWidth *= 0.995;
            for (var v = 0; v < this.wires.length; v++) {
                this.wires[v].width *= 0.995;
            }
            for (var v = 0; v < this.nodes.length; v++) {
                this.nodes[v].setRadius(this.nodes[v].radius *= 0.995);
                this.nodes[v].x = ((this.nodes[v].x - (deviceWidth / 2)) * 0.995) + (deviceWidth / 2);
                this.nodes[v].y = ((this.nodes[v].y - (deviceHeight / 2)) * 0.995) + (deviceHeight / 2);
            }
            for (var v = 0; v < this.resistorBars.length; v++) {
                this.resistorBars[v].width *= 0.995;
                this.resistorBars[v].height *= 0.995;
                this.resistorBars[v].setOrigin(0.5, 0.5);
                this.resistorBars[v].x = ((this.resistorBars[v].x - (deviceWidth / 2)) * 0.995) + (deviceWidth / 2);
                this.resistorBars[v].y = ((this.resistorBars[v].y - (deviceHeight / 2)) * 0.995) + (deviceHeight / 2);
            }
            for (var v = 0; v < this.wireLines.length; v++) {
                this.wireLines[v].setLineWidth(this.wireLines[v].lineWidth * 0.995);
            }
            this.activeWire.setLineWidth(this.activeWire.lineWidth * 0.995);
            this.wiringPointer.setRadius(this.wiringPointer.radius * 0.995);

            lastPosition[1] = ((lastPosition[1] - (deviceWidth / 2)) * 0.995) + (deviceWidth / 2);
            lastPosition[2] = ((lastPosition[2] - (deviceHeight / 2)) * 0.995) + (deviceHeight / 2);

            for (var v = 0; v < undo.length / 4; v++) {
                if (undo[v * 4] == "movedObject" || undo[v * 4] == "movedNode") {
                    undo[(v * 4) + 2] *= 0.995;
                    undo[(v * 4) + 3] *= 0.995;
                }
            }

            for (var v = 0; v < redo.length / 4; v++) {
                if (redo[v * 4] == "movedObject" || redo[v * 4] == "movedNode") {
                    redo[(v * 4) + 2] *= 0.995;
                    redo[(v * 4) + 3] *= 0.995;
                }
            }
        }

        if (this.help.wasClicked() || this.import.wasClicked() || this.help2.wasClicked()) {
            window.open('/Tutorial.html', '_blank');
        }

        if (this.addItem.wasClicked()) {
            workspaceObjectImport = -1;
            wiresDataImport.splice(0, wiresDataImport.length);
            nodesDataImport.splice(0, nodesDataImport.length);
            objectsDataImport.splice(0, objectsDataImport.length);

            wiresDataImport.push(customColors.length);
            for (var v = 0; v < customColors.length; v++) {
                wiresDataImport.push(customColors[v]);
            }
            if (customColors.length == 0) {
                wiresDataImport.push("");
            }
            wiresDataImport.push(nodeLinks.length);
            for (var v = 0; v < nodeLinks.length; v++) {
                wiresDataImport.push(nodeLinks[v]);
            }
            if (nodeLinks.length == 0) {
                wiresDataImport.push("");
            }
            for (var v = 0; v < this.wires.length; v++) {
                wiresDataImport.push(this.wires[v].visible);
                wiresDataImport.push(this.wireLines[v].geom.x1);
                wiresDataImport.push(this.wireLines[v].geom.y1);
                wiresDataImport.push(this.wireLines[v].geom.x2);
                wiresDataImport.push(this.wireLines[v].geom.y2);
            }

            nodesDataImport.push(this.grid.x);
            nodesDataImport.push(this.grid.y);
            for (var v = 0; v < this.nodes.length; v++) {
                nodesDataImport.push(this.nodes[v].visible);
                nodesDataImport.push(this.nodes[v].x);
                nodesDataImport.push(this.nodes[v].y);
                nodesDataImport.push(this.nodes[v].fillColor);
            }

            objectsDataImport.push(scaleCount);
            objectsDataImport.push(this.objects.length);
            objectsDataImport.push(customObjectColors.length + 3);
            for (var v = 0; v < customObjectColors.length; v++) {
                objectsDataImport.push(customObjectColors[v]);
            }
            for (var v = 0; v < this.objects.length; v++) {
                objectsDataImport.push(this.objects[v].visible);
                objectsDataImport.push(this.objects[v].x);
                objectsDataImport.push(this.objects[v].y);
                objectsDataImport.push(this.objectIDs[v]);
                objectsDataImport.push(rotateAngle[v]);
                objectsDataImport.push(this.objects[v].depth);
                objectsDataImport.push(settings[v * 2]);
                objectsDataImport.push(settings[(v * 2) + 1]);
                var labelAvail = -1;
                for (var t = 0; t < defaultLabel.length / 14; t++) {
                    if (defaultLabel[t * 14] == this.objectIDs[v]) {
                        labelAvail = v;
                    }
                }
                if (labelAvail != -1) {
                    objectsDataImport.push(settings[(v * 2) + 1]);
                } else {
                    objectsDataImport.push("");
                }
            }

            for (var i = 0; i < objectsData.length / 5; i++) {
                wiringXPoints["x" + i].splice(objectsData[(i * 5) + 3], wiringXPoints["x" + i].length - objectsData[(i * 5) + 3]);
                wiringYPoints["y" + i].splice(objectsData[(i * 5) + 3], wiringYPoints["y" + i].length - objectsData[(i * 5) + 3]);
            }
            for (var i = 0; i < 2; i++) {
                buttonxPoints["pin" + (i + 1) * 2].splice((i + 1) * 2, buttonxPoints["pin" + (i + 1) * 2].length - (i + 1) * 2);
                buttonyPoints["pin" + (i + 1) * 2].splice((i + 1) * 2, buttonyPoints["pin" + (i + 1) * 2].length - (i + 1) * 2);
            }
            for (var i = 0; i < 7; i++) {
                ICxPoints["pin" + (i + 2) * 2].splice((i + 2) * 2, ICxPoints["pin" + (i + 2) * 2].length - (i + 2) * 2);
                ICyPoints["pin" + (i + 2) * 2].splice((i + 2) * 2, ICyPoints["pin" + (i + 2) * 2].length - (i + 2) * 2);
            }
            this.scene.start("PartEditor");
        }

        if (this.popupdone.visible == 1) {
            if (this.popupdone.wasClicked() || this.popupdonetext.wasClicked() || this.esc.wasPressed()) {
                this.popupdone.setVisible(0);
                this.popupcreate.setVisible(0);
                this.popupdonetext.setVisible(0);
                this.popupcreatetext.setVisible(0);
                this.popupcheckbox.setVisible(0);
                this.popupautoSave.setVisible(0);

                this.save.setVisible(1);
                this.saved.setVisible(0);

                this.clearHTML();

                this.enabling();
            }

            if (this.popupcheckbox.wasClicked() || this.popupautoSave.wasClicked()) {
                if (autoSave == false) {
                    this.popupcheckbox.setFrame(1);
                    autoSave = true;
                    autoSaved = Math.ceil((undo.length / 4) / autoFrequency) * autoFrequency;
                } else {
                    this.popupcheckbox.setFrame(0);
                    autoSave = autoFrequency;
                }
            }
        }
    }

    clearPanel() {
        this.clearHTML();
        if (panelType == -2) {
            for (var v = 0; v < this.selectItems.length; v++) {
                this.selectItems[v].destroy();
            }
        }
        if (panelType == 1) {
            for (var v = 0; v < 10; v++) {
                if (this.palette.length > 0) {
                    this.palette[v].destroy();
                }
            }
            for (var v = 0; v < this.customColors.length; v++) {
                this.customColors[v].destroy();
            }
            this.customColorBox.destroy();
            this.customColorAdd.destroy();
        }
        if (panelType == 4) {
            this.panelResistanceValueBox.destroy();
            this.panelResistanceValue.destroy();
            this.panelResistanceUnitBox.destroy();
            this.panelResistanceUnit.destroy();
        }
        if (panelType == 5 || panelType == 8 || panelType == 15 || panelType == 16 || panelType == 22 || panelType == 45 || panelType == 47) {
            for (var v = 0; v < this.customObjectColors.length; v++) {
                this.customObjectColors[v].destroy();
            }
            this.customObjectColorBox.destroy();
            this.customObjectColorAdd.destroy();
        }
        if (panelType == 6 || panelType == 7 || panelType == 8 || panelType == 10 || panelType == 14 || panelType == 15 || panelType == 16 || panelType == 28 || panelType == 29 || panelType == 32 || panelType == 43 || panelType == 50) {
            this.panelObjectLabelBox.destroy();
            this.panelObjectLabel.destroy();
        }
        if (panelType == 6 || panelType == 14) {
            this.panelPinAmount.destroy();
            this.panelPinMore.destroy();
            this.panelPinLess.destroy();
        }
        clean(this.palette);
        clean(this.customColors);
        clean(this.customObjectColors);

        for (var v = 0; v < this.selected.length; v++) {
            this.selected[v] = -1;
        }

        panelType = 0;
        this.panel.setVisible(0);
        this.paneltext.setVisible(0);
        this.panelDivider.setVisible(0);
        this.panelSelectLabel.setVisible(0);
        this.panelSelectLabel2.setVisible(0);
        this.closex.setVisible(0);
        this.panelDeleteButton.setVisible(0);
        this.panelDelete.setVisible(0);
        this.panelDuplicateButton.setVisible(0);
        this.panelDuplicate.setVisible(0);
        this.panelEditButton.setVisible(0);
        this.panelEdit.setVisible(0);
        this.panelInfoButton.setVisible(0);
        this.panelInfo.setVisible(0);

        this.panelUpArrow.setVisible(0);
        this.panelLeftArrow.setVisible(0);
        this.panelRightArrow.setVisible(0);
        this.panelDownArrow.setVisible(0);
        this.panelRotateLeft.setVisible(0);
        this.panelRotateRight.setVisible(0);

        this.panelBackward.setVisible(0);
        this.panelForward.setVisible(0);

        this.panelWireDeleteButton.setVisible(0);
        this.panelWireDeleteIcon.setVisible(0);
        this.panelWireDeleteText.setVisible(0);

        this.panelWireAddNodeButton.setVisible(0);
        this.panelWireAddNodeIcon.setVisible(0);
        this.panelWireAddNodeText.setVisible(0);

        this.select.enableClick();
        this.dark.enableClick();
        this.help.enableClick();
    }

    openPanel(i) {
        this.help.disableClick();
        this.dark.disableClick();
        this.select.disableClick();
        this.panel.setVisible(1);
        this.closex.setVisible(1);

        if (i >= 0) {
            panelType = this.objectIDs[i] + 2;

            this.panelDuplicateButton.setVisible(1);
            this.panelDuplicate.setVisible(1);
            this.panelDeleteButton.setVisible(1);
            this.panelDelete.setVisible(1);
            this.panelEditButton.setVisible(1);
            this.panelEdit.setVisible(1);
            this.panelInfoButton.setVisible(1);
            this.panelInfo.setVisible(1);

            this.panelUpArrow.setVisible(1);
            this.panelLeftArrow.setVisible(1);
            this.panelRightArrow.setVisible(1);
            this.panelDownArrow.setVisible(1);
            this.panelRotateLeft.setVisible(1);
            this.panelRotateRight.setVisible(1);

            this.panelBackward.setVisible(1);
            this.panelForward.setVisible(1);

            this.paneltext.setText(objectsData[this.objectIDs[i] * 5]);
            if (this.paneltext.text.length > 16) {
                this.paneltext.setFontSize(16 / this.paneltext.text.length * deviceHeight * 0.03);
            } else {
                this.paneltext.setFontSize(deviceHeight * 0.03);
            }
            this.paneltext.setOrigin(0, 0.5)
            this.paneltext.setVisible(1);
            this.panelDivider.setVisible(1);

            this.panel.y = deviceHeight * 0.05;
            if (panelType == 4) {
                this.panel.y = deviceHeight * 0.14;
                this.panelSelectLabel.setY(deviceHeight * 0.4);
                this.panelSelectLabel.setText("Resistance");
                this.panelSelectLabel.setVisible(1);
                this.panelResistanceValueBox = this.add.rectangle(deviceWidth * 0.905, deviceHeight * 0.45, deviceWidth * 0.095, deviceHeight * 0.05, 0xEDDD2D);
                this.panelResistanceValueBox.setDepth(6);
                this.panelResistanceValueBox.enableClick();
                if (settings[(i * 2)] == -1) {
                    this.panelResistanceValue = this.add.text(deviceWidth * 0.905, deviceHeight * 0.45, "10", 0x000000);
                } else {
                    this.panelResistanceValue = this.add.text(deviceWidth * 0.905, deviceHeight * 0.45, settings[(i * 2)], 0x000000);
                }
                if (settings[i * 2].length > 7) {
                    this.panelResistanceValue.setFontSize(7 / (settings[i * 2].length) * deviceHeight * 0.04);
                } else {
                    this.panelResistanceValue.setFontSize(deviceHeight * 0.04);
                }
                this.panelResistanceValue.setDepth(6);
                this.panelResistanceValue.setOrigin(0.5, 0.5);
                this.panelResistanceValue.enableClick();
                this.panelResistanceUnitBox = this.add.rectangle(deviceWidth * 0.975, deviceHeight * 0.45, deviceWidth * 0.035, deviceHeight * 0.05, 0x46B5C4);
                this.panelResistanceUnitBox.enableClick();
                this.panelResistanceUnitBox.setDepth(6);
                if (settings[(i * 2) + 1] == -1) {
                    this.panelResistanceUnit = this.add.text(deviceWidth * 0.975, deviceHeight * 0.45, "KΩ", 0x000000);
                } else {
                    this.panelResistanceUnit = this.add.text(deviceWidth * 0.975, deviceHeight * 0.45, settings[(i * 2) + 1], 0x000000);
                }
                this.panelResistanceUnit.setDepth(6);
                this.panelResistanceUnit.setFontSize(deviceHeight * 0.035);
                this.panelResistanceUnit.setOrigin(0.5, 0.5);
                this.panelResistanceUnit.enableClick();
            }
            if (panelType == 5 || panelType == 22 || panelType == 45 || panelType == 47) {
                this.panel.y = deviceHeight * 0.2;
            }
            if (panelType == 5 || panelType == 8 || panelType == 15 || panelType == 16 || panelType == 22 || panelType == 45 || panelType == 47) {
                this.panelSelectLabel.setY(deviceHeight * 0.4);
                this.panelSelectLabel.setText("Color");
                this.panelSelectLabel.setVisible(1);
                if (this.customObjectColors.length == 0) {
                    for (var v = 0; v < customObjectColors.length; v++) {
                        var obj;
                        if (v < 5) {
                            obj = this.add.rectangle(deviceWidth * 0.872 + v * deviceWidth * 0.027, deviceHeight * 0.45, deviceWidth * 0.021, deviceWidth * 0.021, customObjectColors[v]);
                        } else {
                            obj = this.add.rectangle(deviceWidth * 0.872 + (v - 5) * deviceWidth * 0.027, deviceHeight * 0.51, deviceWidth * 0.021, deviceWidth * 0.021, customObjectColors[v]);
                        }
                        obj.enableClick();
                        this.customObjectColors.push(obj);
                    }
                }
                if (this.customObjectColors.length < 5) {
                    this.customObjectColorBox = this.add.rectangle(deviceWidth * 0.872 + this.customObjectColors.length * deviceWidth * 0.027, deviceHeight * 0.45, deviceWidth * 0.021, deviceWidth * 0.021, 0xbbbbbb);
                } else {
                    this.customObjectColorBox = this.add.rectangle(deviceWidth * 0.872 + (this.customObjectColors.length - 5) * deviceWidth * 0.027, deviceHeight * 0.51, deviceWidth * 0.021, deviceWidth * 0.021, 0xbbbbbb);
                }
                this.customObjectColorBox.enableClick();
                this.customObjectColorAdd = this.add.text(this.customObjectColorBox.x, this.customObjectColorBox.y, "+", 0x000000);
                this.customObjectColorAdd.setOrigin(0.5, 0.5);
                this.customObjectColorAdd.setScale(deviceWidth * 0.000125);
                this.customObjectColorAdd.setFontSize(deviceHeight * 0.25);
                this.customObjectColorAdd.enableClick();
            }
            if (panelType == 6) {
                this.panel.y = deviceHeight * 0.25;
                this.panelSelectLabel.setText("Number of Pins");
                this.panelSelectLabel.y = deviceHeight * 0.41;
                this.panelSelectLabel.setVisible(1);

                this.panelPinAmount = this.add.text(deviceWidth * 0.925, deviceHeight * 0.46, (settings[i * 2] + 1) * 2, labelColor);
                this.panelPinAmount.setFontSize(deviceHeight * 0.05);
                this.panelPinAmount.setOrigin(0.5, 0.5);
                this.panelPinAmount.setDepth(6);

                this.panelPinMore = this.add.sprite(deviceWidth * 0.98, deviceHeight * 0.46, "arrow");
                this.panelPinMore.setScale(deviceWidth * 0.00025);
                this.panelPinMore.setAngle(-90);
                this.panelPinMore.enableClick();
                this.panelPinMore.setDepth(6);

                this.panelPinLess = this.add.sprite(deviceWidth * 0.87, deviceHeight * 0.46, "arrow");
                this.panelPinLess.setScale(deviceWidth * 0.00025);
                this.panelPinLess.setAngle(90);
                this.panelPinLess.enableClick();
                this.panelPinLess.setDepth(6);

                this.panelSelectLabel2.setText("Label");
                this.panelSelectLabel2.y = deviceHeight * 0.51;
                this.panelSelectLabel2.setVisible(1);

                this.panelObjectLabelBox = this.add.rectangle(deviceWidth * 0.925, deviceHeight * 0.56, deviceWidth * 0.13, deviceHeight * 0.05, 0xEDDD2D);
                this.panelObjectLabelBox.enableClick();
                this.panelObjectLabelBox.setDepth(6);

                var labelAvail = -1;
                for (var v = 0; v < defaultLabel.length / 14; v++) {
                    if (defaultLabel[v * 14] == panelType - 2) {
                        labelAvail = v;
                    }
                }
                var labelID = -1;
                for (var v = 0; v < objectLabelData.length; v++) {
                    if (objectLabelData[v] == i) {
                        labelID = v;
                    }
                }
                this.panelObjectLabel = this.add.text(deviceWidth * 0.925, deviceHeight * 0.56, defaultLabel[(labelAvail * 14) + 1], 0x000000);
                this.panelObjectLabel.setText(this.objectLabels[labelID].text);
                if (this.panelObjectLabel.text.length > 10) {
                    this.panelObjectLabel.setFontSize(10 / this.panelObjectLabel.text.length * deviceHeight * 0.04);
                } else {
                    this.panelObjectLabel.setFontSize(deviceHeight * 0.04);
                }
                this.panelObjectLabel.setOrigin(0.5, 0.5);
                this.panelObjectLabel.enableClick();
                this.panelObjectLabel.setDepth(6);
            }
            if (panelType == 7 || panelType == 10 || panelType == 28 || panelType == 29 || panelType == 32 || panelType == 43 || panelType == 50) {
                this.panel.y = deviceHeight * 0.15;
                this.panelSelectLabel2.setText("Label");
                this.panelSelectLabel2.y = deviceHeight * 0.4;
                this.panelSelectLabel2.setVisible(1);

                this.panelObjectLabelBox = this.add.rectangle(deviceWidth * 0.925, deviceHeight * 0.45, deviceWidth * 0.13, deviceHeight * 0.05, 0xEDDD2D);
                this.panelObjectLabelBox.enableClick();
                this.panelObjectLabelBox.setDepth(6);

                var labelAvail = -1;
                for (var v = 0; v < defaultLabel.length / 14; v++) {
                    if (defaultLabel[v * 14] == panelType - 2) {
                        labelAvail = v;
                    }
                }
                var labelID = -1;
                for (var v = 0; v < objectLabelData.length; v++) {
                    if (objectLabelData[v] == i) {
                        labelID = v;
                    }
                }
                this.panelObjectLabel = this.add.text(deviceWidth * 0.925, deviceHeight * 0.45, defaultLabel[(labelAvail * 14) + 1], 0x000000);
                this.panelObjectLabel.setText(this.objectLabels[labelID].text);
                if (this.panelObjectLabel.text.length > 10) {
                    this.panelObjectLabel.setFontSize(10 / this.panelObjectLabel.text.length * deviceHeight * 0.04);
                } else {
                    this.panelObjectLabel.setFontSize(deviceHeight * 0.04);
                }
                this.panelObjectLabel.setOrigin(0.5, 0.5);
                this.panelObjectLabel.enableClick();
                this.panelObjectLabel.setDepth(6);
            }
            if (panelType == 8 || panelType == 15 || panelType == 16) {
                this.panel.y = deviceHeight * 0.3;
                this.panelSelectLabel2.setText("Label");
                this.panelSelectLabel2.y = deviceHeight * 0.565;
                this.panelSelectLabel2.setVisible(1);

                this.panelObjectLabelBox = this.add.rectangle(deviceWidth * 0.925, deviceHeight * 0.61, deviceWidth * 0.13, deviceHeight * 0.05, 0xEDDD2D);
                this.panelObjectLabelBox.enableClick();
                this.panelObjectLabelBox.setDepth(6);
                var labelAvail = -1;
                for (var v = 0; v < defaultLabel.length / 14; v++) {
                    if (defaultLabel[v * 14] == panelType - 2) {
                        labelAvail = v;
                    }
                }
                var labelID = -1;
                for (var v = 0; v < objectLabelData.length; v++) {
                    if (objectLabelData[v] == i) {
                        labelID = v;
                    }
                }
                this.panelObjectLabel = this.add.text(deviceWidth * 0.925, deviceHeight * 0.61, defaultLabel[(labelAvail * 14) + 1], 0x000000);
                this.panelObjectLabel.setText(this.objectLabels[labelID].text);
                if (this.panelObjectLabel.text.length > 10) {
                    this.panelObjectLabel.setFontSize(10 / this.panelObjectLabel.text.length * deviceHeight * 0.04);
                } else {
                    this.panelObjectLabel.setFontSize(deviceHeight * 0.04);
                }
                this.panelObjectLabel.setOrigin(0.5, 0.5);
                this.panelObjectLabel.enableClick();
                this.panelObjectLabel.setDepth(6);
            }
            if (panelType == 14) {
                this.panel.y = deviceHeight * 0.25;
                this.panelSelectLabel.setText("Number of Pins");
                this.panelSelectLabel.y = deviceHeight * 0.41;
                this.panelSelectLabel.setVisible(1);
                this.panelSelectLabel2.setText("Label");
                this.panelSelectLabel2.y = deviceHeight * 0.51;
                this.panelSelectLabel2.setVisible(1);

                this.panelPinAmount = this.add.text(deviceWidth * 0.925, deviceHeight * 0.46, (settings[i * 2] + 2) * 2, labelColor);
                this.panelPinAmount.setFontSize(deviceHeight * 0.05);
                this.panelPinAmount.setOrigin(0.5, 0.5);
                this.panelPinAmount.setDepth(6);

                this.panelPinMore = this.add.sprite(deviceWidth * 0.98, deviceHeight * 0.46, "arrow");
                this.panelPinMore.setScale(deviceWidth * 0.00025);
                this.panelPinMore.setAngle(-90);
                this.panelPinMore.enableClick();
                this.panelPinMore.setDepth(6);

                this.panelPinLess = this.add.sprite(deviceWidth * 0.87, deviceHeight * 0.46, "arrow");
                this.panelPinLess.setScale(deviceWidth * 0.00025);
                this.panelPinLess.setAngle(90);
                this.panelPinLess.enableClick();
                this.panelPinLess.setDepth(6);

                this.panelObjectLabelBox = this.add.rectangle(deviceWidth * 0.925, deviceHeight * 0.56, deviceWidth * 0.13, deviceHeight * 0.05, 0xEDDD2D);
                this.panelObjectLabelBox.enableClick();
                this.panelObjectLabelBox.setDepth(6);
                var labelAvail = -1;
                for (var v = 0; v < defaultLabel.length / 14; v++) {
                    if (defaultLabel[v * 14] == panelType - 2) {
                        labelAvail = v;
                    }
                }
                var labelID = -1;
                for (var v = 0; v < objectLabelData.length; v++) {
                    if (objectLabelData[v] == i) {
                        labelID = v;
                    }
                }
                this.panelObjectLabel = this.add.text(deviceWidth * 0.925, deviceHeight * 0.56, defaultLabel[(labelAvail * 14) + 1], 0x000000);
                this.panelObjectLabel.setText(this.objectLabels[labelID].text);
                if (this.panelObjectLabel.text.length > 10) {
                    this.panelObjectLabel.setFontSize(10 / this.panelObjectLabel.text.length * deviceHeight * 0.04);
                } else {
                    this.panelObjectLabel.setFontSize(deviceHeight * 0.04);
                }
                this.panelObjectLabel.setOrigin(0.5, 0.5);
                this.panelObjectLabel.enableClick();
                this.panelObjectLabel.setDepth(6);
            }
        }
        if (i == -2) {
            panelType = -2;
            this.panel.y = deviceHeight * 0.29;
            this.paneltext.setText("Selected");
            this.paneltext.setOrigin(0, 0.5)
            this.paneltext.setVisible(1);
            this.panelDivider.setVisible(1);

            this.selectItems = [];
            for (var v = 0; v < this.shiftSelect.length / 2; v++) {
                if (v < 12) {
                    var itemBar = this.add.rectangle(deviceWidth * 0.925, deviceHeight * 0.11 + v * deviceHeight * 0.045, deviceWidth * 0.13, deviceHeight * 0.04, 0x999999);
                    itemBar.setDepth(6);
                    itemBar.enableClick();
                    this.selectItems.push(itemBar);
                    var itemName;
                    if (this.shiftSelect[v * 2] == 1) {
                        itemName = this.add.text(deviceWidth * 0.87, deviceHeight * 0.11 + v * deviceHeight * 0.045, objectsData[this.objectIDs[this.shiftSelect[v * 2 + 1]] * 5], 0x000000);
                    } else {
                        itemName = this.add.text(deviceWidth * 0.87, deviceHeight * 0.11 + v * deviceHeight * 0.045, "Wire", 0x000000);
                    }
                    itemName.setOrigin(0, 0.5);
                    itemName.setFontSize(deviceHeight * 0.03);
                    itemName.setDepth(6);
                    itemName.enableClick();
                    this.selectItems.push(itemName);
                }
            }
        }
    }

    createPalette(wire) {
        this.clearPanel();

        this.help.disableClick();
        this.dark.disableClick();
        this.select.disableClick();
        this.panel.setVisible(1);
        this.closex.setVisible(1);

        this.panel.y = deviceHeight * 0.22;

        panelType = 1;
        for (var v = 0; v < this.selected.length; v++) {
            this.selected[v] = -1;
        }
        var selectWireGroup;
        for (var v = 0; v < this.nodes.length; v++) {
            if (nodeLinks[v * 4] == wire || (nodeLinks[v * 4] <= -1 && nodeLinks[(v * 4) + 2] == wire)) {
                selectWireGroup = nodeLinks[(v * 4) + 3];
            }
        }
        var selectSlot = 0;
        for (var v = 0; v < this.nodes.length; v++) {
            if (nodeLinks[(v * 4) + 3] == selectWireGroup && nodeLinks[v * 4] != -3) {
                this.selected[selectSlot] = this.nodes[v];
                selectSlot++;
            }
        }
        for (var v = 0; v < this.nodes.length; v++) {
            if (nodeLinks[(v * 4) + 3] == selectWireGroup) {
                if (nodeLinks[v * 4] <= -1) {
                    this.selected[selectSlot] = this.wires[nodeLinks[(v * 4) + 2]];
                } else {
                    this.selected[selectSlot] = this.wires[nodeLinks[v * 4]];
                }
                selectSlot++;
            }
        }
        for (var v = 0; v < this.selected.length; v++) {
            if (this.selected[v] == -1) {
                this.selected.splice(v, (this.selected.length - v));
            }
        }
        clean(this.selected);

        this.paneltext.setText("Wire");
        this.paneltext.setVisible(1);
        this.panelDivider.setVisible(1);
        this.panelSelectLabel.setY(deviceHeight * 0.25);
        this.panelSelectLabel.setText("Color");
        this.panelSelectLabel.setVisible(1);

        if (this.palette.length == 0) {
            for (var v = 0; v < 10; v++) {
                var obj;
                if (v < 5) {
                    obj = this.add.rectangle(deviceWidth * 0.872 + v * deviceWidth * 0.027, deviceHeight * 0.3, deviceWidth * 0.021, deviceWidth * 0.021, paletteColors[v]);
                } else {
                    obj = this.add.rectangle(deviceWidth * 0.872 + (v - 5) * deviceWidth * 0.027, deviceHeight * 0.36, deviceWidth * 0.021, deviceWidth * 0.021, paletteColors[v]);
                }
                obj.enableClick();
                this.palette.push(obj);
            }
        }

        this.panelWireDeleteButton.setVisible(1);
        this.panelWireDeleteIcon.setVisible(1);
        this.panelWireDeleteText.setVisible(1);

        this.panelWireAddNodeButton.setVisible(1);
        this.panelWireAddNodeIcon.setVisible(1);
        this.panelWireAddNodeText.setVisible(1);

        this.panelSelectLabel2.setText("Custom Colors");
        this.panelSelectLabel2.y = deviceHeight * 0.42;
        this.panelSelectLabel2.setVisible(1);
        var obj2;
        for (var v = 0; v < customColors.length; v++) {
            if (v < 5) {
                obj2 = this.add.rectangle(deviceWidth * 0.872 + v * deviceWidth * 0.027, deviceHeight * 0.47, deviceWidth * 0.021, deviceWidth * 0.021, customColors[v]);
            } else {
                if (v < 10) {
                    obj2 = this.add.rectangle(deviceWidth * 0.872 + (v - 5) * deviceWidth * 0.027, deviceHeight * 0.53, deviceWidth * 0.021, deviceWidth * 0.021, customColors[v]);
                }
            }
            obj2.enableClick();
            this.customColors.push(obj2);
        }

        if (this.customColors.length < 5) {
            this.customColorBox = this.add.rectangle(deviceWidth * 0.872 + this.customColors.length * deviceWidth * 0.027, deviceHeight * 0.47, deviceWidth * 0.021, deviceWidth * 0.021, 0xbbbbbb);
        } else {
            this.customColorBox = this.add.rectangle(deviceWidth * 0.872 + (this.customColors.length - 5) * deviceWidth * 0.027, deviceHeight * 0.53, deviceWidth * 0.021, deviceWidth * 0.021, 0xbbbbbb);
        }
        this.customColorBox.enableClick();
        this.customColorAdd = this.add.text(this.customColorBox.x, this.customColorBox.y, "+", 0x000000);
        this.customColorAdd.setOrigin(0.5, 0.5);
        this.customColorAdd.setScale(deviceWidth * 0.000125);
        this.customColorAdd.setFontSize(deviceHeight * 0.25);
        this.customColorAdd.enableClick();
    }

    inputBox() {
        if (element == document.getElementById('input') || element == document.getElementById('input2') || element == document.getElementById('dropdown')) {
            if (this.del.isPressed() && !(this.shift.isPressed())) {
                if (delCount == 8) {
                    element.value = element.value.slice(0, -1);
                    delCount = 0;
                }
                delCount++;
            }
            if (this.del.wasPressed() && !(this.shift.isPressed())) {
                element.value = element.value.slice(0, -1);
                delCount = 0;
            }
            if (!(this.shift.isPressed())) {
                if (this.key0.wasPressed()) {
                    element.value += "0";
                }
                if (this.key1.wasPressed()) {
                    element.value += "1";
                }
                if (this.key2.wasPressed()) {
                    element.value += "2";
                }
                if (this.key3.wasPressed()) {
                    element.value += "3";
                }
                if (this.key4.wasPressed()) {
                    element.value += "4";
                }
                if (this.key5.wasPressed()) {
                    element.value += "5";
                }
                if (this.key6.wasPressed()) {
                    element.value += "6";
                }
                if (this.key7.wasPressed()) {
                    element.value += "7";
                }
                if (this.key8.wasPressed()) {
                    element.value += "8";
                }
                if (this.key9.wasPressed()) {
                    element.value += "9";
                }
                if (document.getElementById('label2').innerHTML != "Enter Hex: ") {
                    if (this.s.wasPressed()) {
                        element.value += "s";
                    }
                    if (this.w.wasPressed()) {
                        element.value += "w";
                    }
                    if (this.z.wasPressed()) {
                        element.value += "z";
                    }
                    if (this.c.wasPressed()) {
                        element.value += "c";
                    }
                }
                if (this.x.wasPressed()) {
                    element.value += "x";
                }
                if (this.d.wasPressed()) {
                    element.value += "d";
                }
                if (this.a.wasPressed()) {
                    element.value += "a";
                }
            }
            if (this.space.wasPressed()) {
                element.value += " ";
            }
            if (this.esc.wasPressed()) {
                this.clearHTML();
            }
        }
    }

    initiateDelete(i) {
        this.clearHTML();
        del = i;
        this.popupover.setVisible(1);
        this.popup.setVisible(1);
        this.popuptext.setText("Are you sure you want to delete this component?")
        this.popuptext.setVisible(1);
        this.popupcandel.setVisible(1);
        this.popupdel.setVisible(1);
        this.popupcandeltext.setVisible(1);
        this.popupdeltext.setVisible(1);
        this.disabling();
        this.clearPanel();
    }

    enabling() {
        this.popupover.setVisible(0);
        this.popup.setVisible(0);
        this.popuptext.setVisible(0);
        this.grid.enableClick();
        this.lastPageArrow.enableClick();
        this.lastPageButton.enableClick();
        this.nextPageArrow.enableClick();
        this.nextPageButton.enableClick();
        this.itemTypeArrow.enableClick();
        this.saveButton.enableClick();
        this.save.enableClick();
        this.increaseScaleButton.enableClick();
        this.increaseScale.enableClick();
        this.decreaseScaleButton.enableClick();
        this.decreaseScale.enableClick();
        this.addItem.enableClick();
        this.magnet.enableClick();
        this.closex.enableClick();
        this.help.enableClick();
        this.import.enableClick();
        this.floor.enableClick(0);
        this.dark.enableClick();
        this.select.enableClick();
        this.pen.enableClick();
        this.penSlash.enableClick();
        this.undo.enableClick();
        this.redo.enableClick();
        for (var v = 0; v < this.objects.length; v++) {
            this.objects[v].enableClick();
            this.objects[v].enableDrag();
        }
        for (var v = 0; v < this.itemButtons.length; v++) {
            this.itemButtons[v].enableClick();
        }
    }

    disabling() {
        activeWire = false;
        this.activeWire.setVisible(0);
        this.grid.disableClick();
        this.lastPageArrow.disableClick();
        this.lastPageButton.disableClick();
        this.nextPageArrow.disableClick();
        this.nextPageButton.disableClick();
        this.itemTypeArrow.disableClick();
        this.saveButton.disableClick();
        this.save.disableClick();
        this.increaseScaleButton.disableClick();
        this.increaseScale.disableClick();
        this.decreaseScaleButton.disableClick();
        this.decreaseScale.disableClick();
        this.addItem.disableClick();
        this.magnet.disableClick();
        this.closex.disableClick();
        this.help.disableClick();
        this.import.disableClick();
        this.floor.disableClick();
        this.dark.disableClick();
        this.select.disableClick();
        this.pen.disableClick();
        this.penSlash.disableClick();
        this.undo.disableClick();
        this.redo.disableClick();
        for (var v = 0; v < this.objects.length; v++) {
            this.objects[v].disableClick();
            this.objects[v].disableDrag();
        }
        for (var v = 0; v < this.itemButtons.length; v++) {
            this.itemButtons[v].disableClick();
        }
    }

    clearHTML() {
        console.log("here")
        document.getElementById('flex-box').style.flexDirection = 'row';
        document.getElementById('label').innerHTML = "";
        document.getElementById('input').value = "";
        document.getElementById('input').blur();
        document.getElementById('input').style.display = 'none';
        document.getElementById('input2').value = "";
        document.getElementById('input2').blur();
        document.getElementById('input2').style.display = 'none';
        document.getElementById('label2').innerHTML = "";
        document.getElementById('dropdown').value = "";
        document.getElementById('dropdown').blur();
        document.getElementById('dropdown').style.display = 'none';
        document.getElementById('option1').value = "Choose";
        document.getElementById('option2').value = "Microcontroller";
        document.getElementById('option3').value = "Electrical";
        document.getElementById('option4').value = "Modules";
        document.getElementById('option5').value = "Other";
        document.getElementById('label3').innerHTML = "";
        document.getElementById('downloads').innerHTML = "";
        document.getElementById('download0').innerHTML = "";
        document.getElementById('download0').href = "#";
        document.getElementById('download1').innerHTML = "";
        document.getElementById('download1').href = "#";
        document.getElementById('download2').innerHTML = "";
        document.getElementById('download2').href = "#";
    }

    opentooltip(text, x, y, position) {
        if (toolTips == true) {
            this.tooltiptext.setText(text);
            this.tooltiptext.x = x;
            this.tooltiptext.y = y + position * deviceWidth * 0.028;
            this.tooltip.width = Math.pow(this.tooltiptext.text.length * deviceWidth * 0.0095, 0.92);
            this.tooltip.x = x;
            this.tooltip.y = y + position * deviceWidth * 0.028;
            this.tooltip.setOrigin(0.5, 0.5);
            if (deviceWidth < this.tooltip.x + this.tooltip.width / 2) {
                this.tooltiptext.x -= ((this.tooltip.x + this.tooltip.width / 2) - deviceWidth) + deviceWidth * 0.01;
                this.tooltip.x -= ((this.tooltip.x + this.tooltip.width / 2) - deviceWidth) + deviceWidth * 0.01;
            }
            if (0 > this.tooltip.x - this.tooltip.width / 2) {
                this.tooltiptext.x += (0 - (this.tooltip.x - this.tooltip.width / 2)) + deviceWidth * 0.01;
                this.tooltip.x += (0 - (this.tooltip.x - this.tooltip.width / 2)) + deviceWidth * 0.01;
            }
            this.tooltip.setVisible(1);
            this.tooltiptext.setVisible(1);
        }
    }

    wireShortcutKeys(wire) {
        var selectWireGroup;
        for (var v = 0; v < this.nodes.length; v++) {
            if (nodeLinks[v * 4] == wire || (nodeLinks[v * 4] <= -1 && nodeLinks[(v * 4) + 2] == wire)) {
                selectWireGroup = nodeLinks[(v * 4) + 3];
            }
        }
        var selectSlot = 0;
        for (var v = 0; v < this.nodes.length; v++) {
            if (nodeLinks[(v * 4) + 3] == selectWireGroup && nodeLinks[v * 4] != -3) {
                this.selected[selectSlot] = this.nodes[v];
                selectSlot++;
            }
        }
        for (var v = 0; v < this.nodes.length; v++) {
            if (nodeLinks[(v * 4) + 3] == selectWireGroup) {
                if (nodeLinks[v * 4] <= -1) {
                    this.selected[selectSlot] = this.wires[nodeLinks[(v * 4) + 2]];
                } else {
                    this.selected[selectSlot] = this.wires[nodeLinks[v * 4]];
                }
                selectSlot++;
            }
        }
        for (var v = 0; v < this.selected.length; v++) {
            if (this.selected[v] == -1) {
                this.selected.splice(v, (this.selected.length - v));
            }
        }
        clean(this.selected);

        if (element == null) {
            if (!(this.shift.isPressed())) {
                if (this.key0.wasPressed()) {
                    if (this.selected[0].fillColor != paletteColors[9]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = paletteColors[9];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = paletteColors[9];
                    }
                }
                if (this.key1.wasPressed()) {
                    if (this.selected[0].fillColor != paletteColors[0]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = paletteColors[0];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = paletteColors[0];
                    }
                }
                if (this.key2.wasPressed()) {
                    if (this.selected[0].fillColor != paletteColors[1]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = paletteColors[1];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = paletteColors[1];
                    }
                }
                if (this.key3.wasPressed()) {
                    if (this.selected[0].fillColor != paletteColors[2]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = paletteColors[2];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = paletteColors[2];
                    }
                }
                if (this.key4.wasPressed()) {
                    if (this.selected[0].fillColor != paletteColors[3]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = paletteColors[3];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = paletteColors[3];
                    }
                }
                if (this.key5.wasPressed()) {
                    if (this.selected[0].fillColor != paletteColors[4]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = paletteColors[4];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = paletteColors[4];
                    }
                }
                if (this.key6.wasPressed()) {
                    if (this.selected[0].fillColor != paletteColors[5]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = paletteColors[5];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = paletteColors[5];
                    }
                }
                if (this.key7.wasPressed()) {
                    if (this.selected[0].fillColor != paletteColors[6]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = paletteColors[6];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = paletteColors[6];
                    }
                }
                if (this.key8.wasPressed()) {
                    if (this.selected[0].fillColor != paletteColors[7]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = paletteColors[7];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = paletteColors[7];
                    }
                }
                if (this.key9.wasPressed()) {
                    if (this.selected[0].fillColor != paletteColors[8]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = paletteColors[8];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = paletteColors[8];
                    }
                }
            } else {
                if (this.key1.wasPressed()) {
                    if (this.selected[0].fillColor != customColors[0]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = customColors[0];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = customColors[0];
                    }
                }
                if (this.key2.wasPressed()) {
                    if (this.selected[0].fillColor != customColors[1]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = customColors[1];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = customColors[1];
                    }
                }
                if (this.key3.wasPressed()) {
                    if (this.selected[0].fillColor != customColors[2]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = customColors[2];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = customColors[2];
                    }
                }
                if (this.key4.wasPressed()) {
                    if (this.selected[0].fillColor != customColors[3]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = customColors[3];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = customColors[3];
                    }
                }
                if (this.key5.wasPressed()) {
                    if (this.selected[0].fillColor != customColors[4]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = customColors[4];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = customColors[4];
                    }
                }
                if (this.key6.wasPressed()) {
                    if (this.selected[0].fillColor != customColors[5]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = customColors[5];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = customColors[5];
                    }
                }
                if (this.key7.wasPressed()) {
                    if (this.selected[0].fillColor != customColors[6]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = customColors[6];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = customColors[6];
                    }
                }
                if (this.key8.wasPressed()) {
                    if (this.selected[0].fillColor != customColors[7]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = customColors[7];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = customColors[7];
                    }
                }
                if (this.key9.wasPressed()) {
                    if (this.selected[0].fillColor != customColors[8]) {
                        undo.push("wireColor");
                        undo.push(this.selected[0].fillColor);
                        var selected = [];
                        for (var v = 0; v < this.selected.length; v++) {
                            this.selected[v].fillColor = customColors[8];
                            selected.push(this.selected[v]);
                        }
                        undo.push(selected);
                        undo.push(-1);
                        redo.splice(0, redo.length);
                        wireColor = customColors[8];
                    }
                }
            }

            var noOther = true;
            for (var v = 0; v < this.customColors.length; v++) {
                if (this.customColors[v].isOver()) {
                    noOther = false;
                }
            }
            if (noOther == true) {
                if (this.del.wasPressed()) {
                    var wires = [];
                    var nodes = [];
                    var points = [];
                    for (var v = 0; v < this.nodes.length; v++) {
                        if (nodeLinks[v * 4] >= 0 && nodeLinks[(v * 4) + 3] == selectWireGroup) {
                            if (this.wires[nodeLinks[v * 4]].visible == 1) {
                                this.wires[nodeLinks[v * 4]].setVisible(0);
                                this.wireLines[nodeLinks[v * 4]].setVisible(0);
                                wires.push(nodeLinks[v * 4]);
                            }
                        }
                        if (nodeLinks[v * 4] <= -1 && nodeLinks[(v * 4) + 3] == selectWireGroup) {
                            if (this.wires[nodeLinks[(v * 4) + 1]].visible == 1) {
                                this.wires[nodeLinks[(v * 4) + 1]].setVisible(0);
                                this.wireLines[nodeLinks[(v * 4) + 1]].setVisible(0);
                                wires.push(nodeLinks[(v * 4) + 1]);
                            }
                            if (this.wires[nodeLinks[(v * 4) + 2]].visible == 1) {
                                this.wires[nodeLinks[(v * 4) + 2]].setVisible(0);
                                this.wireLines[nodeLinks[(v * 4) + 2]].setVisible(0);
                                wires.push(nodeLinks[(v * 4) + 2]);
                            }
                        }
                        if (nodeLinks[(v * 4) + 3] == selectWireGroup) {
                            if (this.nodes[v].visible == 1) {
                                this.nodes[v].setVisible(0);
                                nodes.push(v);
                            }

                            if (this.objectIDs[nodeLinks[v * 4 + 1]] == 10) {
                                if (this.objects[nodeLinks[v * 4 + 1]].visible == 1) {
                                    this.objects[nodeLinks[v * 4 + 1]].setVisible(0);
                                    points.push(nodeLinks[v * 4 + 1]);
                                }
                            }
                        }
                    }
                    undo.push("deletedWire");
                    undo.push(wires);
                    undo.push(nodes);
                    undo.push(points);
                    redo.splice(0, redo.length);
                    this.clearPanel();

                    selectedMode = false;
                    boxMode = false;
                }
            }
        }
    }
}

function isHexValid(value) {
    if (value == "000000") {
        return "000001"
    }
    if (value == "") {
        return false;
    }
    if (value.length < 6) {
        return false;
    }
    var p = 0;
    var re1 = /(\n|\r)+/g;
    var re2 = /[\Wg-zG-Z]/;
    var re3 = /v/i;

    var s = arguments[0];
    if (typeof s != "string") {
        s = s.toString();
    }

    var opt = arguments[1];
    if (re3.test(opt) && (s.length % 2 > 0)) {
        return false;
    }

    s.replace(re1, "");

    if (s.substr(0, 1) == "#") {
        p = 1;
        value = value.substr(1);
        return value;
    } else if (s.substr(0, 2).toLowerCase() == "0x") {
        p = 2;
        value = value.substr(2);
        return value;
    }

    if (re2.test(s.substr(p, s.length))) {
        return false;
    }
    return value;
}